var searchIndex = {};
searchIndex["abstract_ns"] = {"doc":"Abstract traits for name service library","items":[[3,"Address","abstract_ns","Address that nameservice has returned",null,null],[3,"AddressBuilder","","A builder interface for `Address`",null,null],[3,"WeightedSet","","A structure that represents a set of addresses of the same priority",null,null],[3,"MemResolver","","A stub resolver that resolves names from in-memory hash table",null,null],[3,"StaticStream","","A stream that resolves to a static addresss and never updates",null,null],[3,"RouterBuilder","","A builder/fluent interface to create a `Router`",null,null],[3,"Router","","A helper which allows to resolve different names by different means",null,null],[3,"Union","","Represents a stream that is the result of `union_stream()`",null,null],[4,"Error","","A generic name resolution error",null,null],[13,"InvalidName","","Couldn't parse a name before resolution",0,null],[13,"TemporaryError","","Temporary name resolution error",0,null],[13,"NameNotFound","","We have sucessfully done name resolution but there is no such name",0,null],[5,"union_stream","","Get the stream that emits address that is a union (superset) of all adderesses of underlying streams",null,{"inputs":[{"name":"vec"}],"output":{"name":"union"}}],[5,"union_addresses","","Union `Address` values into another address",null,{"inputs":[{"name":"i"}],"output":{"name":"address"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"socketaddr"}],"output":{"name":"address"}}],[11,"from","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Create a new empty address builder",2,{"inputs":[],"output":{"name":"addressbuilder"}}],[11,"add_addresses","","Add set of addresses of the same priority",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"addressbuilder"}}],[11,"into_address","","Finish building the Address object",2,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"pick_one","","Select one random address to connect to",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"at","","Returns the set of the hosts for the same priority",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"weightedset"}}],[11,"iter","","Returns iterator over `WeightedSet`'s starting from high priority set",1,{"inputs":[{"name":"self"}],"output":{"name":"priorityiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"pick_one","","Select one random address to connect to",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addresses","","Returns iterator over underlying addresses",3,{"inputs":[{"name":"self"}],"output":{"name":"addressiter"}}],[11,"compare_addresses","","Compares two weighted sets to find out which addresses have been removed from set or added",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"weightedset"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create new empty stub resolver",4,{"inputs":[],"output":{"name":"memresolver"}}],[11,"add_host","","Add a single host to resolve",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"ipaddr"}],"output":null}],[11,"contains_name","","Check if name is in resolver",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"resolve","","",4,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxfuture"}}],[11,"new","","Create a static stream from any thing convertible to the address",5,{"inputs":[{"name":"t"}],"output":{"name":"staticstream"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"router"}}],[11,"new","","Start creating DNS router object",7,{"inputs":[],"output":{"name":"routerbuilder"}}],[11,"add_ip","","Add a name that is resolved to a single IP (just like in `MemResolver`)",7,{"inputs":[{"name":"self"},{"name":"name"},{"name":"ipaddr"}],"output":{"name":"self"}}],[11,"add_suffix","","Add a suffix which will be resolved using specified resolver object",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"r"}],"output":{"name":"self"}}],[11,"add_default","","Add a default resolver",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"into_resolver","","Build real router object which can be used to resolve names",7,{"inputs":[{"name":"self"}],"output":{"name":"router"}}],[11,"resolve","","",6,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxfuture"}}],[11,"subscribe","","",6,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxstream"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"Name","","A type alias that represents a name resolved by a name service",null,null],[6,"Weight","","A type alias for a weight for each name in an address",null,null],[8,"Resolver","","Main trait that does name resolution",null,null],[10,"resolve","","Resolve a name to an address once",9,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxfuture"}}],[11,"subscribe","","Resolve a name and subscribe to the updates",9,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxstream"}}],[11,"subscribe","","Resolve a name and subscribe to the updates",9,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxstream"}}]],"paths":[[4,"Error"],[3,"Address"],[3,"AddressBuilder"],[3,"WeightedSet"],[3,"MemResolver"],[3,"StaticStream"],[3,"Router"],[3,"RouterBuilder"],[3,"Union"],[8,"Resolver"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIGenericString","ansi_term","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"Prefix","","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don't have to use Blue.normal() just to get blue text.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this colour and another.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Style with no differences.",8,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this style and another.",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"ANSIGenericStrings"],[4,"Colour"],[3,"ANSIGenericString"],[3,"Prefix"],[3,"Suffix"],[3,"Infix"],[6,"ANSIString"],[6,"ANSIByteString"],[3,"Style"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["app_dirs"] = {"doc":"*Put your app's data in the right place on every platform* # Usage ``` extern crate app_dirs; use app_dirs::*;","items":[[3,"AppInfo","app_dirs","Struct that holds information about your app.",null,null],[12,"name","","Name of your app (e.g. \"Hearthstone\").",0,null],[12,"author","","Author of your app (e.g. \"Blizzard\").",0,null],[4,"AppDataType","","Enum specifying the type of app data you want to store.",null,null],[13,"UserConfig","","User-specific app configuration data.",1,null],[13,"UserData","","User-specific arbitrary app data.",1,null],[13,"UserCache","","User-specific app cache data.",1,null],[13,"SharedData","","System-wide arbitrary app data.",1,null],[13,"SharedConfig","","System-wide app configuration data.",1,null],[4,"AppDirsError","","Error type for any `app_dirs` operation.",null,null],[13,"Io","","An I/O error occurred during the operation.",2,null],[13,"NotSupported","","App-specific directories are not properly supported by the system (e.g. required environment variables don't exist).",2,null],[13,"InvalidAppInfo","","App info given to this library was invalid (e.g. app name or author were empty).",2,null],[5,"app_dir","","Creates (if necessary) and returns path to **app-specific** data **subdirectory** for provided data type and subdirectory path.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_app_dir","","Returns (but **does not create**) path to **app-specific** data **subdirectory** for provided data type and subdirectory path.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"},{"name":"str"}],"output":{"name":"result"}}],[5,"app_root","","Creates (if necessary) and returns path to **app-specific** data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"}],"output":{"name":"result"}}],[5,"get_app_root","","Returns (but **does not create**) path to **app-specific** data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"}],"output":{"name":"result"}}],[5,"data_root","","Creates (if necessary) and returns path to **top-level** data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"}],"output":{"name":"result"}}],[5,"get_data_root","","Returns (but **does not create**) path to **top-level** data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"}],"output":{"name":"result"}}],[5,"sanitized","","Returns a cross-platform-filename-safe version of any string.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"appinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"appinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"appinfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"appdatatype"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"appdatatype"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_shared","","Returns `true` for non-user-specific data types.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[3,"AppInfo"],[4,"AppDataType"],[4,"AppDirsError"]]};
searchIndex["arrayvec"] = {"doc":"**arrayvec** provides the types `ArrayVec` and `ArrayString`: array-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",1,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is _not_ a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["base58"] = {"doc":"Base58-to-text encoding","items":[[4,"FromBase58Error","base58","Errors that can occur when decoding base58 encoded string.",null,null],[13,"InvalidBase58Character","","The input contained a character which is not a part of the base58 format.",0,null],[13,"InvalidBase58Length","","The input had invalid length.",0,null],[8,"ToBase58","","A trait for converting a value to base58 encoded string.",null,null],[10,"to_base58","","Converts a value of `self` to a base58 value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromBase58","","A trait for converting base58 encoded values.",null,null],[10,"from_base58","","Convert a value of `self`, interpreted as base58 encoded data, into an owned vector of bytes, returning a vector.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"frombase58error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"frombase58error"}],"output":{"name":"bool"}}]],"paths":[[4,"FromBase58Error"],[8,"ToBase58"],[8,"FromBase58"]]};
searchIndex["base64"] = {"doc":"","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[12,"char_set","","Character set to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Base64Error","","",null,null],[13,"Utf8","","",2,null],[13,"InvalidByte","","",2,null],[13,"InvalidLength","","",2,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,null],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec<u8>. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"decode_ws","","DEPRECATED -- will be replaced by `decode_config(input, Base64Mode::MIME);`",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,null],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied buffer to avoid allocations.",null,null],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec<u8>.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"name":"result"}}],[7,"STANDARD","","",null,null],[7,"URL_SAFE","","",null,null],[7,"URL_SAFE_NO_PAD","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"base64error"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"base64error"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"utf8error"}],"output":{"name":"base64error"}}]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Base64Error"]]};
searchIndex["bigint"] = {"doc":"Efficient large, fixed-size big integers and hashes.","items":[[0,"uint","bigint","Big unsigned integer types.",null,null],[3,"U512","bigint::uint","Little-endian large integer type",null,null],[12,"0","","",0,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",1,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",2,null],[4,"FromDecStrErr","","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",3,null],[13,"InvalidLength","","Value does not fit into type",3,null],[8,"Uint","","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",4,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",4,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest value that can be represented by this integer type.",4,{"inputs":[],"output":{"name":"self"}}],[10,"from_dec_str","","Convert from a decimal string.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",4,null],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",4,null],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`).",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"exp10","","Create `Uint(10**n)`",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",4,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",4,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",4,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",4,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",4,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",4,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",4,null],[10,"is_zero","","Returns",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fromdecstrerr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"from_dec_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",0,null],[11,"to_little_endian","","",0,null],[11,"to_hex","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",0,null],[11,"overflowing_add","","Optimized instructions",0,null],[11,"overflowing_sub","","",0,null],[11,"overflowing_mul","","",0,null],[11,"overflowing_div","","",0,null],[11,"overflowing_rem","","",0,null],[11,"overflowing_neg","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"from_dec_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",1,null],[11,"to_little_endian","","",1,null],[11,"to_hex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",1,null],[11,"overflowing_add","","Optimized instructions",1,null],[11,"overflowing_sub","","",1,null],[11,"overflowing_mul","","",1,null],[11,"overflowing_div","","",1,null],[11,"overflowing_rem","","",1,null],[11,"overflowing_neg","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"shl","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"from_dec_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",2,null],[11,"to_little_endian","","",2,null],[11,"to_hex","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,null],[11,"overflowing_add","","Optimized instructions",2,null],[11,"overflowing_sub","","",2,null],[11,"overflowing_mul","","",2,null],[11,"overflowing_div","","",2,null],[11,"overflowing_rem","","",2,null],[11,"overflowing_neg","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"u128"}}],[11,"from","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"full_mul","","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",0,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",0,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",2,{"inputs":[{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u128"}],"output":{"name":"u256"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"U512"],[3,"U256"],[3,"U128"],[4,"FromDecStrErr"],[8,"Uint"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["bitcrypto"] = {"doc":"","items":[[8,"Digest","bitcrypto","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",null,null],[10,"input","","Provide message data.",0,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",0,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",0,null],[10,"output_bits","","Get the output size in bits.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",0,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"DHash160","","",null,null],[3,"DHash256","","",null,null],[5,"ripemd160","","RIPEMD160",null,null],[5,"sha1","","SHA-1",null,null],[5,"sha256","","SHA-256",null,null],[5,"dhash160","","SHA-256 and RIPEMD160",null,null],[5,"dhash256","","Double SHA-256",null,null],[5,"siphash24","","SipHash-2-4",null,null],[5,"checksum","","Data checksum",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",1,null],[11,"result","","",1,null],[11,"reset","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"input","","",2,null],[11,"result","","",2,null],[11,"reset","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"Digest"],[3,"DHash160"],[3,"DHash256"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[6,"__BitFlagsWidth","bitflags","",null,null],[14,"bitflags","","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a continuous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_buf","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","bytes::buf","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"new","bytes","Creates a new empty `Bytes`",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"try_mut","","Attempt to convert into a `BytesMut` handle.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_buf","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"with_capacity","","Create a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"freeze","","Convert `self` into an immutable `Bytes`",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"take","","Remove the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Sets the length of the buffer",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",2,null],[11,"write_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","",2,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"bigendian"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"littleendian"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chain"] = {"doc":"","items":[[0,"hex","chain","Hex binary-to-text encoding",null,null],[8,"ToHex","chain::hex","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",2,null],[13,"InvalidHexLength","","The input had an invalid length",2,null],[0,"hash","chain","Fixed-size hashes",null,null],[3,"H32","chain::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","chain","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","chain::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[0,"uint","chain::bigint","Big unsigned integer types.",null,null],[4,"FromDecStrErr","chain::bigint::uint","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",3,null],[13,"InvalidLength","","Value does not fit into type",3,null],[8,"Uint","","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",4,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",4,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest value that can be represented by this integer type.",4,{"inputs":[],"output":{"name":"self"}}],[10,"from_dec_str","","Convert from a decimal string.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",4,null],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",4,null],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`).",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"exp10","","Create `Uint(10**n)`",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",4,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",4,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",4,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",4,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",4,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",4,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",4,null],[10,"is_zero","","Returns",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",5,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",6,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",7,null],[8,"Uint","chain::bigint","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",4,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",4,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest value that can be represented by this integer type.",4,{"inputs":[],"output":{"name":"self"}}],[10,"from_dec_str","","Convert from a decimal string.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",4,null],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",4,null],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`).",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"exp10","","Create `Uint(10**n)`",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",4,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",4,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",4,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",4,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",4,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",4,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",4,null],[10,"is_zero","","Returns",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"FromDecStrErr","","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",3,null],[13,"InvalidLength","","Value does not fit into type",3,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",7,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",6,null],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",5,null],[0,"compact","chain","Compact representation of `U256`",null,null],[3,"Compact","chain::compact","Compact representation of `U256`",null,null],[3,"Block","chain","",null,null],[12,"block_header","","",8,null],[12,"transactions","","",8,null],[3,"BlockHeader","","",null,null],[12,"version","","",9,null],[12,"previous_header_hash","","",9,null],[12,"merkle_root_hash","","",9,null],[12,"time","","",9,null],[12,"bits","","",9,null],[12,"nonce","","",9,null],[3,"Transaction","","",null,null],[12,"version","","",10,null],[12,"inputs","","",10,null],[12,"outputs","","",10,null],[12,"lock_time","","",10,null],[3,"TransactionInput","","",null,null],[12,"previous_output","","",11,null],[12,"script_sig","","",11,null],[12,"sequence","","",11,null],[3,"TransactionOutput","","",null,null],[12,"value","","",12,null],[12,"script_pubkey","","",12,null],[3,"OutPoint","","",null,null],[12,"hash","","",13,null],[12,"index","","",13,null],[3,"HashedData","","",null,null],[12,"size","","",14,null],[12,"hash","","",14,null],[12,"data","","",14,null],[3,"IndexedBlock","","",null,null],[12,"header","","",15,null],[12,"transactions","","",15,null],[3,"IndexedBlockHeader","","",null,null],[12,"hash","","",16,null],[12,"raw","","",16,null],[3,"IndexedTransaction","","",null,null],[12,"hash","","",17,null],[12,"raw","","",17,null],[5,"merkle_root","","Calculates the root of the merkle tree https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees",null,null],[5,"merkle_node_hash","","Calculate merkle tree node hash",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"h256"}}],[0,"constants","","",null,null],[17,"SEQUENCE_LOCKTIME_DISABLE_FLAG","chain::constants","",null,null],[17,"SEQUENCE_FINAL","","",null,null],[17,"SEQUENCE_LOCKTIME_TYPE_FLAG","","",null,null],[17,"SEQUENCE_LOCKTIME_MASK","","",null,null],[17,"LOCKTIME_THRESHOLD","","Threshold for `nLockTime`: below this value it is interpreted as block number, otherwise as UNIX timestamp.",null,null],[17,"SATOSHIS_IN_COIN","","Number of Satoshis in single coin",null,null],[11,"fmt","chain","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",8,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"h256","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"new","","",8,{"inputs":[{"name":"blockheader"},{"name":"vec"}],"output":{"name":"self"}}],[11,"merkle_root","","Returns block's merkle root.",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"transactions","","",8,null],[11,"header","","",8,{"inputs":[{"name":"self"}],"output":{"name":"blockheader"}}],[11,"hash","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"blockheader"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"blockheader"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"blockheader"}}],[11,"hash","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",9,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"outpoint"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"outpoint"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"null","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"is_null","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"transactioninput"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"transactioninput"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"transactioninput"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"transactioninput"}}],[11,"coinbase","","",11,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"is_final","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transactionoutput"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transactionoutput"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transactionoutput"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",12,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"transaction"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"transaction"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",10,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"hash","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"inputs","","",10,null],[11,"outputs","","",10,null],[11,"is_empty","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_coinbase","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final_in_block","","",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"total_spends","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"indexedblock"}}],[11,"from","","",15,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[{"name":"indexedblockheader"},{"name":"vec"}],"output":{"name":"self"}}],[11,"hash","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"to_raw_block","","",15,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"merkle_root","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"is_final","","",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"deserialize","","",15,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"indexedblockheader"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"blockheader"}],"output":{"name":"self"}}],[11,"new","","",16,{"inputs":[{"name":"h256"},{"name":"blockheader"}],"output":{"name":"self"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",16,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"indexedtransaction"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"indexedtransaction"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","",17,{"inputs":[{"name":"h256"},{"name":"transaction"}],"output":{"name":"self"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",17,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[6,"ShortTransactionID","","",null,null],[8,"RepresentH256","","",null,null],[10,"h256","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[8,"ReadAndHash","","",null,null],[10,"read_and_hash","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize","chain::bytes","",20,null],[11,"serialized_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","chain::compact","",21,null],[11,"serialize","chain::hash","",22,null],[11,"serialized_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",23,null],[11,"serialized_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",24,null],[11,"serialized_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",25,null],[11,"serialized_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",26,null],[11,"serialized_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",27,null],[11,"serialized_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",28,null],[11,"serialized_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",29,null],[11,"serialized_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","chain::bytes","",20,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","chain::compact","",21,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","chain::hash","",22,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",24,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",26,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",27,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",28,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",29,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"hash","chain::bytes","",20,null],[11,"hash","chain::hash","",22,null],[11,"hash","","",23,null],[11,"hash","","",24,null],[11,"hash","","",25,null],[11,"hash","","",26,null],[11,"hash","","",27,null],[11,"hash","","",28,null],[11,"hash","","",29,null],[11,"deref","chain::bytes","",20,null],[11,"deref","","",30,null],[11,"deref","chain::hash","",22,null],[11,"deref","","",23,null],[11,"deref","","",24,null],[11,"deref","","",25,null],[11,"deref","","",26,null],[11,"deref","","",27,null],[11,"deref","","",28,null],[11,"deref","","",29,null],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","chain::bytes","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","chain::compact","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","chain::hash","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","chain::bytes","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","chain::hash","",22,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","chain::bytes","",20,null],[11,"deref_mut","","",30,null],[11,"deref_mut","chain::hash","",22,null],[11,"deref_mut","","",23,null],[11,"deref_mut","","",24,null],[11,"deref_mut","","",25,null],[11,"deref_mut","","",26,null],[11,"deref_mut","","",27,null],[11,"deref_mut","","",28,null],[11,"deref_mut","","",29,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","chain::bytes","",20,null],[11,"as_mut","","",30,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","chain::compact","",21,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"clone","chain::hash","",22,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","chain::bytes","",20,null],[11,"as_ref","","",30,null],[11,"as_ref","chain::hash","",22,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","chain::bytes","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","chain::hash","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","chain::bytes","",20,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","chain::compact","",21,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"eq","chain::hash","",22,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","chain::bytes","",20,null],[11,"from","","",20,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","chain::compact","",21,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"from","","",21,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"from","chain::bigint","",6,{"inputs":[{"name":"compact"}],"output":{"name":"u256"}}],[11,"from","chain::hash","",22,null],[11,"from","","",22,null],[11,"from","","",22,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",22,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",23,null],[11,"from","","",23,null],[11,"from","","",23,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",23,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",24,null],[11,"from","","",24,null],[11,"from","","",24,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",24,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",25,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",26,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",27,null],[11,"from","","",27,null],[11,"from","","",27,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",27,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",28,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",29,null],[11,"from","","",29,null],[11,"from","","",29,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",29,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","chain::bigint","",5,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",6,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",5,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",6,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",7,{"inputs":[{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",5,{"inputs":[{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",6,{"inputs":[{"name":"u128"}],"output":{"name":"u256"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",7,{"inputs":[{"name":"isize"}],"output":{"name":"u128"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"not","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"not","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"u512"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"u256"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"u128"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shl","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_dec_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",5,null],[11,"to_little_endian","","",5,null],[11,"to_hex","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"u512"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"u512"}}],[11,"max_value","","",5,{"inputs":[],"output":{"name":"u512"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,null],[11,"overflowing_add","","Optimized instructions",5,null],[11,"overflowing_sub","","",5,null],[11,"overflowing_mul","","",5,null],[11,"overflowing_div","","",5,null],[11,"overflowing_rem","","",5,null],[11,"overflowing_neg","","",5,null],[11,"from_dec_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",6,null],[11,"to_little_endian","","",6,null],[11,"to_hex","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"u256"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"u256"}}],[11,"max_value","","",6,{"inputs":[],"output":{"name":"u256"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,null],[11,"overflowing_add","","Optimized instructions",6,null],[11,"overflowing_sub","","",6,null],[11,"overflowing_mul","","",6,null],[11,"overflowing_div","","",6,null],[11,"overflowing_rem","","",6,null],[11,"overflowing_neg","","",6,null],[11,"from_dec_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",7,null],[11,"to_little_endian","","",7,null],[11,"to_hex","","",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"u128"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","",7,{"inputs":[],"output":{"name":"u128"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",7,null],[11,"overflowing_add","","Optimized instructions",7,null],[11,"overflowing_sub","","",7,null],[11,"overflowing_mul","","",7,null],[11,"overflowing_div","","",7,null],[11,"overflowing_rem","","",7,null],[11,"overflowing_neg","","",7,null],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shr","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fromdecstrerr"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"description","chain::hex","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"take","chain::hash","",22,null],[11,"reversed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",22,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",23,null],[11,"reversed","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",23,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",24,null],[11,"reversed","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",24,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",25,null],[11,"reversed","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",25,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",26,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",26,null],[11,"reversed","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",26,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",27,null],[11,"reversed","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",27,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",28,null],[11,"reversed","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",28,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",29,null],[11,"reversed","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",29,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","chain::bytes","",20,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",30,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"full_mul","chain::bigint","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",6,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"new","chain::compact","",21,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"max_value","","",21,{"inputs":[],"output":{"name":"compact"}}],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_u256","","",21,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"to_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}]],"paths":[[8,"ToHex"],[8,"FromHex"],[4,"FromHexError"],[4,"FromDecStrErr"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[3,"Block"],[3,"BlockHeader"],[3,"Transaction"],[3,"TransactionInput"],[3,"TransactionOutput"],[3,"OutPoint"],[3,"HashedData"],[3,"IndexedBlock"],[3,"IndexedBlockHeader"],[3,"IndexedTransaction"],[8,"RepresentH256"],[8,"ReadAndHash"],[3,"Bytes"],[3,"Compact"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"YamlLoader","clap","",null,null],[3,"Arg","","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should **not** be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should *not* be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument *values*, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the *final* subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application *does* have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` *not* to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","Specifies that the parser should propagate global arg's values down through any *used* child subcommands. Meaning, if a subcommand wasn't used, the values won't be propagated down to said subcommand.",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands *do* have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a Format error. Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash-completion completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instance of [`App`] from a .yml (YAML) file. A full example of supported YAML objects can be found in [`examples/17_yaml.rs`] and [`examples/17_yaml.yml`]. One great use for using YAML is when supporting multiple languages and dialects, as each language could be a distinct YAML file and determined at compiletime via `cargo` \"features\" in your `Cargo.toml`",5,{"inputs":[{"name":"yaml"}],"output":{"name":"app"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps *not* how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed **after** the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed **before** the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`. ",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propogated *down* through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propogated *down* through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only* one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values **are** allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which *does* consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"from","","",5,{"inputs":[{"name":"yaml"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instance of [`Arg`] from a .yml (YAML) file.",6,{"inputs":[{"name":"btreemap"}],"output":{"name":"arg"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. **Default:** `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) **Default:** `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless *at least one of* these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime **last** \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime **last** \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument *must* be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments *must* be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument **starting at** 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that *stops* parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the *minimum* number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that *multiple values* may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are **not** used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is **not** used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when *not* specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime **and** have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values **are** allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"from_yaml","","Creates a new instance of a subcommand from a YAML (.yml) document",10,{"inputs":[{"name":"yaml"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instance of `ArgGroup` from a .yml (YAML) file.",11,{"inputs":[{"name":"yaml"}],"output":{"name":"arggroup"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group *must* be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must *not* be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must *not* be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"btreemap"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"load_yaml","","A convenience macro for loading the YAML file at compile time (relative to the current file, like modules work). That YAML object can then be passed to this function.",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as MAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null],[11,"load_from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"on_event","","",12,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"],[3,"YamlLoader"]]};
searchIndex["crypto"] = {"doc":"","items":[[0,"aead","crypto","",null,null],[8,"AeadEncryptor","crypto::aead","",null,null],[10,"encrypt","","",0,null],[8,"AeadDecryptor","","",null,null],[10,"decrypt","","",1,null],[0,"aes","crypto","",null,null],[4,"KeySize","crypto::aes","AES key size",null,null],[13,"KeySize128","","",2,null],[13,"KeySize192","","",2,null],[13,"KeySize256","","",2,null],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",null,null],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",null,null],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",null,null],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",null,null],[5,"ctr","","Get the best implementation of a Ctr",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"keysize"}}],[0,"aes_gcm","crypto","",null,null],[3,"AesGcm","crypto::aes_gcm","",null,null],[11,"new","","",3,null],[11,"encrypt","","",3,null],[11,"decrypt","","",3,null],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table lookups or other timing dependant mechanisms. This module actually contains two seperate implementations - an implementation that works on a single block at a time and a second implementation that processes 8 blocks in parallel. Some block encryption modes really only work if you are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes are trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for greater efficiency, especially when using wide registers, such as the XMM registers available in x86 processors.",null,null],[3,"AesSafe128Encryptor","crypto::aessafe","",null,null],[3,"AesSafe128Decryptor","","",null,null],[3,"AesSafe192Encryptor","","",null,null],[3,"AesSafe192Decryptor","","",null,null],[3,"AesSafe256Encryptor","","",null,null],[3,"AesSafe256Decryptor","","",null,null],[3,"AesSafe128EncryptorX8","","",null,null],[3,"AesSafe128DecryptorX8","","",null,null],[3,"AesSafe192EncryptorX8","","",null,null],[3,"AesSafe192DecryptorX8","","",null,null],[3,"AesSafe256EncryptorX8","","",null,null],[3,"AesSafe256DecryptorX8","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptor"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptor"}}],[11,"new","","",4,null],[11,"new","","",5,null],[11,"block_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",4,null],[11,"block_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptor"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptor"}}],[11,"new","","",6,null],[11,"new","","",7,null],[11,"block_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",6,null],[11,"block_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptor"}}],[11,"new","","",8,null],[11,"new","","",9,null],[11,"block_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",8,null],[11,"block_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptorx8"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptorx8"}}],[11,"new","","",10,null],[11,"new","","",11,null],[11,"block_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",10,null],[11,"block_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptorx8"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptorx8"}}],[11,"new","","",12,null],[11,"new","","",13,null],[11,"block_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",12,null],[11,"block_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptorx8"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptorx8"}}],[11,"new","","",14,null],[11,"new","","",15,null],[11,"block_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",14,null],[11,"block_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",15,null],[0,"bcrypt","crypto","",null,null],[5,"bcrypt","crypto::bcrypt","",null,null],[0,"bcrypt_pbkdf","crypto","",null,null],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",null,null],[0,"blake2b","crypto","",null,null],[3,"Blake2b","crypto::blake2b","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"blake2b"}}],[11,"new_keyed","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2b","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",16,null],[11,"result","","",16,null],[11,"output_bits","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",16,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",16,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blake2s","crypto","",null,null],[3,"Blake2s","crypto::blake2s","",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"blake2s"}}],[11,"new","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"blake2s"}}],[11,"new_keyed","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2s","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",17,null],[11,"result","","",17,null],[11,"output_bits","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",17,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",17,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",17,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blockmodes","crypto","",null,null],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",null,null],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",null,null],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",null,null],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",null,null],[3,"EcbEncryptor","","ECB Encryption mode",null,null],[3,"EcbDecryptor","","ECB Decryption mode",null,null],[3,"CbcEncryptor","","CBC encryption mode",null,null],[3,"CbcDecryptor","","CBC decryption mode",null,null],[3,"CtrMode","","CTR Mode",null,null],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",null,null],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",null,null],[10,"pad_input","","Add padding to the last block of input data If the mode can't handle a non-full block, it signals that error by simply leaving the block as it is which will be detected as an InvalidLength error.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[10,"strip_output","","Remove padding from the last block of output data If false is returned, the processing fails",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nopadding"}}],[11,"pad_input","","",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pkcspadding"}}],[11,"pad_input","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",21,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"new","","Create a new ECB encryption mode object",23,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"name":"ecbencryptor"}}],[11,"reset","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"encrypt","","",23,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new ECB decryption mode object",24,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"name":"ecbdecryptor"}}],[11,"reset","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"decrypt","","",24,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC encryption mode object",25,{"inputs":[{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcencryptor"}}],[11,"reset","","",25,null],[11,"encrypt","","",25,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC decryption mode object",26,{"inputs":[{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcdecryptor"}}],[11,"reset","","",26,null],[11,"decrypt","","",26,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object",27,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"ctrmode"}}],[11,"reset","","",27,null],[11,"process","","",27,null],[11,"encrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",28,null],[11,"reset","","",28,null],[11,"process","","",28,null],[11,"encrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"blowfish","crypto","",null,null],[3,"Blowfish","crypto::blowfish","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blowfish"}}],[11,"new","","",29,null],[11,"init_state","","",29,{"inputs":[],"output":{"name":"blowfish"}}],[11,"expand_key","","",29,null],[11,"salted_expand_key","","",29,null],[11,"encrypt","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",29,null],[0,"buffer","crypto","",null,null],[3,"RefReadBuffer","crypto::buffer","",null,null],[3,"OwnedReadBuffer","","",null,null],[3,"RefWriteBuffer","","",null,null],[3,"BorrowedWriteBuffer","","",null,null],[3,"OwnedWriteBuffer","","",null,null],[4,"BufferResult","","",null,null],[13,"BufferUnderflow","","",30,null],[13,"BufferOverflow","","",30,null],[8,"ReadBuffer","","",null,null],[10,"is_empty","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"truncate","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",31,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_next","","",31,null],[11,"peek_remaining","","",31,null],[10,"take_next","","",31,null],[11,"take_remaining","","",31,null],[11,"push_to","","",31,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[8,"WriteBuffer","","",null,null],[10,"is_empty","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",32,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[10,"take_next","","",32,null],[11,"take_remaining","","",32,null],[10,"take_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bufferresult"}}],[11,"new","","",33,null],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",33,null],[11,"take_next","","",33,null],[11,"new","","",34,{"inputs":[{"name":"vec"}],"output":{"name":"ownedreadbuffer"}}],[11,"new_with_len","","",34,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"ownedreadbuffer"}}],[11,"into_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ownedwritebuffer"}}],[11,"borrow_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"borrowedwritebuffer"}}],[11,"is_empty","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",34,null],[11,"take_next","","",34,null],[11,"new","","",35,null],[11,"is_empty","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",35,null],[11,"take_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"is_empty","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",36,null],[11,"take_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"new","","",37,{"inputs":[{"name":"vec"}],"output":{"name":"ownedwritebuffer"}}],[11,"into_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ownedreadbuffer"}}],[11,"is_empty","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",37,null],[11,"take_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[0,"chacha20","crypto","",null,null],[3,"ChaCha20","crypto::chacha20","",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"chacha20"}}],[11,"new","","",38,null],[11,"new_xchacha20","","",38,null],[11,"process","","",38,null],[11,"encrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"chacha20poly1305","crypto","",null,null],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"chacha20poly1305"}}],[11,"new","","",39,null],[11,"encrypt","","",39,null],[11,"decrypt","","",39,null],[0,"curve25519","crypto","",null,null],[3,"Fe","crypto::curve25519","",null,null],[12,"0","","",40,null],[3,"GeP2","","",null,null],[3,"GeP3","","",null,null],[3,"GeP1P1","","",null,null],[3,"GePrecomp","","",null,null],[3,"GeCached","","",null,null],[5,"ge_scalarmult_base","","",null,null],[5,"sc_reduce","","",null,null],[5,"sc_muladd","","",null,null],[5,"curve25519","","",null,null],[5,"curve25519_base","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"bool"}}],[11,"add","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"sub","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"from_bytes","","",40,null],[11,"to_bytes","","",40,null],[11,"maybe_swap_with","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"maybe_set","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"invert","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gep2"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gep3"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gep1p1"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"geprecomp"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gecached"}}],[11,"to_bytes","","",41,null],[11,"double_scalarmult_vartime","","",41,null],[11,"from_bytes_negate_vartime","","",42,null],[11,"to_bytes","","",42,null],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"maybe_set","","",44,{"inputs":[{"name":"self"},{"name":"geprecomp"},{"name":"i32"}],"output":null}],[11,"select","","",44,{"inputs":[{"name":"usize"},{"name":"i8"}],"output":{"name":"geprecomp"}}],[0,"digest","crypto","",null,null],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",null,null],[10,"input","","Provide message data.",46,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",46,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",46,{"inputs":[{"name":"self"}],"output":null}],[10,"output_bits","","Get the output size in bits.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"ed25519","crypto","",null,null],[5,"keypair","crypto::ed25519","",null,null],[5,"signature","","",null,null],[5,"verify","","",null,null],[5,"exchange","","",null,null],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",null,null],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",null,null],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic reseed\" is allowed to happen. (A direct reseed through the `SeedableRng` API is not affected by this limit.)",null,null],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",47,{"inputs":[],"output":{"name":"fortuna"}}],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",47,null],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",47,null],[11,"next_u32","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_seed","","",47,null],[11,"reseed","","",47,null],[0,"ghash","crypto","",null,null],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",null,null],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",null,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ghash"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ghashwithc"}}],[11,"new","","Creates a new GHASH state, with `h` as the key",48,null],[11,"input_a","","Feeds data for GHASH's A input",48,null],[11,"input_c","","Feeds data for GHASH's C input",48,null],[11,"result","","Retrieve the digest result",48,null],[11,"input_c","","Feeds data for GHASH's C input",49,null],[11,"result","","Retrieve the digest result",49,null],[11,"input","","",48,null],[11,"reset","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",48,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",48,null],[11,"output_bytes","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hc128","crypto","",null,null],[3,"Hc128","crypto::hc128","",null,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hc128"}}],[11,"new","","",50,null],[11,"process","","",50,null],[11,"encrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",null,null],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",null,null],[11,"new","","Create a new Hmac instance.",51,null],[11,"input","","",51,null],[11,"reset","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",51,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",51,null],[11,"output_bytes","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.",null,null],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for password hashing.",null,null],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for password hashing.",null,null],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",null,null],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",null,null],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",null,null],[10,"input","","Process input data.",52,null],[10,"reset","","Reset the Mac state to begin processing another input stream.",52,{"inputs":[{"name":"self"}],"output":null}],[10,"result","","Obtain the result of a Mac computation as a MacResult.",52,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",52,null],[10,"output_bytes","","Get the size of the Mac code, in bytes.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new MacResult.",53,null],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",53,{"inputs":[{"name":"vec"}],"output":{"name":"macresult"}}],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value may permit timing attacks which defeat the security provided by the Mac function.",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"macresult"}],"output":{"name":"bool"}}],[0,"md5","crypto","",null,null],[3,"Md5","crypto::md5","The MD5 Digest algorithm",null,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"md5"}}],[11,"new","","Construct a new instance of the MD5 Digest.",54,{"inputs":[],"output":{"name":"md5"}}],[11,"input","","",54,null],[11,"reset","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",54,null],[11,"output_bits","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by http://tools.ietf.org/html/rfc2898.",null,null],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides better security, so, applications that do not have a requirement to use PBKDF2 specifically should consider using that function instead.",null,null],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where an application needs to use PBKDF2 to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The pbkdf2_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"poly1305","crypto","",null,null],[3,"Poly1305","crypto::poly1305","",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poly1305"}}],[11,"new","","",55,null],[11,"input","","",55,null],[11,"reset","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",55,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",55,null],[11,"output_bytes","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS NOT A FIXED TIME IMPLEMENTATION.",null,null],[3,"Rc4","crypto::rc4","",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"rc4"}}],[11,"new","","",56,null],[11,"process","","",56,null],[11,"encrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",null,null],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ripemd160"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"ripemd160"}}],[11,"reset","","Resets the hash to its original state also clearing the buffer. To be used in between hashing separate messages to avoid having to recreate and allocate the whole structure.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly for use with streaming messages.",57,null],[11,"result","","Returns the resulting digest of the entire message. Note: `out` must be at least 20 bytes (160 bits)",57,null],[11,"output_bits","","Returns the size of the digest in bits",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","Returns the block size the hash operates on in bytes",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"salsa20","crypto","",null,null],[3,"Salsa20","crypto::salsa20","",null,null],[5,"hsalsa20","","",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"salsa20"}}],[11,"new","","",58,null],[11,"new_xsalsa20","","",58,null],[11,"process","","",58,null],[11,"encrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",null,null],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",null,null],[5,"scrypt","","The scrypt key derivation function.",null,null],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where an application needs to use Scrypt to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The scrypt_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"scryptparams"}],"output":{"name":"result"}}],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"scryptparams"}}],[11,"new","","Create a new instance of ScryptParams.",59,{"inputs":[{"name":"u8"},{"name":"u32"},{"name":"u32"}],"output":{"name":"scryptparams"}}],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",null,null],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",null,null],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",null,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32"}}],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",null,{"inputs":[{"name":"u32"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic. Performs 4 rounds of the message block digest.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"i8"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",null,null],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Construct a `sha` object",60,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",60,null],[11,"result","","",60,null],[11,"output_bits","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",null,null],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",null,null],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",null,null],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",null,null],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",null,null],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",null,null],[17,"K64","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K32","","Constants necessary for SHA-256 family of digests.",null,null],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"sha512"}}],[11,"new","","Construct an new instance of a SHA-512 digest.",61,{"inputs":[],"output":{"name":"sha512"}}],[11,"input","","",61,null],[11,"result","","",61,null],[11,"reset","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"sha384"}}],[11,"new","","Construct an new instance of a SHA-384 digest.",62,{"inputs":[],"output":{"name":"sha384"}}],[11,"input","","",62,null],[11,"result","","",62,null],[11,"reset","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc256"}}],[11,"new","","Construct an new instance of a SHA-512/256 digest.",63,{"inputs":[],"output":{"name":"sha512trunc256"}}],[11,"input","","",63,null],[11,"result","","",63,null],[11,"reset","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc224"}}],[11,"new","","Construct an new instance of a SHA-512/224 digest.",64,{"inputs":[],"output":{"name":"sha512trunc224"}}],[11,"input","","",64,null],[11,"result","","",64,null],[11,"reset","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"sha256"}}],[11,"new","","Construct an new instance of a SHA-256 digest.",65,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",65,null],[11,"result","","",65,null],[11,"reset","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sha224"}}],[11,"new","","Construct an new instance of a SHA-224 digest.",66,{"inputs":[],"output":{"name":"sha224"}}],[11,"input","","",66,null],[11,"result","","",66,null],[11,"reset","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",null,null],[3,"Sha3","crypto::sha3","",null,null],[4,"Sha3Mode","","SHA-3 Modes.",null,null],[13,"Sha3_224","","",67,null],[13,"Sha3_256","","",67,null],[13,"Sha3_384","","",67,null],[13,"Sha3_512","","",67,null],[13,"Shake128","","",67,null],[13,"Shake256","","",67,null],[13,"Keccak224","","",67,null],[13,"Keccak256","","",67,null],[13,"Keccak384","","",67,null],[13,"Keccak512","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sha3mode"}}],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0 for modes with variable output as for shake functions.",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",68,{"inputs":[{"name":"sha3mode"}],"output":{"name":"sha3"}}],[11,"sha3_224","","New SHA3-224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_256","","New SHA3-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_384","","New SHA3-384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_512","","New SHA3-512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_128","","New SHAKE-128 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_256","","New SHAKE-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak224","","New Keccak224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak256","","New Keccak256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak384","","New Keccak384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak512","","New Keccak512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"input","","",68,null],[11,"result","","",68,null],[11,"reset","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"sosemanuk","crypto","",null,null],[3,"Sosemanuk","crypto::sosemanuk","",null,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sosemanuk"}}],[11,"new","","",69,null],[11,"process","","",69,null],[11,"encrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"symmetriccipher","crypto","",null,null],[4,"SymmetricCipherError","crypto::symmetriccipher","",null,null],[13,"InvalidLength","","",70,null],[13,"InvalidPadding","","",70,null],[8,"BlockEncryptor","","",null,null],[10,"block_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block","","",71,null],[8,"BlockEncryptorX8","","",null,null],[10,"block_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block_x8","","",72,null],[8,"BlockDecryptor","","",null,null],[10,"block_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block","","",73,null],[8,"BlockDecryptorX8","","",null,null],[10,"block_size","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block_x8","","",74,null],[8,"Encryptor","","",null,null],[10,"encrypt","","",75,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"Decryptor","","",null,null],[10,"decrypt","","",76,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"SynchronousStreamCipher","","",null,null],[10,"process","","",77,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"symmetricciphererror"}}],[0,"util","crypto","",null,null],[5,"supports_aesni","crypto::util","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"secure_memset","","",null,null],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal length, the function returns false immediately.",null,null],[5,"rust_crypto_util_supports_aesni","","",null,null],[5,"rust_crypto_util_fixed_time_eq_asm","","",null,null],[5,"rust_crypto_util_secure_memset","","",null,null],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",null,null],[3,"Whirlpool","crypto::whirlpool","",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"whirlpool"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"whirlpool"}}],[11,"input","","",78,null],[11,"result","","",78,null],[11,"reset","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"aesni","crypto","",null,null],[3,"AesNiEncryptor","crypto::aesni","",null,null],[3,"AesNiDecryptor","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"aesniencryptor"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"aesnidecryptor"}}],[11,"new","","",79,null],[11,"new","","",80,null],[11,"block_size","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",79,null],[11,"block_size","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",80,null]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[3,"Blake2s"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and reader that works with the `serialize` crate to do type based encoding and decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser's internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is first returned. All subsequent calls of `next_bytes` will return `EndOfCsv`. (EOF is exempt from this. Depending on the state of the parser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`, all in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the parser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This *never* writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","csv","Creates a new encodable record. The value returned can be passed to `Encodable::encode`.",7,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used to access the raw CSV record.",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"emit_nil","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",8,{"inputs":[{"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recordterminator"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",9,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",9,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",9,{"inputs":[{"name":"s"}],"output":{"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",9,{"inputs":[{"name":"v"}],"output":{"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",9,{"inputs":[{"name":"self"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is a `String`.",9,{"inputs":[{"name":"self"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a *copy* of the first record in the CSV data as strings.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"reader"}}],[11,"double_quote","","Enable double quote escapes.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",9,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Returns the underlying field data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When this method returns `true`, all iterators will always return `None`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_bytes","","An iterator over fields in the current record.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"next_str","","This is just like `next_bytes` except it converts each field to a Unicode string in place.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"quotestyle"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",13,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",13,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",13,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any time, `as_string` or `as_bytes` can be called to retrieve the cumulative CSV data.",13,{"inputs":[],"output":{"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",13,null],[11,"into_string","","Convert the Writer into a string of written CSV data",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_bytes","","Convert the Writer into a vector of encoded CSV bytes.",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"encode","","Writes a record by encoding any `Encodable` value.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer operations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",14,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"locatableerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",15,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["db"] = {"doc":"","items":[[0,"hash","db","Fixed-size hashes",null,null],[3,"H32","db::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","db","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","db::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[3,"BestBlock","db","Best block information",null,null],[12,"number","","Height/number of the best block (genesis block has zero height)",0,null],[12,"hash","","Hash of the best block",0,null],[3,"BlockAncestors","","",null,null],[3,"BlockChainDatabase","","",null,null],[3,"ForkChainDatabase","","",null,null],[3,"BlockIterator","","",null,null],[3,"SideChainOrigin","","",null,null],[12,"ancestor","","newest ancestor block number",1,null],[12,"canonized_route","","side chain block hashes. Ordered from oldest to newest",1,null],[12,"decanonized_route","","canon chain block hahses. Ordered from oldest to newest",1,null],[12,"block_number","","new block number",1,null],[3,"TransactionMeta","","structure for indexing transaction info",null,null],[4,"BlockOrigin","","",null,null],[13,"KnownBlock","","",2,null],[13,"CanonChain","","",2,null],[12,"block_number","db::BlockOrigin","",2,null],[13,"SideChain","db","",2,null],[13,"SideChainBecomingCanonChain","","",2,null],[4,"BlockRef","","",null,null],[13,"Number","","",3,null],[13,"Hash","","",3,null],[4,"Error","","",null,null],[13,"DatabaseError","","Low level database error",4,null],[13,"CannotCanonize","","Invalid block",4,null],[13,"UnknownParent","","Uknown parent",4,null],[13,"AncientFork","","Ancient fork",4,null],[0,"kv","","",null,null],[3,"CacheDatabase","db::kv","",null,null],[3,"DiskDatabase","","Key-Value database.",null,null],[3,"DatabaseConfig","","Database configuration",null,null],[12,"max_open_files","","Max number of open files.",5,null],[12,"cache_sizes","","Cache sizes (in MiB) for specific columns.",5,null],[12,"bloom_filters","","Specific number of bloom filter bits, if any",5,null],[12,"compaction","","Compaction profile",5,null],[12,"columns","","Set number of columns",5,null],[12,"wal","","Should we keep WAL enabled?",5,null],[3,"CompactionProfile","","Compaction profile for the database settings",null,null],[12,"initial_file_size","","L0-L1 target file size",6,null],[12,"file_size_multiplier","","L2-LN target file size multiplier",6,null],[12,"write_rate_limit","","rate limiter for background flushes and compactions, bytes/sec, if any",6,null],[3,"MemoryDatabase","","",null,null],[3,"SharedMemoryDatabase","","",null,null],[3,"OverlayDatabase","","",null,null],[3,"AutoFlushingOverlayDatabase","","",null,null],[3,"RawTransaction","","",null,null],[12,"operations","","",7,null],[3,"Transaction","","",null,null],[12,"operations","","",8,null],[3,"RawKeyValue","","",null,null],[12,"location","","",9,null],[12,"key","","",9,null],[12,"value","","",9,null],[3,"RawKey","","",null,null],[12,"location","","",10,null],[12,"key","","",10,null],[4,"RawOperation","","",null,null],[13,"Insert","","",11,null],[13,"Delete","","",11,null],[4,"Operation","","",null,null],[13,"Insert","","",12,null],[13,"Delete","","",12,null],[4,"Location","","",null,null],[13,"DB","","",13,null],[13,"Column","","",13,null],[4,"KeyState","","",null,null],[13,"Insert","","",14,null],[13,"Delete","","",14,null],[13,"Unknown","","",14,null],[4,"Key","","",null,null],[13,"Meta","","",15,null],[13,"BlockHash","","",15,null],[13,"BlockHeader","","",15,null],[13,"BlockTransactions","","",15,null],[13,"Transaction","","",15,null],[13,"TransactionMeta","","",15,null],[13,"BlockNumber","","",15,null],[4,"Value","","",null,null],[13,"Meta","","",16,null],[13,"BlockHash","","",16,null],[13,"BlockHeader","","",16,null],[13,"BlockTransactions","","",16,null],[13,"Transaction","","",16,null],[13,"TransactionMeta","","",16,null],[13,"BlockNumber","","",16,null],[4,"KeyValue","","",null,null],[13,"Meta","","",17,null],[13,"BlockHash","","",17,null],[13,"BlockHeader","","",17,null],[13,"BlockTransactions","","",17,null],[13,"Transaction","","",17,null],[13,"TransactionMeta","","",17,null],[13,"BlockNumber","","",17,null],[11,"new","","",18,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"write","","",18,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",18,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"compactionprofile"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"compactionprofile"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"compactionprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Default profile suitable for most storage",6,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"ssd","","Default profile suitable for SSD storage",6,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"hdd","","Slow HDD compaction profile",6,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"databaseconfig"}}],[11,"with_columns","","Create new `DatabaseConfig` with default parameters and specified set of columns. Note that cache sizes must be explicitly set.",5,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"set_cache","","Set the column cache size in MiB.",5,{"inputs":[{"name":"self"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"default","","",5,{"inputs":[],"output":{"name":"databaseconfig"}}],[11,"write","","",19,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",19,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"open_default","","Open database with default settings.",19,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"open","","Open database file. Creates if it does not exist.",19,{"inputs":[{"name":"databaseconfig"},{"name":"p"}],"output":{"name":"result"}}],[11,"write","","Commit transaction to database.",19,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[11,"get","","Get value by key.",19,{"inputs":[{"name":"self"},{"name":"rawkey"}],"output":{"name":"result"}}],[11,"close","","Close the database",19,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"databaseiterator"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"memorydatabase"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drain_transaction","","",20,{"inputs":[{"name":"self"}],"output":{"name":"transaction"}}],[11,"write","","",20,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",20,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"write","","",21,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",21,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",22,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",22,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"new","","",23,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"write","","",23,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"get","","",23,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"for_key","","",16,null],[11,"as_meta","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_block_hash","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_block_header","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_block_transactions","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_transaction","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_transaction_meta","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_block_number","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"map","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"keystate"}}],[11,"into_option","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_operation","","",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"i"},{"name":"d"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",8,{"inputs":[{"name":"self"},{"name":"keyvalue"}],"output":null}],[11,"delete","","",8,{"inputs":[{"name":"self"},{"name":"key"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"from","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"location"}}],[11,"from","","",9,{"inputs":[{"name":"keyvalue"}],"output":{"name":"self"}}],[11,"new","","",10,{"inputs":[{"name":"location"},{"name":"b"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"operation"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"rawtransaction"}}],[11,"insert_raw","","",7,null],[11,"delete_raw","","",7,null],[17,"COL_COUNT","","",null,null],[17,"COL_META","","",null,null],[17,"COL_BLOCK_HASHES","","",null,null],[17,"COL_BLOCK_HEADERS","","",null,null],[17,"COL_BLOCK_TRANSACTIONS","","",null,null],[17,"COL_TRANSACTIONS","","",null,null],[17,"COL_TRANSACTIONS_META","","",null,null],[17,"COL_BLOCK_NUMBERS","","",null,null],[8,"KeyValueDatabase","","",null,null],[10,"write","","",24,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[10,"get","","",24,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"clone","db","",0,{"inputs":[{"name":"self"}],"output":{"name":"bestblock"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bestblock"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bestblock"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bestblock"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"blockref"},{"name":"blockheaderprovider"}],"output":{"name":"self"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"store","","",26,{"inputs":[{"name":"self"}],"output":{"name":"store"}}],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"open_at_path","","",27,{"inputs":[{"name":"p"},{"name":"usize"}],"output":{"name":"result"}}],[11,"init_test_chain","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"open_with_cache","","",27,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"open","","",27,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"best_block","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bestblock"}}],[11,"fork","","",27,{"inputs":[{"name":"self"},{"name":"sidechainorigin"}],"output":{"name":"result"}}],[11,"switch_to_fork","","",27,{"inputs":[{"name":"self"},{"name":"forkchaindatabase"}],"output":{"name":"result"}}],[11,"block_origin","","",27,{"inputs":[{"name":"self"},{"name":"indexedblockheader"}],"output":{"name":"result"}}],[11,"insert","","",27,{"inputs":[{"name":"self"},{"name":"indexedblock"}],"output":{"name":"result"}}],[11,"canonize","","Marks block as a new best block. Block must be already inserted into db, and it's parent must be current best block. Updates meta data.",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"result"}}],[11,"decanonize","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"block_header_bytes","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"block_header","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"block_number","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_hash","","",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"block","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"contains_block","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"bool"}}],[11,"block_transaction_hashes","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[11,"block_transactions","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[11,"indexed_block_header","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"indexed_block","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"indexed_block_transactions","","",27,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[11,"transaction_meta","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction_bytes","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction_output","","",27,{"inputs":[{"name":"self"},{"name":"outpoint"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_spent","","",27,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[11,"insert","","",27,{"inputs":[{"name":"self"},{"name":"indexedblock"}],"output":{"name":"result"}}],[11,"canonize","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"result"}}],[11,"decanonize","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"block_origin","","",27,{"inputs":[{"name":"self"},{"name":"indexedblockheader"}],"output":{"name":"result"}}],[11,"fork","","",27,{"inputs":[{"name":"self"},{"name":"sidechainorigin"}],"output":{"name":"result"}}],[11,"switch_to_fork","","",27,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"result"}}],[11,"as_store","","",27,{"inputs":[{"name":"self"}],"output":{"name":"store"}}],[11,"best_block","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bestblock"}}],[11,"best_header","","get best header",27,{"inputs":[{"name":"self"}],"output":{"name":"blockheader"}}],[11,"difficulty","","get blockchain difficulty",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"new","","",28,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"blockheaderprovider"}],"output":{"name":"self"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sidechainorigin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"blockref"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"transactionmeta"}}],[11,"serialize","","",29,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",29,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"new","","New transaction description for indexing",29,{"inputs":[{"name":"u32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_coinbase","","New coinbase transaction",29,{"inputs":[{"name":"u32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_coinbase","","Returns true if it is a coinbase transaction",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"denote_used","","Denote particular output as used",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"denote_unused","","Denote particular output as not used",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"height","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_spent","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_fully_spent","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"SharedStore","","",null,null],[8,"BlockChain","","",null,null],[10,"insert","","Inserts new block into blockchain",30,{"inputs":[{"name":"self"},{"name":"indexedblock"}],"output":{"name":"result"}}],[10,"canonize","","Canonizes block with given hash",30,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"result"}}],[10,"decanonize","","Decanonizes best block",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"block_origin","","Checks block origin",30,{"inputs":[{"name":"self"},{"name":"indexedblockheader"}],"output":{"name":"result"}}],[8,"ForkChain","","",null,null],[10,"store","","Returns forks underlaying store.",31,{"inputs":[{"name":"self"}],"output":{"name":"store"}}],[10,"flush","","Flush fork changes to canon chain. Should not be used directly from outside of `BlockChain`.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Forkable","","",null,null],[10,"fork","","Forks current blockchain. Lifetime guarantees fork relationship with canon chain.",32,{"inputs":[{"name":"self"},{"name":"sidechainorigin"}],"output":{"name":"result"}}],[10,"switch_to_fork","","Switches blockchain to given fork. Lifetime guarantees that fork comes from this canon chain.",32,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"result"}}],[8,"BlockHeaderProvider","","",null,null],[10,"block_header_bytes","","resolves header bytes by block reference (number/hash)",33,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[10,"block_header","","resolves header bytes by block reference (number/hash)",33,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[8,"BlockProvider","","",null,null],[10,"block_number","","resolves number by block hash",34,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_hash","","resolves hash by block number",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"block","","resolves deserialized block body by block reference (number/hash)",34,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[11,"contains_block","","returns true if store contains given block",34,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"bool"}}],[10,"block_transaction_hashes","","resolves list of block transactions by block reference (number/hash)",34,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[10,"block_transactions","","returns all transactions in the block by block reference (number/hash)",34,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[8,"IndexedBlockProvider","","",null,null],[10,"indexed_block_header","","",35,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[10,"indexed_block","","",35,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"option"}}],[10,"indexed_block_transactions","","",35,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"vec"}}],[8,"AsSubstore","","Allows casting Arc<Store> to reference to any substore type",null,null],[10,"as_block_provider","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockprovider"}}],[10,"as_block_header_provider","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockheaderprovider"}}],[10,"as_transaction_provider","","",36,{"inputs":[{"name":"self"}],"output":{"name":"transactionprovider"}}],[10,"as_transaction_output_provider","","",36,{"inputs":[{"name":"self"}],"output":{"name":"transactionoutputprovider"}}],[10,"as_transaction_meta_provider","","",36,{"inputs":[{"name":"self"}],"output":{"name":"transactionmetaprovider"}}],[8,"Store","","Blockchain storage interface",null,null],[10,"best_block","","get best block",37,{"inputs":[{"name":"self"}],"output":{"name":"bestblock"}}],[10,"best_header","","get best header",37,{"inputs":[{"name":"self"}],"output":{"name":"blockheader"}}],[10,"difficulty","","get blockchain difficulty",37,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[8,"CanonStore","","",null,null],[10,"as_store","","",38,{"inputs":[{"name":"self"}],"output":{"name":"store"}}],[8,"TransactionProvider","","Should be used to obtain all transactions from canon chain and forks.",null,null],[11,"contains_transaction","","Returns true if store contains given transaction.",39,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"transaction_bytes","","Resolves transaction body bytes by transaction hash.",39,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[10,"transaction","","Resolves serialized transaction info by transaction hash.",39,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[8,"TransactionOutputProvider","","Should be used to get canon chain transaction outputs.",null,null],[10,"transaction_output","","Returns transaction output.",40,{"inputs":[{"name":"self"},{"name":"outpoint"},{"name":"usize"}],"output":{"name":"option"}}],[10,"is_spent","","Returns true if we know that output is double spent.",40,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[8,"TransactionMetaProvider","","Transaction meta provider stores transaction meta information",null,null],[10,"transaction_meta","","Returns None if transactin with given hash does not exist Otherwise returns transaction meta object",41,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"take","db::hash","",42,null],[11,"reversed","","",42,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",42,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","db::bytes","",43,null],[11,"hash","db::hash","",42,null],[11,"hash","","",44,null],[11,"hash","","",45,null],[11,"hash","","",46,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[11,"hash","","",49,null],[11,"hash","","",50,null],[11,"deref","db::bytes","",43,null],[11,"deref","","",51,null],[11,"deref","db::hash","",42,null],[11,"deref","","",44,null],[11,"deref","","",45,null],[11,"deref","","",46,null],[11,"deref","","",47,null],[11,"deref","","",48,null],[11,"deref","","",49,null],[11,"deref","","",50,null],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","db::bytes","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","db::hash","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","db::bytes","",43,null],[11,"flush","","",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","db::hash","",42,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","db::bytes","",43,null],[11,"deref_mut","","",51,null],[11,"deref_mut","db::hash","",42,null],[11,"deref_mut","","",44,null],[11,"deref_mut","","",45,null],[11,"deref_mut","","",46,null],[11,"deref_mut","","",47,null],[11,"deref_mut","","",48,null],[11,"deref_mut","","",49,null],[11,"deref_mut","","",50,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","db::bytes","",43,null],[11,"as_mut","","",51,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","db::hash","",42,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","db::bytes","",43,null],[11,"as_ref","","",51,null],[11,"as_ref","db::hash","",42,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","db::bytes","",43,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","db::hash","",42,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",44,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",46,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",47,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",50,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","db::bytes","",43,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","db::hash","",42,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","db::bytes","",43,null],[11,"from","","",43,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","db::hash","",42,null],[11,"from","","",42,null],[11,"from","","",42,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",42,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",44,null],[11,"from","","",44,null],[11,"from","","",44,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",44,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",45,null],[11,"from","","",45,null],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",45,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",46,null],[11,"from","","",46,null],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",46,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",47,null],[11,"from","","",47,null],[11,"from","","",47,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",47,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",48,null],[11,"from","","",48,null],[11,"from","","",48,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",48,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",49,null],[11,"from","","",49,null],[11,"from","","",49,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",49,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",50,null],[11,"from","","",50,null],[11,"from","","",50,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",50,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","db::bytes","",43,null],[11,"serialized_size","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","db::hash","",42,null],[11,"serialized_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",44,null],[11,"serialized_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",45,null],[11,"serialized_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",46,null],[11,"serialized_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",47,null],[11,"serialized_size","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",48,null],[11,"serialized_size","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",49,null],[11,"serialized_size","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",50,null],[11,"serialized_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","db::bytes","",43,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","db::hash","",42,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",50,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"take","","",44,null],[11,"reversed","","",44,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",44,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",45,null],[11,"reversed","","",45,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",45,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",46,null],[11,"reversed","","",46,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",46,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",47,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",47,null],[11,"reversed","","",47,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",47,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",48,null],[11,"reversed","","",48,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",48,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",49,null],[11,"reversed","","",49,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",49,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",50,null],[11,"reversed","","",50,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",50,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","db::bytes","",43,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",51,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"contains_block","db","returns true if store contains given block",34,{"inputs":[{"name":"self"},{"name":"blockref"}],"output":{"name":"bool"}}],[11,"contains_transaction","","Returns true if store contains given transaction.",39,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}]],"paths":[[3,"BestBlock"],[3,"SideChainOrigin"],[4,"BlockOrigin"],[4,"BlockRef"],[4,"Error"],[3,"DatabaseConfig"],[3,"CompactionProfile"],[3,"RawTransaction"],[3,"Transaction"],[3,"RawKeyValue"],[3,"RawKey"],[4,"RawOperation"],[4,"Operation"],[4,"Location"],[4,"KeyState"],[4,"Key"],[4,"Value"],[4,"KeyValue"],[3,"CacheDatabase"],[3,"DiskDatabase"],[3,"MemoryDatabase"],[3,"SharedMemoryDatabase"],[3,"OverlayDatabase"],[3,"AutoFlushingOverlayDatabase"],[8,"KeyValueDatabase"],[3,"BlockAncestors"],[3,"ForkChainDatabase"],[3,"BlockChainDatabase"],[3,"BlockIterator"],[3,"TransactionMeta"],[8,"BlockChain"],[8,"ForkChain"],[8,"Forkable"],[8,"BlockHeaderProvider"],[8,"BlockProvider"],[8,"IndexedBlockProvider"],[8,"AsSubstore"],[8,"Store"],[8,"CanonStore"],[8,"TransactionProvider"],[8,"TransactionOutputProvider"],[8,"TransactionMetaProvider"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",1,{"inputs":[{"name":"self"}],"output":{"name":"stolen"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["domain"] = {"doc":"A DNS library for Rust.","items":[[0,"bits","domain","DNS data.",null,null],[3,"DNameBuf","domain::bits","An owned complete domain name.",null,null],[3,"DNameSlice","","A slice of a domain name.",null,null],[3,"ParsedDName","","A domain name parsed from a DNS message.",null,null],[0,"charstr","","Character strings.",null,null],[3,"CharStr","domain::bits::charstr","A slice of a DNS character string.",null,null],[3,"CharStrBuf","","An owned, mutable DNS character string.",null,null],[3,"PushError","","An error happened while adding data to a [`CharStrBuf`].",null,null],[4,"FromStrError","","An error happened when converting a Rust string to a DNS character string.",null,null],[13,"UnexpectedEnd","","The string ended when there should have been more characters.",0,null],[13,"LongString","","A character string has more than 255 octets.",0,null],[13,"IllegalEscape","","An illegal escape sequence was encountered.",0,null],[13,"IllegalCharacter","","An illegal character was encountered.",0,null],[11,"from_bytes","","Creates a new character string from the bytes slice.",1,null],[11,"as_bytes","","Returns a reference to the character string’s data.",1,null],[11,"to_owned","","Returns an owned version of the character string.",1,{"inputs":[{"name":"self"}],"output":{"name":"charstrbuf"}}],[11,"len","","Returns the length of the character string’s data in bytes.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the character string’s data is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","Parses a character string.",1,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"compose","","Composes a character string.",1,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"borrow","","",1,null],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_ref","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"charstrbuf"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"charstrbuf"}}],[11,"from_vec","","Creates a new character string using the given vec.",2,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"new","","Creates a new empty character string.",2,{"inputs":[],"output":{"name":"self"}}],[11,"scan","","Scans a new character string from master data.",2,{"inputs":[{"name":"s"}],"output":{"name":"scanresult"}}],[11,"into_vec","","Trades the character string for its raw bytes vector.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push","","Appends an octet to the end of the character string.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"extend_from_slice","","Extends the character string with the contents of a bytes slice.",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"extend_from_str","","Extends the character string with the contents of a Rust string.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"charstr"}],"output":{"name":"self"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"borrow","","",2,null],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"as_ref","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"pusherror"}],"output":{"name":"fromstrerror"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"pusherror"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"compose","domain::bits","Assembling wire-format DNS data.",null,null],[3,"Composer","domain::bits::compose","A type for assembling a wire-format DNS message.",null,null],[3,"ComposeSnapshot","","A snapshot of a composer’s state.",null,null],[4,"ComposeMode","","An enum determining the construction mode of a composition.",null,null],[13,"Unlimited","","The composition can grow to any size.",4,null],[13,"Limited","","The composition can never exceed a size of the given value.",4,null],[13,"Stream","","The composition is for a stream transport.",4,null],[4,"ComposeError","","An error happening when composing wire-format DNS data.",null,null],[13,"SizeExceeded","","The maximum size of the message has been exceeded.",5,null],[13,"Overflow","","An internal counter has overflown.",5,null],[13,"LongName","","A domain name is too long.",5,null],[13,"RelativeName","","A domain name was relative.",5,null],[13,"ParseError","","A `ParseError` has happened while preparing data for composing.",5,null],[6,"ComposeResult","","The result type for a `ComposeError`.",null,null],[8,"Composable","","A trait allowing types to compose themselves.",null,null],[10,"compose","","Append the wire-format representation of `self` to a composer.",6,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"composer"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new composer.",7,{"inputs":[{"name":"composemode"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_vec","","Creates a new compose buffer based on an exisiting vector.",7,{"inputs":[{"name":"vec"},{"name":"composemode"},{"name":"bool"}],"output":{"name":"self"}}],[11,"finish","","Finalizes the composition and returns the final data.",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"snapshot","","Returns a snapshot of the composer at its current position.",7,{"inputs":[{"name":"self"}],"output":{"name":"composesnapshot"}}],[11,"preview","","Returns a reference to the underlying vector as it looks now.",7,null],[11,"so_far","","Returns the message bytes as far as they are assembled yet.",7,null],[11,"so_far_mut","","Returns the message bytes as far as they are assembled yet.",7,null],[11,"pos","","Returns the current position.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start","","Returns the position where the message starts.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"delta","","Returns the length of data added since the given position.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"mark_checkpoint","","Marks the current position as a point for truncation.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"is_truncated","","Returns whether the target has been truncated.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"compose_bytes","","Pushes a bytes slice to the end of the message.",7,null],[11,"compose_empty","","Pushes placeholder bytes to the end of the message.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"composeresult"}}],[11,"compose_u8","","Pushes a single octet to the end of the message.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"composeresult"}}],[11,"compose_u16","","Pushes an unsigned 16-bit word to the end of the message.",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"compose_u32","","Pushes a unsigned 32-bit word to the end of the message.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"composeresult"}}],[11,"compose_dname","","Pushes a domain name to the end of the message.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"composeresult"}}],[11,"compose_dname_compressed","","Pushes a domain name to the end of the message using name compression.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"composeresult"}}],[11,"update_bytes","","Updates the bytes starting at the given position.",7,null],[11,"update_u8","","Updates the octet at the given position.",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update_u16","","Updates an unsigned 16-bit word starting at the given position.",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u16"}],"output":null}],[11,"update_u32","","Updates an unsigned 32-bit word starting at the given position.",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u32"}],"output":null}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"composesnapshot"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new snapshot from the given composer.",8,{"inputs":[{"name":"composer"}],"output":{"name":"self"}}],[11,"rewind","","Rewinds the state to when the snapshot was taken.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"rollback","","Rolls back to a composer with state as when the snapshot was taken.",8,{"inputs":[{"name":"self"}],"output":{"name":"composer"}}],[11,"commit","","Trades in the snapshot to a composer with all changes commited.",8,{"inputs":[{"name":"self"}],"output":{"name":"composer"}}],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"composer"}}],[11,"as_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"composer"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"composemode"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"composeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"composeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"composeerror"}],"output":{"name":"bool"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"parseerror"}],"output":{"name":"composeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","domain::bits","The header of a DNS message.",null,null],[3,"Header","domain::bits::header","The first part of the header of a DNS message.",null,null],[3,"HeaderCounts","","The section count part of the header section of a DNS message.",null,null],[3,"HeaderSection","","The complete header section of a DNS message.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"header"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"new","","Creates a new header.",9,{"inputs":[],"output":{"name":"header"}}],[11,"from_message","","Creates a header reference from a bytes slice of a message.",9,null],[11,"from_message_mut","","Creates a mutable header reference from a bytes slice of a message.",9,null],[11,"as_bytes","","Returns a reference to the underlying bytes slice.",9,null],[11,"id","","Returns the value of the ID field.",9,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_id","","Sets the value of the ID field.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_random_id","","Sets the value of the ID field to a randomly chosen number.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"qr","","Returns whether the QR bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_qr","","Sets the value of the QR bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"opcode","","Returns the value of the Opcode field.",9,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"set_opcode","","Sets the value of the opcode field.",9,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":null}],[11,"aa","","Returns whether the AA bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_aa","","Sets the value of the AA bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"tc","","Returns whether the TC bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tc","","Sets the value of the TC bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"rd","","Returns whether the RD bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rd","","Sets the value of the RD bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ra","","Returns whether the RA bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ra","","Sets the value of the RA bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"z","","Returns whether the reserved bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_z","","Sets the value of the reserved bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ad","","Returns whether the AD bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ad","","Sets the value of the AD bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"cd","","Returns whether the CD bit is set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cd","","Sets the value of the CD bit.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"rcode","","Returns the value of the RCODE field.",9,{"inputs":[{"name":"self"}],"output":{"name":"rcode"}}],[11,"set_rcode","","Sets the value of the RCODE field.",9,{"inputs":[{"name":"self"},{"name":"rcode"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"headercounts"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"headercounts"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"headercounts"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"headercounts"}],"output":{"name":"bool"}}],[11,"new","","Creates a new value with all counters set to zero.",10,{"inputs":[],"output":{"name":"headercounts"}}],[11,"from_message","","Creates a reference from the bytes slice of a message (!).",10,null],[11,"from_message_mut","","Creates a mutable reference from the bytes slice of a message.",10,null],[11,"as_bytes","","Returns a reference to the underlying bytes slice.",10,null],[11,"qdcount","","Returns the value of the QDCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_qdcount","","Sets the value of the QDCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_qdcount","","Increase the value of the QDCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"ancount","","Returns the value of the ANCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_ancount","","Sets the value of the ANCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_ancount","","Increases the value of the ANCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"nscount","","Returns the value of the NSCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_nscount","","Sets the value of the NSCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_nscount","","Increases the value of the NSCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"arcount","","Returns the value of the ARCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_arcount","","Sets the value of the ARCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_arcount","","Increases the value of the ARCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"zocount","","Returns the value of the ZOCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_zocount","","Sets the value of the ZOCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_zocount","","Increments the value of the ZOCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"prcount","","Returns the value of the PRCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_prcount","","Sete the value of the PRCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_prcount","","Increments the value of the PRCOUNT field,",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"upcount","","Returns the value of the UPCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_upcount","","Sets the value of the UPCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_upcount","","Increments the value of the UPCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"adcount","","Returns the value of the ADCOUNT field.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_adcount","","Sets the value of the ADCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"inc_adcount","","Increments the value of the ADCOUNT field.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"composeresult"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"headersection"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"headersection"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"headersection"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"headersection"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty header section.",11,{"inputs":[],"output":{"name":"headersection"}}],[11,"from_message","","Creates a reference from the bytes slice of a message.",11,null],[11,"from_message_mut","","Creates a mutable reference from the bytes slice of a message.",11,null],[11,"as_bytes","","Returns a reference to the underlying bytes slice.",11,null],[11,"header","","Returns a reference to the header.",11,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the header.",11,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"counts","","Returns a reference to the header counts.",11,{"inputs":[{"name":"self"}],"output":{"name":"headercounts"}}],[11,"counts_mut","","Returns a mutable reference to the header counts.",11,{"inputs":[{"name":"self"}],"output":{"name":"headercounts"}}],[0,"message","domain::bits","Accessing exisiting DNS messages.",null,null],[3,"Message","domain::bits::message","A slice of a DNS message.",null,null],[3,"MessageBuf","","An owned DNS message.",null,null],[3,"QuestionSection","","An iterator over the question section of a DNS message.",null,null],[3,"RecordSection","","An iterator over one of the three record sections of a DNS message.",null,null],[3,"RecordIter","","An iterator over specific records of a record section of a DNS message.",null,null],[11,"from_bytes","","Creates a message from a bytes slice.",12,null],[11,"from_bytes_unsafe","","Creates a message from a bytes slice without further checks.",12,null],[11,"to_owned","","Returns an owned copy of this message.",12,{"inputs":[{"name":"self"}],"output":{"name":"messagebuf"}}],[11,"as_bytes","","Returns a reference to the underlying bytes slice.",12,null],[11,"header","","Returns a reference to the message header.",12,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the message header.",12,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"counts","","Returns a reference to the header counts of the message.",12,{"inputs":[{"name":"self"}],"output":{"name":"headercounts"}}],[11,"no_error","","Returns whether the rcode is NoError.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","Returns whether the rcode is one of the error values.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"question","","Returns the question section.",12,{"inputs":[{"name":"self"}],"output":{"name":"questionsection"}}],[11,"zone","","Returns the zone section of an UPDATE message.",12,{"inputs":[{"name":"self"}],"output":{"name":"questionsection"}}],[11,"answer","","Returns the answer section.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"prerequisite","","Returns the prerequisite section of an UPDATE message.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"authority","","Returns the authority section.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"update","","Returns the update section of an UPDATE message.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"additional","","Returns the additional section.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"sections","","Returns all four sections in one fell swoop.",12,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"is_answer","","Returns whether this is the answer to some other message.",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bool"}}],[11,"first_question","","Returns the first question, if there is any.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"qtype","","Returns the query type of the first question, if any.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains_answer","","Returns whether the message contains answers of a given type.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonical_name","","Resolves the canonical name of the answer.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",12,null],[11,"borrow","","",12,null],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"as_ref","","",12,null],[11,"to_owned","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagebuf"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vec","","Creates a new owned message using the given vector.",13,{"inputs":[{"name":"vec"}],"output":{"name":"parseresult"}}],[11,"from_bytes","","Creates a new owned message cloning the data from the bytes slice.",13,null],[11,"as_slice","","Returns a reference to the message slice.",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"borrow","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"questionsection"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"answer","","Proceeds to the answer section.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"next_section","","Proceeds to the answer section.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"recordsection"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limit_to","","Trades `self` in for an iterator limited to a concrete record type.",15,{"inputs":[{"name":"self"}],"output":{"name":"recorditer"}}],[11,"next_section","","Returns the next section if there is one.",15,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"recorditer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Trades in the limited iterator for the complete iterator.",16,{"inputs":[{"name":"self"}],"output":{"name":"recordsection"}}],[11,"next_section","","Returns the next section if there is one.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"message_builder","domain::bits","Building a new message.",null,null],[3,"MessageBuilder","domain::bits::message_builder","A type for building the question section of a DNS message.",null,null],[3,"AnswerBuilder","","A type for building the answer section of a DNS message.",null,null],[3,"AuthorityBuilder","","A type for building the authority section of a DNS message.",null,null],[3,"AdditionalBuilder","","A type for building the additional section of a DNS message.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagebuilder"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty DNS message.",17,{"inputs":[{"name":"composemode"},{"name":"bool"}],"output":{"name":"composeresult"}}],[11,"from_vec","","Creates a new DNS message appended to the content of a bytes vector.",17,{"inputs":[{"name":"vec"},{"name":"composemode"},{"name":"bool"}],"output":{"name":"composeresult"}}],[11,"from_composer","","Creates a new DNS message atop an existing composer.",17,{"inputs":[{"name":"composer"}],"output":{"name":"composeresult"}}],[11,"header","","Returns a reference to the message’s header.",17,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the message’s header.",17,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"push","","Appends a new question to the message.",17,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"composeresult"}}],[11,"rewind","","Rewinds to the beginning of the question section.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"answer","","Proceeds to building the answer section.",17,{"inputs":[{"name":"self"}],"output":{"name":"answerbuilder"}}],[11,"authority","","Proceeds to building the authority section, skipping the answer.",17,{"inputs":[{"name":"self"}],"output":{"name":"authoritybuilder"}}],[11,"additional","","Proceeds to building the additonal section.",17,{"inputs":[{"name":"self"}],"output":{"name":"additionalbuilder"}}],[11,"preview","","Returns a reference to the message assembled so far.",17,null],[11,"finish","","Finishes the message and returns the underlying target.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"answerbuilder"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header","","Returns a reference to the messages header.",18,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the messages header.",18,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"push","","Appends a new resource record to the answer section.",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"composeresult"}}],[11,"rewind","","Rewinds to the beginning of the answer section.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"authority","","Proceeds to building the authority section.",18,{"inputs":[{"name":"self"}],"output":{"name":"authoritybuilder"}}],[11,"additional","","Proceeds to building the additional section, skipping authority.",18,{"inputs":[{"name":"self"}],"output":{"name":"additionalbuilder"}}],[11,"preview","","Returns a reference to the message assembled so far.",18,null],[11,"finish","","Finishes the message.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"authoritybuilder"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header","","Returns a reference to the messages header.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the messages header.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"push","","Appends a new resource record to the authority section.",19,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"composeresult"}}],[11,"rewind","","Rewinds to the beginning of the authority section.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"additional","","Proceeds to building the additional section.",19,{"inputs":[{"name":"self"}],"output":{"name":"additionalbuilder"}}],[11,"preview","","Returns a reference to the message assembled so far.",19,null],[11,"finish","","Finishes the message.",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"additionalbuilder"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header","","Returns a reference to the messages header.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_mut","","Returns a mutable reference to the messages header.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"push","","Appends a new resource record to the additional section.",20,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"composeresult"}}],[11,"rewind","","Rewinds to the beginning of the additional section.",20,{"inputs":[{"name":"self"}],"output":null}],[11,"preview","","Returns a reference to the message assembled so far.",20,null],[11,"finish","","Finishes the message.",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[0,"name","domain::bits","Domain names.",null,null],[3,"DNameBuilder","domain::bits::name","Builds an owned domain step by step from bytes.",null,null],[3,"DNameBuildInto","","A type for iteratively pushing a domain name into a bytes vec.",null,null],[3,"NameLabels","","An iterator over the labels in a domain name.",null,null],[3,"NameLabelettes","","An iterator over the labelettes of a domain name.",null,null],[3,"Label","","An uncompressed domain name label.",null,null],[3,"LabelBuf","","An owned domain name label.",null,null],[3,"LabelIter","","An iterator over the labelettes in a label.",null,null],[3,"ParsedDName","","A domain name parsed from a DNS message.",null,null],[3,"DNameBuf","","An owned complete domain name.",null,null],[3,"DNameSlice","","A slice of a domain name.",null,null],[3,"PushError","","An error happened while trying to append content to an owned domain name.",null,null],[3,"StripSuffixError","","An attempt was made to strip a suffix that wasn’t actually a suffix.",null,null],[4,"LabelContent","","The contents of a label.",null,null],[13,"Normal","","A normal label.",21,null],[13,"Binary","","A binary label, also called a bit-string label.",21,null],[4,"Labelette","","A labelette is an atomic label.",null,null],[13,"Normal","","A labelette for a normal label.",22,null],[13,"Bit","","A labelette for a single bit-label of a binary label.",22,null],[4,"FromStrError","","",null,null],[13,"UnexpectedEnd","","The string ended when there should have been more characters.",23,null],[13,"EmptyLabel","","An empty label was encountered.",23,null],[13,"LongLabel","","A domain name label has more than 63 octets.",23,null],[13,"IllegalEscape","","An illegal escape sequence was encountered.",23,null],[13,"IllegalCharacter","","An illegal character was encountered.",23,null],[13,"IllegalBinary","","An illegal binary label sequence was encountered.",23,null],[13,"RelativeName","","A relative name was encountered.",23,null],[13,"LongName","","The name has more than 255 characters.",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"dnamebuilder"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new domain name builder.",24,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"push","","Pushes an octet to the end of the builder.",24,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"end_label","","Pushes a label end to the builder.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","Extracts the finished domain name from the builder.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dnamebuildinto"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new domain name builder.",25,{"inputs":[{"name":"v"},{"name":"option"}],"output":{"name":"self"}}],[11,"push","","Appends an octet to the end of the domain name.",25,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"end_label","","Ends a label.",25,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","Finishes building the name and extracts the target.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Creates an iterator for a domain name slice.",26,{"inputs":[{"name":"dnameslice"}],"output":{"name":"self"}}],[11,"from_parsed","","Creates an iterator for a parsed domain name.",26,{"inputs":[{"name":"parseddname"}],"output":{"name":"self"}}],[11,"to_cow","","Returns a cow of the remaining labels in the domain name.",26,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new labelette iterator from a label iterator.",27,{"inputs":[{"name":"namelabels"}],"output":{"name":"self"}}],[11,"to_name","","Creates a domain name with the remaining labelettes.",27,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root","","Returns a reference to the root label.",28,{"inputs":[],"output":{"name":"self"}}],[11,"split_from","","Splits a label from the beginning of a bytes slice.",28,null],[11,"from_bytes","","Returns a label from a bytes slice.",28,null],[11,"len","","Returns the length of the label.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the label is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_root","","Returns whether this label is the root label.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"content","","Returns the label’s content.",28,{"inputs":[{"name":"self"}],"output":{"name":"labelcontent"}}],[11,"as_str","","Returns a string slice if this is a normal label and purely ASCII.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns a bytes slice with the raw content of this label.",28,null],[11,"iter","","Returns an iterator over the labelettes in this label.",28,{"inputs":[{"name":"self"}],"output":{"name":"labeliter"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_owned","","",28,null],[11,"eq","","Tests whether `self` and `other` are equal.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","","",28,null],[11,"hash","","",28,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Creates an owned label from a label slice.",29,{"inputs":[{"name":"label"}],"output":{"name":"self"}}],[11,"root","","Returns an owned root label.",29,{"inputs":[],"output":{"name":"self"}}],[11,"as_slice","","Returns a reference to a slice of the label.",29,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"from","","",29,{"inputs":[{"name":"label"}],"output":{"name":"self"}}],[11,"deref","","",29,null],[11,"borrow","","",29,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"hash","","",29,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"labeliter"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_normal","","Returns whether the label under the iterator is a normal label.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_name","","Returns a domain name with the remaining content of the iterator.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_name","","Pushes a label with the remaining content to an owned domain name.",30,{"inputs":[{"name":"self"},{"name":"dnamebuf"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_root","","Returns whether the labelette is the root label.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","Returns the ordering between `self` and `other`.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",22,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","domain::bits","",31,{"inputs":[{"name":"self"}],"output":{"name":"parseddname"}}],[11,"parse","","Creates a new parsed domain name.",31,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"unpack","","Unpacks the name.",31,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"as_slice","","Returns a slice if the name is uncompressed.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"labels","","Returns an iterator over the labels of the name.",31,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"labelettes","","Returns an iterator over the labelettes of the name.",31,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"split_first","","Splits off the first label from the name.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_cow","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"labels","","",31,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",31,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes_unsafe","","Creates a domain name slice from a bytes slice without checking.",32,null],[11,"from_bytes","","Creates a domain name from a bytes slice if it contains a valid name.",32,null],[11,"root","","Creates a domain name slice for the root domain name.",32,{"inputs":[],"output":{"name":"dnameslice"}}],[11,"empty","","Creates an empty domain name slice.",32,{"inputs":[],"output":{"name":"dnameslice"}}],[11,"as_bytes","","Returns a reference to the underlying bytes slice.",32,null],[11,"to_owned","","Converts the domain name slice to an owned domain name.",32,{"inputs":[{"name":"self"}],"output":{"name":"dnamebuf"}}],[11,"is_absolute","","Checks whether the domain name is absolute.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Checks whether the domain name is relative, ie., not absolute.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"labels","","Produces an iterator over the labels in the name.",32,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"labelettes","","Produces an iterator over the labelettes in the name.",32,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"len","","Returns the number of labels in `self`.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks whether the domain name is empty.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first","","Returns the first label or `None` if the name is empty.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","Returns the last label or `None` if the name is empty.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ndots","","Returns the number of dots if this is a relative name.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","Returns the first label and the remaining domain name.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parent","","Returns the domain name without its leftmost label.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strip_suffix","","Returns a domain name slice relative to `base`.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `base` is a suffix of `self`.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"join","","Creates an owned domain name made absolute if necessary.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_owned","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",32,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dnamebuf"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"dnamebuf"}}],[11,"new","","Creates a new empty domain name.",33,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new empty name with the given amount of space reserved.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dnamebuf"}}],[11,"from_vec","","Creates an owned domain name using an existing bytes vector.",33,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"from_iter","","Creates an owned domain name from the labels of the iterator.",33,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"scan","","Creates an owned domain name by reading it from a scanner.",33,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"root","","Returns a new owned domain name consisting only of the root label.",33,{"inputs":[],"output":{"name":"dnamebuf"}}],[11,"as_slice","","Returns a reference to a slice of the domain name.",33,{"inputs":[{"name":"self"}],"output":{"name":"dnameslice"}}],[11,"into_vec","","Extracts the underlying vector from the name.",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push","","Extends a relative name with a label.",33,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"result"}}],[11,"push_normal","","Pushes a normal label to the end of a relative name.",33,null],[11,"push_binary","","Pushes a binary label to the end of a relative name.",33,null],[11,"push_empty_binary","","Pushes an empty binary label of the given length to the domain name.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"append","","Extends a relative name with a domain name.",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"result"}}],[11,"append_root","","Makes a domain name absolute if it isn’t yet by appending root.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"append_iter","","Appends the content of an iterator to the end of the name.",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"remove_first","","Removes the first label.",33,{"inputs":[{"name":"self"}],"output":null}],[11,"to_cow","","",33,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"labels","","",33,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"from","","",33,{"inputs":[{"name":"dnameslice"}],"output":{"name":"dnamebuf"}}],[11,"from","","",33,{"inputs":[{"name":"label"}],"output":{"name":"dnamebuf"}}],[11,"from_str","","Creates a new domain name from a string.",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",33,null],[11,"borrow","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dnameslice"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dnameslice"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",33,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","domain::bits::name","",23,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pusherror"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"pusherror"}],"output":{"name":"bool"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"stripsuffixerror"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"stripsuffixerror"}],"output":{"name":"bool"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"DName","","A trait implemented by all domain name types.",null,null],[10,"to_cow","","Converts the name into an uncompressed name.",36,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[10,"labels","","Returns an iterator over the labels of the domain name.",36,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"labelettes","","Returns an iterator over the labelettes of the domain name.",36,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"compose","","Appends the name to the end of a composition.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"compose_compressed","","Appends the name to the end of a composition using name compression.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[0,"parse","domain::bits","Parsing of DNS wire-format data.",null,null],[3,"Parser","domain::bits::parse","A type wrapping DNS message data for parsing.",null,null],[4,"ParseError","","An error happening during parsing of wire-format DNS data.",null,null],[13,"UnexpectedEnd","","The raw data ended unexpectedly in the middle of a structure.",37,null],[13,"UnknownLabel","","An unknown label type was encountered in a domain name.",37,null],[13,"FormErr","","A format error was encountered.",37,null],[6,"ParseResult","","The result type for a `ParseError`.",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parser atop a bytes slice.",38,null],[11,"set_limit","","Limits the parser to `len` bytes from its current position.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parseresult"}}],[11,"remove_limit","","Removes any limit from the parser.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"bytes","","Returns a reference to the complete message.",38,null],[11,"pos","","Returns the current parser position.",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"remaining","","Returns the number of bytes left to parse.",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"seek","","Resets the position of the parser.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parseresult"}}],[11,"skip","","Skips over `len` bytes.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parseresult"}}],[11,"parse_bytes","","Parses a bytes slice of the given length.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parseresult"}}],[11,"parse_u8","","",38,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"parse_u16","","",38,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"parse_u32","","",38,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"question","domain::bits","A single question of a DNS message.",null,null],[3,"Question","domain::bits::question","A question in a DNS message.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"ordering"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"new","","Creates a new question from its constituent elements.",39,{"inputs":[{"name":"n"},{"name":"rtype"},{"name":"class"}],"output":{"name":"self"}}],[11,"qname","","Returns the requested domain name.",39,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"qtype","","Returns the requested record type.",39,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"qclass","","Returns the requested class.",39,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"parse","","Parses a question from the beginning of a parser.",39,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"compose","","Appends the question to a composition.",39,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"from","","",39,null],[11,"from","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rdata","domain::bits","Basic resource data handling.",null,null],[3,"GenericRecordData","domain::bits::rdata","A type for parsing any type of record data.",null,null],[8,"RecordData","","A trait for types representing record data.",null,null],[10,"rtype","","Returns the record type for this record data instance.",40,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[10,"compose","","Appends the record data to the end of a composer.",40,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[8,"ParsedRecordData","","A trait for types that allow parsing record data from a message.",null,null],[10,"parse","","Parses the record data out of a parser.",41,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"genericrecorddata"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rtype","","",42,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",42,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",42,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"record","domain::bits","Resource Records",null,null],[3,"Record","domain::bits::record","A DNS resource record.",null,null],[6,"GenericRecord","","A record with generic record data.",null,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"record"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new record from its parts.",43,{"inputs":[{"name":"n"},{"name":"class"},{"name":"u32"},{"name":"d"}],"output":{"name":"self"}}],[11,"name","","Returns a reference to the domain name.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","Returns the record type.",43,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"class","","Returns the record class.",43,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"set_class","","Sets the record’s class.",43,{"inputs":[{"name":"self"},{"name":"class"}],"output":null}],[11,"ttl","","Returns the record’s time-to-live.",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_ttl","","Sets the record’s time-to-live.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"data","","Return a reference to the record data.",43,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"data_mut","","Returns a mutable reference to the record data.",43,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"into_data","","Trades the record for its record data.",43,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"parse","","Parses a record from a parser.",43,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"parse_generic","","Parses a record with generic data from a parser.",43,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"compose","","Appends the record’s wire-format representation to a composer.",43,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"from","","",43,null],[11,"from","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"DName","domain::bits","A trait implemented by all domain name types.",null,null],[10,"to_cow","","Converts the name into an uncompressed name.",36,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[10,"labels","","Returns an iterator over the labels of the domain name.",36,{"inputs":[{"name":"self"}],"output":{"name":"namelabels"}}],[11,"labelettes","domain::bits::name","Returns an iterator over the labelettes of the domain name.",36,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"compose","","Appends the name to the end of a composition.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"compose_compressed","","Appends the name to the end of a composition using name compression.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[0,"iana","domain","IANA Definitions for DNS.",null,null],[0,"class","domain::iana","DNS CLASSes.",null,null],[3,"FromStrError","domain::iana::class","",null,null],[4,"Class","","DNS CLASSes.",null,null],[13,"In","","Internet (IN).",44,null],[13,"Ch","","Chaosnet (CH).",44,null],[13,"Hs","","Hesiod (HS).",44,null],[13,"None","","Query class None.",44,null],[13,"Any","","Query class * (ANY).",44,null],[13,"Int","","A raw value given through its integer.",44,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Returns a value from its raw integer value.",44,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"to_int","","Returns the raw integer value for a value.",44,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_mnemonic","","Returns a value from a well-defined mnemonic.",44,null],[11,"to_mnemonic","","Returns the mnemonic for this value if there is one.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",44,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",44,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from_bytes","","",44,null],[11,"from_str","","",44,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",44,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"compose","","",44,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"scan","","",44,{"inputs":[{"name":"s"}],"output":{"name":"scanresult"}}],[0,"opcode","domain::iana","DNS OpCodes",null,null],[4,"Opcode","domain::iana::opcode","DNS OpCodes.",null,null],[13,"Query","","A standard query.",46,null],[13,"IQuery","","An inverse query (IQUERY) (obsolete).",46,null],[13,"Status","","A server status request.",46,null],[13,"Notify","","A NOTIFY query.",46,null],[13,"Update","","An UPDATE query.",46,null],[13,"Int","","A raw integer opcode value.",46,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Creates an Opcode value from an integer value.",46,{"inputs":[{"name":"u8"}],"output":{"name":"opcode"}}],[11,"to_int","","Returns the integer value for this opcode.",46,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",46,{"inputs":[{"name":"u8"}],"output":{"name":"opcode"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"opt","domain::iana","DNS EDNS0 Option Codes (OPT)",null,null],[4,"OptionCode","domain::iana::opt","DNS EDNS0 Option Codes (OPT)",null,null],[13,"Llq","","",47,null],[13,"Ul","","",47,null],[13,"Nsid","","",47,null],[13,"Dau","","",47,null],[13,"Dhu","","",47,null],[13,"N3u","","",47,null],[13,"EdnsClientSubnet","","",47,null],[13,"EdnsExpire","","",47,null],[13,"Cookie","","",47,null],[13,"EdnsTcpKeepalive","","",47,null],[13,"Padding","","",47,null],[13,"Chain","","",47,null],[13,"Int","","A raw class value given through its integer.",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"optioncode"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Returns the option code for the given raw integer value.",47,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"to_int","","Returns the raw integer value for this option code.",47,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",47,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",47,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"rcode","domain::iana","DNS response codes and extended response codes.",null,null],[4,"Rcode","domain::iana::rcode","DNS Response Codes.",null,null],[13,"NoError","","No error condition.",48,null],[13,"FormErr","","Format error.",48,null],[13,"ServFail","","Server failure.",48,null],[13,"NXDomain","","Name error.",48,null],[13,"NotImp","","Not implemented.",48,null],[13,"Refused","","Query refused.",48,null],[13,"YXDomain","","Name exists when it should not.",48,null],[13,"YXRRSet","","RR set exists when it should not.",48,null],[13,"NXRRSet","","RR set that should exist does not.",48,null],[13,"NotAuth","","Server not authoritative for zone or client not authorized.",48,null],[13,"NotZone","","Name not contained in zone.",48,null],[13,"Int","","A raw, integer rcode value.",48,null],[4,"OptRcode","","Extended DNS Response Codes for OPT records.",null,null],[13,"NoError","","No error condition.",49,null],[13,"FormErr","","Format error.",49,null],[13,"ServFail","","Server failure.",49,null],[13,"NXDomain","","Name error.",49,null],[13,"NotImp","","Not implemented.",49,null],[13,"Refused","","Query refused.",49,null],[13,"YXDomain","","Name exists when it should not.",49,null],[13,"YXRRSet","","RR set exists when it should not.",49,null],[13,"NXRRSet","","RR set that should exist does not.",49,null],[13,"NotAuth","","Server not authoritative for zone or client not authorized.",49,null],[13,"NotZone","","Name not contained in zone.",49,null],[13,"BadVers","","Bad OPT version.",49,null],[13,"BadCookie","","Bad or missing server cookie.",49,null],[13,"Int","","A raw, integer rcode value.",49,null],[4,"TsigRcode","","Response codes for transaction authentication (TSIG).",null,null],[13,"NoError","","No error condition.",50,null],[13,"FormErr","","Format error.",50,null],[13,"ServFail","","Server failure.",50,null],[13,"NXDomain","","Name error.",50,null],[13,"NotImp","","Not implemented.",50,null],[13,"Refused","","Query refused.",50,null],[13,"YXDomain","","Name exists when it should not.",50,null],[13,"YXRRSet","","RR set exists when it should not.",50,null],[13,"NXRRSet","","RR set that should exist does not.",50,null],[13,"NotAuth","","Server not authoritative for zone or client not authorized.",50,null],[13,"NotZone","","Name not contained in zone.",50,null],[13,"BadSig","","TSIG signature failure.",50,null],[13,"BadKey","","Key not recognized.",50,null],[13,"BadTime","","Signature out of time window.",50,null],[13,"BadMode","","Bad TKEY mode.",50,null],[13,"BadName","","Duplicate key name.",50,null],[13,"BadAlg","","Algorithm not supported.",50,null],[13,"BadTrunc","","Bad truncation.",50,null],[13,"BadCookie","","Bad or missing server cookie.",50,null],[13,"Int","","A raw, integer rcode value.",50,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"rcode"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Creates an rcode from an integer.",48,{"inputs":[{"name":"u8"}],"output":{"name":"rcode"}}],[11,"to_int","","Returns the integer value for this rcode.",48,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",48,{"inputs":[{"name":"u8"}],"output":{"name":"rcode"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"rcode"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"rcode"}],"output":{"name":"ordering"}}],[11,"hash","","",48,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"optrcode"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Creates an rcode from an integer.",49,{"inputs":[{"name":"u16"}],"output":{"name":"optrcode"}}],[11,"to_int","","Returns the integer value for this rcode.",49,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_parts","","Creates an extended rcode value from its parts.",49,{"inputs":[{"name":"rcode"},{"name":"u8"}],"output":{"name":"optrcode"}}],[11,"to_parts","","Returns the two parts of an extended rcode value.",49,null],[11,"rcode","","Returns the rcode part of the extended rcode.",49,{"inputs":[{"name":"self"}],"output":{"name":"rcode"}}],[11,"ext","","Returns the extended octet of the extended rcode.",49,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",49,{"inputs":[{"name":"u16"}],"output":{"name":"optrcode"}}],[11,"from","","",49,{"inputs":[{"name":"rcode"}],"output":{"name":"optrcode"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"tsigrcode"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Creates an rcode from an integer.",50,{"inputs":[{"name":"u16"}],"output":{"name":"tsigrcode"}}],[11,"to_int","","Returns the integer value for this rcode.",50,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",50,{"inputs":[{"name":"u16"}],"output":{"name":"tsigrcode"}}],[11,"from","","",50,{"inputs":[{"name":"rcode"}],"output":{"name":"tsigrcode"}}],[11,"from","","",50,{"inputs":[{"name":"optrcode"}],"output":{"name":"tsigrcode"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rtype","domain::iana","Resource Record (RR) TYPEs",null,null],[3,"FromStrError","domain::iana::rtype","",null,null],[4,"Rtype","","Resource Record Types.",null,null],[13,"A","","A host address.",51,null],[13,"Ns","","An authoritative name server.",51,null],[13,"Md","","A mail destination.",51,null],[13,"Mf","","A mail forwarder.",51,null],[13,"Cname","","The canonical name for an alias",51,null],[13,"Soa","","Marks the start of a zone of authority.",51,null],[13,"Mb","","A mailbox domain name.",51,null],[13,"Mg","","A mail group member",51,null],[13,"Mr","","A mail rename domain name.",51,null],[13,"Null","","A null resource record.",51,null],[13,"Wks","","A well known service description.",51,null],[13,"Ptr","","A domain name pointer.",51,null],[13,"Hinfo","","Host information.",51,null],[13,"Minfo","","Mailbox or mail list information.",51,null],[13,"Mx","","Mail exchange.",51,null],[13,"Txt","","Text strings.",51,null],[13,"Rp","","For Responsible Person.",51,null],[13,"Afsdb","","For AFS Data Base location.",51,null],[13,"X25","","For X.25 PSDN address.",51,null],[13,"Isdn","","For ISDN address.",51,null],[13,"Rt","","For Route Through.",51,null],[13,"Nsap","","For SNAP address, NSAP style A record.",51,null],[13,"Nsapptr","","For domain name pointer, NSAP style.",51,null],[13,"Sig","","For security signature.",51,null],[13,"Key","","For security key.",51,null],[13,"Px","","X.400 mail mapping information.",51,null],[13,"Gpos","","Geographical position.",51,null],[13,"Aaaa","","IPv6 address.",51,null],[13,"Loc","","Location information.",51,null],[13,"Nxt","","Next domain.",51,null],[13,"Eid","","Endpoint identifier.",51,null],[13,"Nimloc","","Nimrod locator.",51,null],[13,"Srv","","Server selection.",51,null],[13,"Atma","","ATM address.",51,null],[13,"Naptr","","Naming authority pointer.",51,null],[13,"Kx","","Key exchanger.",51,null],[13,"Cert","","CERT",51,null],[13,"A6","","A6.",51,null],[13,"Dname","","DNAME.",51,null],[13,"Sink","","SINK.",51,null],[13,"Opt","","OPT.",51,null],[13,"Apl","","APL.",51,null],[13,"Ds","","Delegation signer.",51,null],[13,"Sshfp","","SSH key fingerprint.",51,null],[13,"Ipseckey","","IPSECKEY",51,null],[13,"Rrsig","","RRSIG.",51,null],[13,"Nsec","","NSEC.",51,null],[13,"Dnskey","","DNSKEY.",51,null],[13,"Dhcid","","DHCID.",51,null],[13,"Nsec3","","NSEC3",51,null],[13,"Nsec3param","","NSEC3PARAM.",51,null],[13,"Tlsa","","TLSA.",51,null],[13,"Smimea","","S/MIME cert association.",51,null],[13,"Hip","","Host Identity Protocol.",51,null],[13,"Ninfo","","NINFO.",51,null],[13,"Rkey","","RKEY.",51,null],[13,"Talink","","Trust Anchor Link",51,null],[13,"Cds","","Child DS.",51,null],[13,"Cdnskey","","DNSKEY(s) the child wants reflected in DS.",51,null],[13,"Openpgpkey","","OpenPGP key.",51,null],[13,"Csync","","Child-to-parent synchronization.",51,null],[13,"Spf","","SPF.",51,null],[13,"Uinfo","","UINFO.",51,null],[13,"Uid","","UID.",51,null],[13,"Gid","","GID.",51,null],[13,"Unspec","","UNSPEC.",51,null],[13,"Nid","","NID.",51,null],[13,"L32","","L32.",51,null],[13,"L64","","L64.",51,null],[13,"Lp","","LP.",51,null],[13,"Eui48","","An EUI-48 address.",51,null],[13,"Eui64","","An EUI-64 address.",51,null],[13,"Tkey","","Transaction key.",51,null],[13,"Tsig","","Transaction signature.",51,null],[13,"Ixfr","","Incremental transfer.",51,null],[13,"Axfr","","Transfer of entire zone.",51,null],[13,"Mailb","","Mailbox-related RRs (MB, MG, or MR).",51,null],[13,"Maila","","Mail agent RRS.",51,null],[13,"Any","","A request for all records the server/cache has available.",51,null],[13,"Uri","","URI.",51,null],[13,"Caa","","Certification Authority Restriction.",51,null],[13,"Avc","","Application visibility and control.",51,null],[13,"Ta","","DNSSEC trust authorities.",51,null],[13,"Dlv","","DNSSEC lookaside validation.",51,null],[13,"Int","","A raw value given through its integer.",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Returns a value from its raw integer value.",51,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"to_int","","Returns the raw integer value for a value.",51,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_mnemonic","","Returns a value from a well-defined mnemonic.",51,null],[11,"to_mnemonic","","Returns the mnemonic for this value if there is one.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",51,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",51,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from_bytes","","",51,null],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",51,{"inputs":[{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"compose","","",51,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"scan","","",51,{"inputs":[{"name":"s"}],"output":{"name":"scanresult"}}],[0,"secalg","domain::iana","DNSSEC Algorithm Numbers",null,null],[3,"FromStrError","domain::iana::secalg","",null,null],[4,"SecAlg","","See http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml#dns-sec-alg-numbers-1",null,null],[13,"RsaMd5","","RSA/MD5",53,null],[13,"Dh","","Diffie-Hellman",53,null],[13,"Dsa","","DSA/SHA1",53,null],[13,"RsaSha1","","RSA/SHA-1",53,null],[13,"DsaNsec3Sha1","","DSA-NSEC3-SHA1",53,null],[13,"RsaSha1Nsec3Sha1","","RSASHA1-NSEC3-SHA1",53,null],[13,"RsaSha256","","RSA/SHA-256",53,null],[13,"RsaSha512","","RSA/SHA-512",53,null],[13,"EccGost","","GOST R 34.10-2001",53,null],[13,"EcdsaP256Sha256","","ECDSA Curve P-256 with SHA-256",53,null],[13,"EcdsaP384Sha384","","ECDSA Curve P-384 with SHA-384",53,null],[13,"Indirect","","Reserved for Indirect Keys",53,null],[13,"PrivateDns","","A private algorithm identified by a domain name.",53,null],[13,"PrivateOid","","A private algorithm identified by a ISO OID.",53,null],[13,"Int","","A raw algorithm value given through its integer value.",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"secalg"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_int","","Returns the algorithm value for the given integer value.",53,{"inputs":[{"name":"u8"}],"output":{"name":"secalg"}}],[11,"to_int","","Returns the integer value for this algorithm value.",53,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",53,{"inputs":[{"name":"u8"}],"output":{"name":"secalg"}}],[11,"from_str","","Returns the algorithm value for the given string.",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"secalg"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"secalg"}],"output":{"name":"option"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"secalg"}],"output":{"name":"ordering"}}],[11,"hash","","",53,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"master","domain","Reading and writing of master files.",null,null],[0,"bufscanner","domain::master","A scanner atop a buffer atop an `io::Read`.",null,null],[3,"BufScanner","domain::master::bufscanner","A scanner using a buffer atop a reader.",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bufscanner"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new scanner using the given reader.",55,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"with_pos","","Creates a new scanner using the given reader and position.",55,{"inputs":[{"name":"r"},{"name":"pos"}],"output":{"name":"self"}}],[11,"open","","Attempts to opens a file and create a scanner for it.",55,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Wraps `t` into a cursor and creates a scanner with it.",55,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"is_eof","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pos","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pos"}}],[11,"scan_word","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_word_into","","",55,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"},{"name":"g"}],"output":{"name":"scanresult"}}],[11,"scan_quoted","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_quoted_bytes","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_phrase","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_phrase_bytes","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_newline","","",55,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_space","","",55,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_opt_space","","",55,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"skip_entry","","",55,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"entry","domain::master","",null,null],[4,"Entry","domain::master::entry","A master file entry.",null,null],[13,"Origin","","An `$ORIGIN` control entry.",56,null],[13,"Include","","An `$INCLUDE` control entry.",56,null],[12,"path","domain::master::entry::Entry","",56,null],[12,"origin","","",56,null],[13,"Ttl","domain::master::entry","A `$TTL` control entry.",56,null],[13,"Control","","Some other control entry.",56,null],[12,"name","domain::master::entry::Entry","",56,null],[12,"start","","",56,null],[13,"Record","domain::master::entry","A resource record.",56,null],[13,"Blank","","A blank entry.",56,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scan","","Scans an entry from a scanner.",56,{"inputs":[{"name":"s"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"scanresult"}}],[0,"error","domain::master","",null,null],[3,"Pos","domain::master::error","The human-friendly position in a reader.",null,null],[4,"SyntaxError","","A syntax error happened while scanning master data.",null,null],[13,"Expected","","",57,null],[13,"ExpectedNewline","","",57,null],[13,"ExpectedSpace","","",57,null],[13,"IllegalEscape","","",57,null],[13,"IllegalInteger","","",57,null],[13,"IllegalAddr","","",57,null],[13,"IllegalName","","",57,null],[13,"IllegalString","","",57,null],[13,"LongCharStr","","",57,null],[13,"LongLabel","","",57,null],[13,"LongName","","",57,null],[13,"LongGenericData","","",57,null],[13,"NestedParentheses","","",57,null],[13,"NoDefaultTtl","","",57,null],[13,"NoLastClass","","",57,null],[13,"NoLastOwner","","",57,null],[13,"NoOrigin","","",57,null],[13,"RelativeName","","",57,null],[13,"Unexpected","","",57,null],[13,"UnexpectedEof","","",57,null],[13,"UnknownClass","","",57,null],[13,"UnknownProto","","",57,null],[13,"UnknownServ","","",57,null],[4,"ScanError","","An error happened while scanning master data.",null,null],[13,"Io","","",58,null],[13,"Syntax","","",58,null],[6,"SyntaxResult","","A result with a syntax error.",null,null],[6,"ScanResult","","A result with a scan error.",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"syntaxerror"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"syntaxerror"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"syntaxerror"}],"output":{"name":"bool"}}],[11,"from","","",57,{"inputs":[{"name":"parseinterror"}],"output":{"name":"syntaxerror"}}],[11,"from","","",57,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"syntaxerror"}}],[11,"from","","",57,{"inputs":[{"name":"utf8error"}],"output":{"name":"syntaxerror"}}],[11,"from","","",57,{"inputs":[{"name":"fromstrerror"}],"output":{"name":"syntaxerror"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_eof","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",58,{"inputs":[{"name":"error"}],"output":{"name":"scanerror"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"pos"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"pos"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"pos"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"pos"}],"output":{"name":"bool"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"pos"}}],[11,"line","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"update","","",59,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"prev","","",59,{"inputs":[{"name":"self"}],"output":{"name":"pos"}}],[11,"from","","",59,null],[11,"eq","","",59,null],[0,"reader","domain::master","",null,null],[3,"Reader","domain::master::reader","",null,null],[4,"ReaderItem","","",null,null],[13,"Record","","",60,null],[13,"Include","","",60,null],[12,"path","domain::master::reader::ReaderItem","",60,null],[12,"origin","","",60,null],[11,"new","domain::master::reader","",61,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"open","","",61,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","",61,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next_record","","",61,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"readeritem"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"record","domain::master","",null,null],[3,"MasterRecord","domain::master::record","",null,null],[12,"owner","","",62,null],[12,"class","","",62,null],[12,"ttl","","",62,null],[12,"rdata","","",62,null],[5,"map_origin","","",null,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"masterrecord"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",62,{"inputs":[{"name":"rc"},{"name":"class"},{"name":"u32"},{"name":"masterrecorddata"}],"output":{"name":"self"}}],[11,"scan","","",62,{"inputs":[{"name":"s"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"scanner","domain::master","",null,null],[8,"Scanner","domain::master::scanner","A trait for a scanner of master format tokens.",null,null],[10,"is_eof","","Fundamental Methods",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"pos","","Returns the current position of the scanner.",63,{"inputs":[{"name":"self"}],"output":{"name":"pos"}}],[10,"scan_word","","Scans a word token.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_word_bytes","","Scans a word, processing each character of its content separatedly.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[10,"scan_word_into","","",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"},{"name":"g"}],"output":{"name":"scanresult"}}],[10,"scan_quoted","","Scans a quoted word.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[10,"scan_quoted_bytes","","Scans a quoted word, processing the content characters separatedly.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[10,"scan_phrase","","Scans phrase: a normal or quoted word.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_str_phrase","","Scans a phrase and converts it into a string slice.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[10,"scan_phrase_bytes","","Scans a phrase, processing the content characters separatedly.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"scan_phrase_copy","","Scans a phrase and returns a copy of it.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[10,"scan_newline","","Scans a newline.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[10,"scan_space","","Scans a non-empty sequence of space.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[10,"scan_opt_space","","Scans a possibly empty sequence of space.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[10,"skip_entry","","Skips over an entry.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_u16","","Helper Methods",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_u32","","Scans a phrase containing a 32 bit integer in decimal representation.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_hex_word","","Scans a word containing a sequence of pairs of hex digits.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scanresult"}}],[11,"skip_literal","","Skips over the word with the content `literal`.",63,null],[11,"scan_dname","","Scans a domain name and returns an owned domain name.",63,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"scan_dname_into","","Scans a domain name into a bytes vec.",63,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":{"name":"scanresult"}}],[11,"scan_charstr","","Scans a character string and returns it as an owned value.",63,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"scan_charstr_into","","Scans a character string into a bytes vec.",63,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"scanresult"}}],[0,"rdata","domain","Resource data implementations.",null,null],[4,"MasterRecordData","domain::rdata","",null,null],[13,"A","","",64,null],[13,"Cname","","",64,null],[13,"Hinfo","","",64,null],[13,"Mb","","",64,null],[13,"Md","","",64,null],[13,"Mf","","",64,null],[13,"Mg","","",64,null],[13,"Minfo","","",64,null],[13,"Mr","","",64,null],[13,"Mx","","",64,null],[13,"Ns","","",64,null],[13,"Ptr","","",64,null],[13,"Soa","","",64,null],[13,"Txt","","",64,null],[13,"Wks","","",64,null],[13,"Aaaa","","",64,null],[13,"Generic","","",64,null],[5,"fmt_rdata","","",null,{"inputs":[{"name":"rtype"},{"name":"parser"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rfc1035","","Record data from [RFC 1035].",null,null],[3,"A","domain::rdata::rfc1035","A record data.",null,null],[3,"Cname","","",null,null],[3,"Hinfo","","Hinfo record data.",null,null],[3,"Mb","","",null,null],[3,"Md","","",null,null],[3,"Mf","","",null,null],[3,"Mg","","",null,null],[3,"Minfo","","Minfo record data.",null,null],[3,"Mr","","",null,null],[3,"Mx","","Mx record data.",null,null],[3,"Ns","","",null,null],[3,"Null","","Null record data.",null,null],[3,"Ptr","","",null,null],[3,"Soa","","Soa record data.",null,null],[3,"Txt","","Txt record data.",null,null],[3,"TxtIter","","An iterator over the character strings of a Txt record.",null,null],[3,"Wks","","Wks record data.",null,null],[3,"WksBitmap","","",null,null],[3,"WksBitmapBuf","","",null,null],[3,"WksIter","","An iterator over the services active in a Wks record.",null,null],[0,"parsed","","",null,null],[6,"A","domain::rdata::rfc1035::parsed","",null,null],[6,"Cname","","",null,null],[6,"Hinfo","","",null,null],[6,"Mb","","",null,null],[6,"Md","","",null,null],[6,"Mf","","",null,null],[6,"Mg","","",null,null],[6,"Minfo","","",null,null],[6,"Mr","","",null,null],[6,"Mx","","",null,null],[6,"Ns","","",null,null],[6,"Ptr","","",null,null],[6,"Soa","","",null,null],[6,"Txt","","",null,null],[6,"Wks","","",null,null],[0,"owned","domain::rdata::rfc1035","",null,null],[6,"A","domain::rdata::rfc1035::owned","",null,null],[6,"Cname","","",null,null],[6,"Hinfo","","",null,null],[6,"Mb","","",null,null],[6,"Md","","",null,null],[6,"Mf","","",null,null],[6,"Mg","","",null,null],[6,"Minfo","","",null,null],[6,"Mr","","",null,null],[6,"Mx","","",null,null],[6,"Ns","","",null,null],[6,"Ptr","","",null,null],[6,"Soa","","",null,null],[6,"Txt","","",null,null],[6,"Wks","","",null,null],[11,"clone","domain::rdata::rfc1035","",65,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"new","","Creates a new A record data from an IPv4 address.",65,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"a"}}],[11,"from_octets","","Creates a new A record from the IPv4 address components.",65,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"a"}}],[11,"addr","","",65,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_addr","","",65,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":null}],[11,"rtype","","",65,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",65,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",65,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",65,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"cname"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"ordering"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"option"}}],[11,"lt","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"le","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"gt","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"ge","","",66,{"inputs":[{"name":"self"},{"name":"cname"}],"output":{"name":"bool"}}],[11,"new","","",66,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"cname","","",66,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",66,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",66,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",66,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",66,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",66,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",66,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"hinfo"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"ordering"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"self"},{"name":"hinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Hinfo record data from the components.",67,{"inputs":[{"name":"c"},{"name":"c"}],"output":{"name":"self"}}],[11,"cpu","","The CPU type of the host.",67,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"os","","The operating system type of the host.",67,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"rtype","","",67,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",67,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",67,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",67,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",67,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"mb"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"ordering"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"mb"}],"output":{"name":"bool"}}],[11,"new","","",68,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"madname","","",68,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",68,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",68,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",68,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",68,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",68,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",68,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"md"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"md"}],"output":{"name":"bool"}}],[11,"new","","",69,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"madname","","",69,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",69,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",69,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",69,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",69,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",69,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",69,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"mf"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"ordering"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"mf"}],"output":{"name":"bool"}}],[11,"new","","",70,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"madname","","",70,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",70,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",70,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",70,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",70,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",70,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",70,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mg"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"ordering"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"mg"}],"output":{"name":"bool"}}],[11,"new","","",71,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"madname","","",71,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",71,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",71,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",71,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",71,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",71,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",71,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"minfo"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"ordering"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"self"},{"name":"minfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Minfo record data from the components.",72,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"rmailbx","","The responsible mail box.",72,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"emailbx","","The error mail box.",72,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scan","","",72,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",72,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",72,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"mr"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"ordering"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"mr"}],"output":{"name":"bool"}}],[11,"new","","",73,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"newname","","",73,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",73,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",73,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",73,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",73,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",73,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",73,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"mx"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"ordering"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Mx record data from the components.",74,{"inputs":[{"name":"u16"},{"name":"n"}],"output":{"name":"self"}}],[11,"preference","","The preference for this record.",74,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"exchange","","The name of the host that is the exchange.",74,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scan","","",74,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",74,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",74,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",74,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ns"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"ordering"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"self"},{"name":"ns"}],"output":{"name":"bool"}}],[11,"new","","",75,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"nsdname","","",75,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",75,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",75,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",75,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",75,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",75,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",75,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"null"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"ordering"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"new","","Creates new, empty owned Null record data.",76,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"data","","The raw content of the record.",76,null],[11,"rtype","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",76,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",76,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ptr"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"new","","",77,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"ptrdname","","",77,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rtype","","",77,{"inputs":[],"output":{"name":"rtype"}}],[11,"scan","","",77,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",77,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",77,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",77,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"from","","",77,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"soa"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"ordering"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"new","","Creates new Soa record data from content.",78,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"mname","","The primary name server for the zone.",78,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"rname","","The mailbox for the person responsible for this zone.",78,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"serial","","The serial number of the original copy of the zone.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"refresh","","The time interval in seconds before the zone should be refreshed.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"retry","","The time in seconds before a failed refresh is retried.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"expire","","The upper limit of time in seconds the zone is authoritative.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minimum","","The minimum TTL to be exported with any RR from this zone.",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"scan","","",78,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",78,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",78,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",78,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"txt"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"ordering"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Txt record from content.",79,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"iter","","Returns an iterator over the text items.",79,{"inputs":[{"name":"self"}],"output":{"name":"txtiter"}}],[11,"text","","Returns the text content.",79,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"scan","","",79,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",79,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",79,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",79,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"txtiter"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"txtiter"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"txtiter"}],"output":{"name":"bool"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"wks"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"wks"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"wks"}],"output":{"name":"bool"}}],[11,"new","","Creates a new record data from components.",81,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"b"}],"output":{"name":"self"}}],[11,"address","","The IPv4 address of the host this record refers to.",81,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"protocol","","The protocol number of the protocol this record refers to.",81,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"bitmap","","A bitmap indicating the ports where service is being provided.",81,{"inputs":[{"name":"self"}],"output":{"name":"wksbitmap"}}],[11,"serves","","Returns whether a certain service is being provided.",81,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the served ports.",81,{"inputs":[{"name":"self"}],"output":{"name":"wksiter"}}],[11,"scan","","",81,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",81,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",81,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",81,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes","","",82,null],[11,"as_bytes","","",82,null],[11,"iter","","",82,{"inputs":[{"name":"self"}],"output":{"name":"wksiter"}}],[11,"serves","","Returns whether a certain service is being provided.",82,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"as_ref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"wksbitmapbuf"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"wksbitmapbuf"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"from_vec","","",83,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"set_serves","","Enables or disables the given service.",83,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"bool"}],"output":null}],[11,"deref","","",83,null],[11,"borrow","","",83,{"inputs":[{"name":"self"}],"output":{"name":"wksbitmap"}}],[11,"as_ref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"wksbitmap"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"wksiter"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"wksiter"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"wksiter"}],"output":{"name":"bool"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"rfc3596","domain::rdata","Record data from [RFC 3596].",null,null],[3,"Aaaa","domain::rdata::rfc3596","",null,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"aaaa"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"ordering"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"aaaa"}],"output":{"name":"bool"}}],[11,"new","","",85,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"aaaa"}}],[11,"addr","","",85,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_addr","","",85,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":null}],[11,"scan","","",85,{"inputs":[{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",85,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",85,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"parse","","",85,{"inputs":[{"name":"rtype"},{"name":"parser"}],"output":{"name":"parseresult"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"parsed","domain::rdata","",null,null],[0,"owned","","",null,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"masterrecorddata"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scan","","",64,{"inputs":[{"name":"rtype"},{"name":"s"},{"name":"option"}],"output":{"name":"scanresult"}}],[11,"rtype","","",64,{"inputs":[{"name":"self"}],"output":{"name":"rtype"}}],[11,"compose","","",64,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"utils","domain","Various utility modules.",null,null],[0,"netdb","domain::utils","The network database.",null,null],[3,"ProtoEnt","domain::utils::netdb","",null,null],[12,"name","","",86,null],[12,"aliases","","",86,null],[12,"proto","","",86,null],[3,"ProtoIter","","",null,null],[3,"ServEnt","","",null,null],[12,"name","","",87,null],[12,"aliases","","",87,null],[12,"port","","",87,null],[12,"proto","","",87,null],[3,"ServIter","","",null,null],[11,"by_name","","",86,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"by_number","","",86,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"iter","","",86,{"inputs":[],"output":{"name":"protoiter"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"by_name","","",87,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"by_port","","",87,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"iter","","",87,{"inputs":[],"output":{"name":"serviter"}}],[11,"next","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"resolv","domain","An asynchronous stub resolver.",null,null],[3,"Query","domain::resolv","A DNS query.",null,null],[3,"Resolver","","Access to a DNS resolver.",null,null],[0,"conf","","Resolver configuration",null,null],[3,"ResolvOptions","domain::resolv::conf","Options for the resolver configuration.",null,null],[12,"aa_only","","Accept authoritative answers only.",90,null],[12,"use_vc","","Always use TCP.",90,null],[12,"primary","","Query primary name servers only.",90,null],[12,"ign_tc","","Ignore trunactions errors, don’t retry with TCP.",90,null],[12,"recurse","","Set the recursion desired bit in queries.",90,null],[12,"default_names","","Append the default domain name to single component names.",90,null],[12,"stay_open","","Keep TCP connections open between queries.",90,null],[12,"dn_search","","Search hostnames in the current domain and parent domains.",90,null],[12,"use_inet6","","Try AAAA query before A query and map IPv4 responses to tunnel form.",90,null],[12,"rotate","","Use round-robin selection of name servers.",90,null],[12,"no_check_name","","Disable checking of incoming hostname and mail names.",90,null],[12,"keep_tsig","","Do not strip TSIG records.",90,null],[12,"blast","","Send each query simultaneously to all name servers.",90,null],[12,"use_bstring","","Use bit-label format for IPv6 reverse lookups.",90,null],[12,"use_ip6dotint","","Use ip6.int instead of the recommended ip6.arpa.",90,null],[12,"use_edns0","","Use EDNS0.",90,null],[12,"single_request","","Perform IPv4 and IPv6 lookups sequentially instead of in parallel.",90,null],[12,"single_request_reopen","","Open a new socket for each request.",90,null],[12,"no_tld_query","","Don’t look up unqualified names as top-level-domain.",90,null],[3,"ServerConf","","Configuration for one upstream DNS server.",null,null],[12,"addr","","Server address.",91,null],[12,"udp","","Server mode for UDP transport.",91,null],[12,"tcp","","Server mode for TCP transport.",91,null],[12,"request_timeout","","How long to wait for a response before returning a timeout error.",91,null],[12,"keep_alive","","How long to keep a connection open after a new request.",91,null],[12,"recv_size","","Size of the message receive buffer in bytes.",91,null],[3,"ResolvConf","","Resolver configuration.",null,null],[12,"servers","","Addresses of servers to query.",92,null],[12,"search","","Search list for host-name lookup.",92,null],[12,"ndots","","TODO Sortlist sortlist: ?? Number of dots before an initial absolute query is made.",92,null],[12,"timeout","","Timeout to wait for a response.",92,null],[12,"attempts","","Number of retries before giving up.",92,null],[12,"options","","Default options.",92,null],[12,"idle_timeout","","Default idle timeout for stream oriented transports.",92,null],[4,"ServerMode","","The mode of operation of a server over a given transport.",null,null],[13,"None","","Don’t provide this transport for this server.",93,null],[13,"Default","","Do whatever is the default for this transport.",93,null],[13,"SingleRequest","","Close socket down after each individual request.",93,null],[13,"Sequential","","Wait for response before sending the next request.",93,null],[13,"Multiplex","","Send multiple requests without waiting for their responses.",93,null],[4,"Error","","The error that can happen when parsing `resolv.conf`.",null,null],[13,"ParseError","","The file is not a proper file.",94,null],[13,"Io","","Something happend while reading.",94,null],[6,"Result","","The result from parsing `resolv.conf`.",null,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"resolvoptions"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"serverconf"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"servermode"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new default server config for the given address.",91,{"inputs":[{"name":"socketaddr"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"resolvconf"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty configuration.",92,{"inputs":[],"output":{"name":"self"}}],[11,"finalize","","Finalizes the configuration for actual use.",92,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a default configuration for this system.",92,{"inputs":[],"output":{"name":"self"}}],[11,"parse_file","","Parses the configuration from a file.",92,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"parse","","Parses the configuration from a reader.",92,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",94,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",94,{"inputs":[{"name":"fromstrerror"}],"output":{"name":"error"}}],[11,"from","","",94,{"inputs":[{"name":"parseinterror"}],"output":{"name":"error"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","domain::resolv","Resolver errors and results.",null,null],[4,"Error","domain::resolv::error","An error happened during a query.",null,null],[13,"Question","","The question was broken.",95,null],[13,"Timeout","","All queries timed out.",95,null],[13,"NoName","","All responses for a query were negative.",95,null],[13,"NoSecureAnswers","","At least one response was received but none was secure.",95,null],[13,"AllBogusAnswers","","At least one response was received but all were bogus.",95,null],[13,"Io","","An IO error stopped queries from succeeding at all.",95,null],[6,"Result","","The result type of a query.",null,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"merge","","Finds the most appropriate error for two failed queries.",95,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"description","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",95,{"inputs":[{"name":"rcode"}],"output":{"name":"error"}}],[11,"from","","",95,{"inputs":[{"name":"composeerror"}],"output":{"name":"error"}}],[11,"from","","",95,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lookup","domain::resolv","Lookup functions and related types.",null,null],[0,"addr","domain::resolv::lookup","Looking up host names for addresses.",null,null],[3,"LookupAddr","domain::resolv::lookup::addr","The future for [`lookup_addr()`].",null,null],[3,"FoundAddrs","","The success type of the `lookup_addr()` function.",null,null],[3,"FoundAddrsIter","","An iterator over host names returned by address lookup.",null,null],[5,"lookup_addr","","Creates a future that resolves into the host names for an IP address.",null,{"inputs":[{"name":"resolver"},{"name":"ipaddr"}],"output":{"name":"lookupaddr"}}],[11,"poll","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"iter","","Returns an iterator over the host names.",97,{"inputs":[{"name":"self"}],"output":{"name":"foundaddrsiter"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"host","domain::resolv::lookup","Looking up host names.",null,null],[3,"LookupHost","domain::resolv::lookup::host","The future for [`lookup_host()`].",null,null],[3,"FoundHosts","","The value returned by a successful host lookup.",null,null],[3,"FoundHostsIter","","An iterator over the IP addresses returned by a host lookup.",null,null],[3,"FoundHostsSocketIter","","An iterator over socket addresses derived from a host lookup.",null,null],[5,"lookup_host","","Creates a future that resolves a host name into its IP addresses.",null,{"inputs":[{"name":"resolver"},{"name":"n"}],"output":{"name":"lookuphost"}}],[11,"poll","","",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"foundhosts"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonical_name","","Returns a reference to the canonical name for the host.",100,{"inputs":[{"name":"self"}],"output":{"name":"dnameslice"}}],[11,"iter","","Returns an iterator over the IP addresses returned by the lookup.",100,{"inputs":[{"name":"self"}],"output":{"name":"foundhostsiter"}}],[11,"port_iter","","Returns an iterator over socket addresses gained from the lookup.",100,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"foundhostssocketiter"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"foundhostsiter"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"foundhostssocketiter"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_socket_addrs","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"records","domain::resolv::lookup","Looking up raw records.",null,null],[3,"LookupRecords","domain::resolv::lookup::records","The future returned by [`lookup_records()`].",null,null],[5,"lookup_records","","Creates a future that looks up DNS records.",null,{"inputs":[{"name":"resolver"},{"name":"n"},{"name":"rtype"},{"name":"class"}],"output":{"name":"lookuprecords"}}],[11,"poll","","",103,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"search","domain::resolv::lookup","Working with the search list.",null,null],[3,"SearchIter","domain::resolv::lookup::search","An iterator gained from applying a search list to a domain name.",null,null],[11,"new","","Creates a new search iterator.",104,{"inputs":[{"name":"resolver"},{"name":"dnameslice"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"intro","domain::resolv","Resolver Architecture Documentation",null,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"resolver"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new resolver using the system’s default configuration.",105,{"inputs":[{"name":"handle"}],"output":{"name":"self"}}],[11,"from_conf","","Creates a new resolver using the given configuration.",105,{"inputs":[{"name":"handle"},{"name":"resolvconf"}],"output":{"name":"self"}}],[11,"query","","Trades the resolver for a DNS query.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"query"}}],[11,"conf","","Returns a reference to the configuration of this resolver.",105,{"inputs":[{"name":"self"}],"output":{"name":"resolvconf"}}],[11,"options","","Returns a reference to the configuration options of this resolver.",105,{"inputs":[{"name":"self"}],"output":{"name":"resolvoptions"}}],[11,"run","","Synchronously perform a DNS operation atop a standard resolver.",105,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"run_with_conf","","Synchronously perform a DNS operation atop a configuredresolver.",105,{"inputs":[{"name":"resolvconf"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Starts a new query.",106,{"inputs":[{"name":"resolver"},{"name":"q"}],"output":{"name":"self"}}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"labelettes","domain::bits::name","Returns an iterator over the labelettes of the domain name.",36,{"inputs":[{"name":"self"}],"output":{"name":"namelabelettes"}}],[11,"compose","","Appends the name to the end of a composition.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}],[11,"compose_compressed","","Appends the name to the end of a composition using name compression.",36,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"composeresult"}}]],"paths":[[4,"FromStrError"],[3,"CharStr"],[3,"CharStrBuf"],[3,"PushError"],[4,"ComposeMode"],[4,"ComposeError"],[8,"Composable"],[3,"Composer"],[3,"ComposeSnapshot"],[3,"Header"],[3,"HeaderCounts"],[3,"HeaderSection"],[3,"Message"],[3,"MessageBuf"],[3,"QuestionSection"],[3,"RecordSection"],[3,"RecordIter"],[3,"MessageBuilder"],[3,"AnswerBuilder"],[3,"AuthorityBuilder"],[3,"AdditionalBuilder"],[4,"LabelContent"],[4,"Labelette"],[4,"FromStrError"],[3,"DNameBuilder"],[3,"DNameBuildInto"],[3,"NameLabels"],[3,"NameLabelettes"],[3,"Label"],[3,"LabelBuf"],[3,"LabelIter"],[3,"ParsedDName"],[3,"DNameSlice"],[3,"DNameBuf"],[3,"PushError"],[3,"StripSuffixError"],[8,"DName"],[4,"ParseError"],[3,"Parser"],[3,"Question"],[8,"RecordData"],[8,"ParsedRecordData"],[3,"GenericRecordData"],[3,"Record"],[4,"Class"],[3,"FromStrError"],[4,"Opcode"],[4,"OptionCode"],[4,"Rcode"],[4,"OptRcode"],[4,"TsigRcode"],[4,"Rtype"],[3,"FromStrError"],[4,"SecAlg"],[3,"FromStrError"],[3,"BufScanner"],[4,"Entry"],[4,"SyntaxError"],[4,"ScanError"],[3,"Pos"],[4,"ReaderItem"],[3,"Reader"],[3,"MasterRecord"],[8,"Scanner"],[4,"MasterRecordData"],[3,"A"],[3,"Cname"],[3,"Hinfo"],[3,"Mb"],[3,"Md"],[3,"Mf"],[3,"Mg"],[3,"Minfo"],[3,"Mr"],[3,"Mx"],[3,"Ns"],[3,"Null"],[3,"Ptr"],[3,"Soa"],[3,"Txt"],[3,"TxtIter"],[3,"Wks"],[3,"WksBitmap"],[3,"WksBitmapBuf"],[3,"WksIter"],[3,"Aaaa"],[3,"ProtoEnt"],[3,"ServEnt"],[3,"ProtoIter"],[3,"ServIter"],[3,"ResolvOptions"],[3,"ServerConf"],[3,"ResolvConf"],[4,"ServerMode"],[4,"Error"],[4,"Error"],[3,"LookupAddr"],[3,"FoundAddrs"],[3,"FoundAddrsIter"],[3,"LookupHost"],[3,"FoundHosts"],[3,"FoundHostsIter"],[3,"FoundHostsSocketIter"],[3,"LookupRecords"],[3,"SearchIter"],[3,"Resolver"],[3,"Query"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["elastic_array"] = {"doc":"","items":[[3,"ElasticArray2","elastic_array","",null,null],[3,"ElasticArray4","","",null,null],[3,"ElasticArray8","","",null,null],[3,"ElasticArray16","","",null,null],[3,"ElasticArray32","","",null,null],[3,"ElasticArray36","","",null,null],[3,"ElasticArray64","","",null,null],[3,"ElasticArray128","","",null,null],[3,"ElasticArray256","","",null,null],[3,"ElasticArray512","","",null,null],[3,"ElasticArray1024","","",null,null],[3,"ElasticArray2048","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,null],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray2"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"elasticarray2"}}],[11,"from_slice","","",0,null],[11,"from_vec","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray2"}}],[11,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",0,null],[11,"to_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",0,null],[11,"deref","","",0,null],[11,"as_ref","","",0,null],[11,"borrow","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,null],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray4"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"elasticarray4"}}],[11,"from_slice","","",1,null],[11,"from_vec","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray4"}}],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",1,null],[11,"to_vec","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",1,null],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"borrow","","",1,null],[11,"deref_mut","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",2,null],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray8"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"elasticarray8"}}],[11,"from_slice","","",2,null],[11,"from_vec","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray8"}}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",2,null],[11,"to_vec","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",2,null],[11,"deref","","",2,null],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"deref_mut","","",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray16"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"elasticarray16"}}],[11,"from_slice","","",3,null],[11,"from_vec","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray16"}}],[11,"push","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",3,null],[11,"to_vec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",3,null],[11,"deref","","",3,null],[11,"as_ref","","",3,null],[11,"borrow","","",3,null],[11,"deref_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray32"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"elasticarray32"}}],[11,"from_slice","","",4,null],[11,"from_vec","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray32"}}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",4,null],[11,"to_vec","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",4,null],[11,"deref","","",4,null],[11,"as_ref","","",4,null],[11,"borrow","","",4,null],[11,"deref_mut","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray36"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"elasticarray36"}}],[11,"from_slice","","",5,null],[11,"from_vec","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray36"}}],[11,"push","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",5,null],[11,"to_vec","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",5,null],[11,"deref","","",5,null],[11,"as_ref","","",5,null],[11,"borrow","","",5,null],[11,"deref_mut","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",6,null],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray64"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"elasticarray64"}}],[11,"from_slice","","",6,null],[11,"from_vec","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray64"}}],[11,"push","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",6,null],[11,"to_vec","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",6,null],[11,"deref","","",6,null],[11,"as_ref","","",6,null],[11,"borrow","","",6,null],[11,"deref_mut","","",6,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray128"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"elasticarray128"}}],[11,"from_slice","","",7,null],[11,"from_vec","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray128"}}],[11,"push","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",7,null],[11,"to_vec","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",7,null],[11,"deref","","",7,null],[11,"as_ref","","",7,null],[11,"borrow","","",7,null],[11,"deref_mut","","",7,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",8,null],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray256"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"elasticarray256"}}],[11,"from_slice","","",8,null],[11,"from_vec","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray256"}}],[11,"push","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",8,null],[11,"to_vec","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",8,null],[11,"deref","","",8,null],[11,"as_ref","","",8,null],[11,"borrow","","",8,null],[11,"deref_mut","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",9,null],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray512"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"elasticarray512"}}],[11,"from_slice","","",9,null],[11,"from_vec","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray512"}}],[11,"push","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",9,null],[11,"to_vec","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",9,null],[11,"deref","","",9,null],[11,"as_ref","","",9,null],[11,"borrow","","",9,null],[11,"deref_mut","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,null],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray1024"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"elasticarray1024"}}],[11,"from_slice","","",10,null],[11,"from_vec","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray1024"}}],[11,"push","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",10,null],[11,"to_vec","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",10,null],[11,"deref","","",10,null],[11,"as_ref","","",10,null],[11,"borrow","","",10,null],[11,"deref_mut","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",11,null],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray2048"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"elasticarray2048"}}],[11,"from_slice","","",11,null],[11,"from_vec","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray2048"}}],[11,"push","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",11,null],[11,"to_vec","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",11,null],[11,"deref","","",11,null],[11,"as_ref","","",11,null],[11,"borrow","","",11,null],[11,"deref_mut","","",11,null],[14,"impl_elastic_array","","",null,null]],"paths":[[3,"ElasticArray2"],[3,"ElasticArray4"],[3,"ElasticArray8"],[3,"ElasticArray16"],[3,"ElasticArray32"],[3,"ElasticArray36"],[3,"ElasticArray64"],[3,"ElasticArray128"],[3,"ElasticArray256"],[3,"ElasticArray512"],[3,"ElasticArray1024"],[3,"ElasticArray2048"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build","","Build an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",1,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has *started*; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success type of this `Async` value with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `merge` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to succesfully complete. unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use Future::shared() method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is clonable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is clonable and implements Deref for ease of use.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogenous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[6,"BoxFuture","","A type alias for `Box<Future + Send>`",null,null],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",33,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",33,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",33,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"boxed","","Convenience function for turning this future into a trait object which is also `Send`.",33,{"inputs":[{"name":"self"}],"output":{"name":"boxfuture"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",33,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",33,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",34,null],[16,"Item","","The item that the future may resolve with.",34,null],[16,"Error","","The error that the future may resolve with.",34,null],[10,"into_future","","Consumes this object and produces a future.",34,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",35,null],[16,"Error","","Possible errors during conversion.",35,null],[10,"future_from","","Consume the given value, beginning the conversion.",35,null],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a **blocking iterator**.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"FuturesUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",36,null],[13,"Second","","An item from the second stream",36,null],[13,"Both","","Items from both streams",36,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",37,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",38,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",39,null],[11,"poll_complete","","",39,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",39,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",40,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",43,null],[11,"poll_complete","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",44,null],[11,"poll_complete","","",44,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",44,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",45,null],[11,"poll_complete","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",48,null],[11,"poll_complete","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",49,null],[11,"poll_complete","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Recover original stream",49,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",58,null],[11,"poll_complete","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",67,null],[11,"poll_complete","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"BoxStream","","A type alias for `Box<Stream + Send>`",null,null],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",75,null],[16,"Error","","The type of error this stream may generate.",75,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",75,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"boxed","","Convenience function for turning this stream into a trait object.",75,{"inputs":[{"name":"self"}],"output":{"name":"boxstream"}}],[11,"into_future","","Converts this stream into a `Future`.",75,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",75,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",75,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",75,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",75,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",75,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",75,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",75,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",75,null],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a **blocking sink**.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run *prior* to pushing a value into the underlying sink.",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",76,null],[11,"poll_complete","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",79,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",79,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",81,null],[11,"poll_complete","","",81,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",81,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",83,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",83,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Stream + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",84,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",84,null],[10,"start_send","","Begin the process of sending a value to the sink.",84,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",84,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function *in front of* the sink.",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",84,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",84,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",84,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",84,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",84,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"park","","Returns a handle to the current task to call `unpark` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[5,"spawn","","Spawns a new future, returning the fused future and task.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",86,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",87,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the correponding `Sender<T>` is dropped.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",88,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",88,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",95,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"send","","Sends the provided message along this channel.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"start_send","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",93,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",94,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","futures::sync","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",96,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",96,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",96,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",98,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",99,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",99,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",100,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",100,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",101,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",101,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",102,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",102,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"send","","Sends the provided message along this channel.",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",103,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",103,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Canceled","","Represents that the `Sender` dropped before sending a message.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",105,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",106,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[6,"Poll","futures","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"fmt","futures::task","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"unpark","","Indicate that the task should attempt to poll its future in a timely fashion.",109,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task. In other words, the task is currently running on the thread calling the function.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",110,{"inputs":[{"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",111,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",111,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",111,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",111,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",111,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",111,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",112,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[4,"MergedItem"],[3,"Iter"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[8,"Stream"],[3,"With"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"Sender"],[3,"Receiver"],[3,"Canceled"],[3,"LocalKey"],[3,"Task"],[3,"UnparkEvent"],[3,"Spawn"],[3,"Run"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",2,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create CpuPool with configured parameters",2,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"CpuFuture"],[3,"Builder"]]};
searchIndex["heapsize"] = {"doc":"Data structure measurement.","items":[[5,"heap_size_of","heapsize","Get the size of a heap block.",null,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the space taken up by the value itself (i.e. what size_of::<T> measures, more or less); that space is handled by the implementation of HeapSizeOf for Box<T> below.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[14,"known_heap_size","","For use on types defined in external crates with known heap sizes.",null,null]],"paths":[[8,"HeapSizeOf"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Uri","hyper","The Request-URI of a Request's StartLine.",null,null],[3,"Body","","A `Stream` for `Chunk`s used in requests and responses.",null,null],[3,"Chunk","","A piece of a message body.",null,null],[3,"Request","","A client request to a remote server.",null,null],[3,"Response","","A response for a client request to a remote server.",null,null],[4,"Method","","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",0,null],[13,"Get","","GET",0,null],[13,"Post","","POST",0,null],[13,"Put","","PUT",0,null],[13,"Delete","","DELETE",0,null],[13,"Head","","HEAD",0,null],[13,"Trace","","TRACE",0,null],[13,"Connect","","CONNECT",0,null],[13,"Patch","","PATCH",0,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",0,null],[4,"HttpVersion","","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",1,null],[13,"Http10","","`HTTP/1.0`",1,null],[13,"Http11","","`HTTP/1.1`",1,null],[13,"H2","","`HTTP/2.0` over TLS",1,null],[13,"H2c","","`HTTP/2.0` over cleartext",1,null],[0,"client","","HTTP Client",null,null],[8,"Service","hyper::client","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",2,null],[16,"Response","","Responses given by the service.",2,null],[16,"Error","","Errors produced by the service.",2,null],[16,"Future","","The future response value.",2,null],[10,"call","","Process the request and return the response asynchronously.",2,null],[3,"Response","","A response for a client request to a remote server.",null,null],[3,"Request","","A client request to a remote server.",null,null],[3,"HttpConnector","","A connector for the `http` scheme.",null,null],[3,"Client","","A Client to make outgoing HTTP requests.",null,null],[3,"FutureResponse","","A `Future` that will resolve to an HTTP Response.",null,null],[3,"Config","","Configuration for a Client",null,null],[3,"UseDefaultConnector","","Phantom type used to signal that `Config` should create a `HttpConnector`.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"new","","Construct a new HttpConnector.",3,{"inputs":[{"name":"usize"},{"name":"handle"}],"output":{"name":"httpconnector"}}],[11,"enforce_http","","Option to enforce all `Uri`s have the `http` scheme.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","","",3,null],[8,"Connect","","A connector creates an Io to a remote address..",null,null],[16,"Output","","The connected Io Stream.",4,null],[16,"Future","","A Future that will resolve to the connected Stream.",4,null],[10,"connect","","Connect to a remote address.",4,null],[11,"new","","Create a new Client with the default config.",5,{"inputs":[{"name":"handle"}],"output":{"name":"client"}}],[11,"configure","","Configure a Client.",5,{"inputs":[],"output":{"name":"config"}}],[11,"handle","","Return a reference to a handle to the event loop this Client is associated with.",5,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"get","","Send a GET Request using this Client.",5,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"futureresponse"}}],[11,"request","","Send a constructed Request using this Client.",5,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"futureresponse"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"call","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usedefaultconnector"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"config"}}],[11,"body","","Set the body stream to be used by the `Client`.",8,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"connector","","Set the `Connect` type to be used.",8,{"inputs":[{"name":"self"},{"name":"cc"}],"output":{"name":"config"}}],[11,"keep_alive","","Enable or disable keep-alive mechanics.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"keep_alive_timeout","","Set an optional timeout for idle sockets being kept-alive.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"config"}}],[11,"build","","Construct the Client with this configuration.",8,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"client"}}],[11,"build","","Construct the Client with this configuration.",8,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"client"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[0,"error","hyper","Error and Result module.",null,null],[3,"UriError","hyper::error","An error parsing a `Uri`.",null,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",9,null],[13,"Uri","","An invalid `Uri`, such as `exam ple.domain`.",9,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",9,null],[13,"Header","","An invalid `Header`.",9,null],[13,"TooLarge","","A message head is too large to be reasonable.",9,null],[13,"Incomplete","","A message reached EOF, but is not complete.",9,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",9,null],[13,"Timeout","","A timeout occurred waiting for an IO event.",9,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",9,null],[13,"Utf8","","Parsing a field as string failed",9,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",9,{"inputs":[{"name":"urierror"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","hyper","",0,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"method"}}],[0,"header","","Headers container, and common header fields.",null,null],[3,"LanguageTag","hyper::header","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",10,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",10,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",10,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",10,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",10,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",10,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",10,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",11,null],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",12,null],[12,"quality","","The quality (client or server preference) for the value.",12,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",13,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",14,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",15,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",16,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",17,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",18,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",19,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",21,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",22,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",23,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",24,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",25,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",26,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",26,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",27,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",28,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",29,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",30,null],[12,"parameters","","Disposition parameters",30,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",31,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",32,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",33,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",34,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",35,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",36,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",37,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",38,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",39,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"Host","","The `Host` header.",null,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",41,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",42,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",43,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[3,"Origin","","The `Origin` header.",null,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",44,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",45,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",46,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",47,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",47,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",48,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",49,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",50,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",50,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",51,null],[12,"agent","","The name or pseudonym of the server adding this header.",51,null],[12,"text","","The warning message describing the error.",51,null],[12,"date","","An optional warning date.",51,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Raw","","A raw header value.",null,null],[3,"Formatter","","A formatter used to serialize headers to an output stream.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",52,null],[13,"Iso_8859_1","","ISO-8859-1",52,null],[13,"Iso_8859_2","","ISO-8859-2",52,null],[13,"Iso_8859_3","","ISO-8859-3",52,null],[13,"Iso_8859_4","","ISO-8859-4",52,null],[13,"Iso_8859_5","","ISO-8859-5",52,null],[13,"Iso_8859_6","","ISO-8859-6",52,null],[13,"Iso_8859_7","","ISO-8859-7",52,null],[13,"Iso_8859_8","","ISO-8859-8",52,null],[13,"Iso_8859_9","","ISO-8859-9",52,null],[13,"Iso_8859_10","","ISO-8859-10",52,null],[13,"Shift_Jis","","Shift_JIS",52,null],[13,"Euc_Jp","","EUC-JP",52,null],[13,"Iso_2022_Kr","","ISO-2022-KR",52,null],[13,"Euc_Kr","","EUC-KR",52,null],[13,"Iso_2022_Jp","","ISO-2022-JP",52,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",52,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",52,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",52,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",52,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",52,null],[13,"Gb2312","","GB2312",52,null],[13,"Big5","","Big5",52,null],[13,"Koi8_R","","KOI8-R",52,null],[13,"Ext","","An arbitrary charset specified as a string",52,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",53,null],[13,"Brotli","","The `br` encoding.",53,null],[13,"Gzip","","The `gzip` encoding.",53,null],[13,"Deflate","","The `deflate` encoding.",53,null],[13,"Compress","","The `compress` encoding.",53,null],[13,"Identity","","The `identity` encoding.",53,null],[13,"Trailers","","The `trailers` encoding.",53,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",53,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",54,null],[13,"Null","","A hidden origin",54,null],[13,"Value","","Allow one particular origin",54,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",55,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",55,null],[13,"Unregistered","","The given range unit is not registered at IANA.",55,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",56,null],[13,"NoStore","","\"no-store\"",56,null],[13,"NoTransform","","\"no-transform\"",56,null],[13,"OnlyIfCached","","\"only-if-cached\"",56,null],[13,"MaxAge","","\"max-age=delta\"",56,null],[13,"MaxStale","","\"max-stale=delta\"",56,null],[13,"MinFresh","","\"min-fresh=delta\"",56,null],[13,"MustRevalidate","","\"must-revalidate\"",56,null],[13,"Public","","\"public\"",56,null],[13,"Private","","\"private\"",56,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",56,null],[13,"SMaxAge","","\"s-maxage=delta\"",56,null],[13,"Extension","","Extension directives. Optionally include an argument.",56,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",57,null],[13,"Close","","The `close` connection value.",57,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",57,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",58,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",58,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",58,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",59,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",59,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",60,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",60,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",60,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",60,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",60,null],[12,"resp","","other-range-resp",60,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",61,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",62,null],[13,"Items","","Only the listed items are a match",62,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",63,null],[13,"Items","","Only the listed items are a match",63,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",64,null],[13,"Date","","The date when the client retrieved the resource",64,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",65,null],[13,"Ext","","Every value other than `no-cache`.",65,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",66,null],[13,"ReturnRepresentation","","\"return=representation\"",66,null],[13,"ReturnMinimal","","\"return=minimal\"",66,null],[13,"HandlingStrict","","\"handling=strict\"",66,null],[13,"HandlingLenient","","\"handling=lenient\"",66,null],[13,"Wait","","\"wait=delta\"",66,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",66,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",67,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",67,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",68,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",68,null],[13,"Last","","Get last x bytes (\"-x\")",68,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",69,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",69,null],[13,"SameOrigin","","`same-origin`",69,null],[13,"Origin","","`origin`",69,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",69,null],[13,"UnsafeUrl","","`unsafe-url`",69,null],[13,"StrictOrigin","","`strict-origin`",69,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",69,null],[4,"RetryAfter","","The `Retry-After` header.",null,null],[13,"Delay","","Retry after this duration has elapsed",70,null],[13,"DateTime","","Retry after the given DateTime",70,null],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",71,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",71,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",71,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",71,null],[13,"Unregistered","","Any other protocol name not known to hyper",71,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",72,null],[13,"Items","","Only the listed items are a match",72,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",73,null],[13,"Appendix","","appendix.",73,null],[13,"Bookmark","","bookmark.",73,null],[13,"Chapter","","chapter.",73,null],[13,"Contents","","contents.",73,null],[13,"Copyright","","copyright.",73,null],[13,"Current","","current.",73,null],[13,"DescribedBy","","describedby.",73,null],[13,"Edit","","edit.",73,null],[13,"EditMedia","","edit-media.",73,null],[13,"Enclosure","","enclosure.",73,null],[13,"First","","first.",73,null],[13,"Glossary","","glossary.",73,null],[13,"Help","","help.",73,null],[13,"Hub","","hub.",73,null],[13,"Index","","index.",73,null],[13,"Last","","last.",73,null],[13,"LatestVersion","","latest-version.",73,null],[13,"License","","license.",73,null],[13,"Next","","next.",73,null],[13,"NextArchive","","next-archive.",73,null],[13,"Payment","","payment.",73,null],[13,"Prev","","prev.",73,null],[13,"PredecessorVersion","","predecessor-version.",73,null],[13,"Previous","","previous.",73,null],[13,"PrevArchive","","prev-archive.",73,null],[13,"Related","","related.",73,null],[13,"Replies","","replies.",73,null],[13,"Section","","section.",73,null],[13,"RelationTypeSelf","","self.",73,null],[13,"Service","","service.",73,null],[13,"Start","","start.",73,null],[13,"Stylesheet","","stylesheet.",73,null],[13,"Subsection","","subsection.",73,null],[13,"SuccessorVersion","","successor-version.",73,null],[13,"Up","","up.",73,null],[13,"VersionHistory","","versionHistory.",73,null],[13,"Via","","via.",73,null],[13,"WorkingCopy","","working-copy.",73,null],[13,"WorkingCopyOf","","working-copy-of.",73,null],[13,"ExtRelType","","ext-rel-type.",73,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",74,null],[13,"Tty","","tty.",74,null],[13,"Tv","","tv.",74,null],[13,"Projection","","projection.",74,null],[13,"Handheld","","handheld.",74,null],[13,"Print","","print.",74,null],[13,"Braille","","braille.",74,null],[13,"Aural","","aural.",74,null],[13,"All","","all.",74,null],[13,"Extension","","Unrecognized media descriptor extension.",74,null],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float or integer.",null,{"inputs":[{"name":"t"}],"output":{"name":"quality"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",13,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",13,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",13,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",13,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",13,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",14,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",15,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",16,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",17,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",26,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",27,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",56,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"new","","Creates a new `Cookie` header.",76,{"inputs":[],"output":{"name":"cookie"}}],[11,"set","","Sets a name and value for the `Cookie`.",76,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append","","Append a name and value for the `Cookie`.",76,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"get","","Get a value for the name, if it exists.",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",29,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",29,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",36,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a `Host` header, providing the hostname and optional port.",77,{"inputs":[{"name":"h"},{"name":"p"}],"output":{"name":"host"}}],[11,"hostname","","Get the hostname, such as example.domain.",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the optional port number.",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"header_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",77,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",77,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",78,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",78,null],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",79,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"null","","Creates a `Null` `Origin` header.",79,{"inputs":[],"output":{"name":"origin"}}],[11,"is_null","","Checks if `Origin` is `Null`.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","The scheme, such as http or https ``` use hyper::header::Origin; let origin = Origin::new(\"https\", \"foo.com\", Some(443)); assert_eq!(origin.scheme(), Some(\"https\")); ```",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None} ``` use hyper::header::{Origin,Host}; let origin = Origin::new(\"https\", \"foo.com\", Some(443)); assert_eq!(origin.host(), Some(&Host::new(\"foo.com\", Some(443)))); ```",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"header_name","","",79,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",79,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",67,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",67,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",80,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",80,null],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"retryafter"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",81,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",81,null],[11,"header_name","","",81,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",81,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",47,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",47,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",47,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",48,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",50,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",50,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",82,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",82,null],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",83,{"inputs":[{"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",83,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",83,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":null}],[11,"new","","Create `LinkValue` from URI-Reference.",84,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",84,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",84,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",84,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",84,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",84,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"header_name","","",83,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",83,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",83,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",74,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the amount of lines.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",85,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",85,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","","",85,null],[11,"eq","","",85,null],[11,"eq","","",85,null],[11,"eq","","",85,null],[11,"eq","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",85,{"inputs":[{"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",85,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",85,{"inputs":[{"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",85,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",85,null],[11,"from","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"raw"}}],[11,"index","","",85,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",11,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",11,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",11,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",11,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",86,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",86,{"inputs":[{"name":"systemtime"}],"output":{"name":"httpdate"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",12,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",88,null],[12,"language_tag","","The human language details of the `value`, if available.",88,null],[12,"value","","The parameter value, as expressed in octets.",88,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",89,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",90,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",90,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[10,"fmt_header","","Format a header to outgoing stream.",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_line","","Format one 'line' of a header.",91,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",92,{"inputs":[],"output":{"name":"headers"}}],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",92,{"inputs":[{"name":"usize"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",92,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",92,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",92,{"inputs":[{"name":"self"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",92,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",92,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",92,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"remove_raw","","Remove a header by name.",92,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Access the raw value of the header.",94,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",92,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",92,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",92,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","hyper","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Return an empty body stream",95,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",95,null],[11,"default","","",95,{"inputs":[],"output":{"name":"body"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",95,{"inputs":[{"name":"body"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"chunk"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",95,null],[11,"from","","",95,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",95,{"inputs":[{"name":"option"}],"output":{"name":"body"}}],[11,"from","","",96,{"inputs":[{"name":"vec"}],"output":{"name":"chunk"}}],[11,"from","","",96,null],[11,"from","","",96,{"inputs":[{"name":"string"}],"output":{"name":"chunk"}}],[11,"from","","",96,{"inputs":[{"name":"str"}],"output":{"name":"chunk"}}],[11,"from","","",96,{"inputs":[{"name":"bytes"}],"output":{"name":"chunk"}}],[11,"deref","","",96,null],[11,"as_ref","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"chunk"}}],[11,"into_iter","","",96,null],[11,"extend","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"new","","Construct a new Request.",97,{"inputs":[{"name":"method"},{"name":"uri"}],"output":{"name":"request"}}],[11,"uri","","Read the Request Uri.",97,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"version","","Read the Request Version.",97,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Read the Request headers.",97,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",97,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"body_ref","","Read the Request body.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote_addr","","The remote socket address of this request",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","The target path of this Request.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","The query string of this Request.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_method","","Set the Method of this request.",97,{"inputs":[{"name":"self"},{"name":"method"}],"output":null}],[11,"headers_mut","","Get a mutable reference to the Request headers.",97,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"set_uri","","Set the `Uri` of this request.",97,{"inputs":[{"name":"self"},{"name":"uri"}],"output":null}],[11,"set_version","","Set the `HttpVersion` of this request.",97,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":null}],[11,"set_body","","Set the body of the request.",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"set_proxy","","Set that the URI should use the absolute form.",97,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"deconstruct","","Deconstruct this Request into its pieces.",97,null],[11,"body","","Take the Request body.",97,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a default response",98,{"inputs":[],"output":{"name":"response"}}],[11,"version","","Get the HTTP version of this response.",98,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Get the headers from the response.",98,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"headers_mut","","Get a mutable reference to the headers.",98,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"status","","Get the status from the server.",98,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"status_raw","","Get the raw status code and reason.",98,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"set_status","","Set the `StatusCode` for this response.",98,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":null}],[11,"with_status","","Set the status and move the Response.",98,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"with_header","","Set a header and move the Response.",98,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"self"}}],[11,"with_headers","","Set the headers and move the Response.",98,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"self"}}],[11,"set_body","","Set the body.",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_body","","Set the body and move the Response.",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"body","","Take the `Body` of this response.",98,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"response"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"server","","HTTP Server",null,null],[8,"NewService","hyper::server","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",99,null],[16,"Response","","Responses given by the service",99,null],[16,"Error","","Errors produced by the service",99,null],[16,"Instance","","The `Service` value created by this factory",99,null],[10,"new_service","","Create and return a new service value.",99,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Service","","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",2,null],[16,"Response","","Responses given by the service.",2,null],[16,"Error","","Errors produced by the service.",2,null],[16,"Future","","The future response value.",2,null],[10,"call","","Process the request and return the response asynchronously.",2,null],[3,"Response","","A response for a client request to a remote server.",null,null],[3,"Request","","A client request to a remote server.",null,null],[3,"Http","","An instance of the HTTP protocol, and implementation of tokio-proto's `ServerProto` trait.",null,null],[3,"Server","","An instance of a server created through `Http::bind`.",null,null],[11,"new","","Creates a new instance of the HTTP protocol, ready to spawn a server or start accepting connections.",100,{"inputs":[],"output":{"name":"http"}}],[11,"keep_alive","","Enables or disables HTTP keep-alive.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"bind","","Bind the provided `addr` and return a server ready to handle connections.",100,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"s"}],"output":{"name":"result"}}],[11,"bind_connection","","Use this `Http` instance to create a new server task which handles the connection `io` provided.",100,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"i"},{"name":"socketaddr"},{"name":"s"}],"output":null}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"http"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind_transport","","",100,null],[11,"from","hyper","",97,{"inputs":[{"name":"message"}],"output":{"name":"request"}}],[11,"into","","",98,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"local_addr","hyper::server","Returns the local address that this server is bound to.",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"handle","","Returns a handle to the underlying event loop that this server will be running on.",101,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_timeout","","Configure the amount of time this server will wait for a \"graceful shutdown\".",101,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"run","","Execute this server infinitely.",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run_until","","Execute this server until the given future, `shutdown_signal`, resolves.",101,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",102,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",102,null],[13,"Processing","","102 Processing [RFC2518]",102,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",102,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",102,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",102,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",102,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",102,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",102,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",102,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",102,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",102,null],[13,"ImUsed","","226 IM Used [RFC3229]",102,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",102,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",102,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",102,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",102,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",102,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",102,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",102,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",102,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",102,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",102,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",102,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",102,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",102,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",102,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",102,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",102,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",102,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",102,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",102,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",102,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",102,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",102,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",102,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",102,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",102,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",102,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",102,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",102,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",102,null],[13,"Locked","","423 Locked [RFC4918]",102,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",102,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",102,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",102,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",102,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",102,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",102,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",102,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",102,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",102,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",102,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",102,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",102,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",102,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",102,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",102,null],[13,"NotExtended","","510 Not Extended [RFC2774]",102,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",102,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",102,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",103,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",103,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",103,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",103,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",103,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",103,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",102,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"statuscode"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"default_code","","Get the default status code for the class.",103,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","hyper","",104,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"hash","","",104,null],[11,"path","","Get the path of this `Uri`.",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"scheme","","Get the scheme of this `Uri`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"authority","","Get the authority of this `Uri`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Get the host of this `Uri`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Get the port of this `Uri`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_absolute","","Returns whether this URI is in `absolute-form`.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",104,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"uri"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::error","",105,{"inputs":[{"name":"self"}],"output":{"name":"urierror"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","hyper","",1,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"httpversion"}}],[14,"header","","",null,null],[11,"fmt","hyper::header","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[4,"Method"],[4,"HttpVersion"],[8,"Service"],[3,"HttpConnector"],[8,"Connect"],[3,"Client"],[3,"FutureResponse"],[3,"UseDefaultConnector"],[3,"Config"],[4,"Error"],[3,"LanguageTag"],[3,"EntityTag"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLocation"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"Warning"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"RetryAfter"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"AccessControlAllowCredentials"],[3,"Cookie"],[3,"Host"],[3,"Location"],[3,"Origin"],[3,"Referer"],[3,"Server"],[3,"UserAgent"],[3,"Link"],[3,"LinkValue"],[3,"Raw"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[3,"Formatter"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"Body"],[3,"Chunk"],[3,"Request"],[3,"Response"],[8,"NewService"],[3,"Http"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[3,"Uri"],[3,"UriError"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","*Unicode IDNA Compatibility Processing* (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["import"] = {"doc":"Bitcoind blockchain database importer","items":[[0,"hash","import","Fixed-size hashes",null,null],[3,"H32","import::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","import","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","import::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[3,"BlkDir","import","Bitcoind database blocks iterator",null,null],[5,"open_blk_dir","","Creates iterator over bitcoind database blocks",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take","import::hash","",1,null],[11,"reversed","","",1,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","import::bytes","",2,null],[11,"serialized_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","import::hash","",1,null],[11,"serialized_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",3,null],[11,"serialized_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",4,null],[11,"serialized_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",5,null],[11,"serialized_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",6,null],[11,"serialized_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",7,null],[11,"serialized_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",8,null],[11,"serialized_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",9,null],[11,"serialized_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","import::bytes","",2,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","import::hash","",1,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"hash","import::bytes","",2,null],[11,"hash","import::hash","",1,null],[11,"hash","","",3,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"deref","import::bytes","",2,null],[11,"deref","","",10,null],[11,"deref","import::hash","",1,null],[11,"deref","","",3,null],[11,"deref","","",4,null],[11,"deref","","",5,null],[11,"deref","","",6,null],[11,"deref","","",7,null],[11,"deref","","",8,null],[11,"deref","","",9,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","import::bytes","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","import::hash","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","import::bytes","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","import::hash","",1,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","import::bytes","",2,null],[11,"deref_mut","","",10,null],[11,"deref_mut","import::hash","",1,null],[11,"deref_mut","","",3,null],[11,"deref_mut","","",4,null],[11,"deref_mut","","",5,null],[11,"deref_mut","","",6,null],[11,"deref_mut","","",7,null],[11,"deref_mut","","",8,null],[11,"deref_mut","","",9,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","import::bytes","",2,null],[11,"as_mut","","",10,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","import::hash","",1,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","import::bytes","",2,null],[11,"as_ref","","",10,null],[11,"as_ref","import::hash","",1,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","import::bytes","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","import::hash","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","import::bytes","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","import::hash","",1,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","import::bytes","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","import::hash","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",3,null],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",8,null],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"take","","",3,null],[11,"reversed","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",3,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",4,null],[11,"reversed","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",5,null],[11,"reversed","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",6,null],[11,"reversed","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",6,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",7,null],[11,"reversed","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",7,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",8,null],[11,"reversed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",8,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",9,null],[11,"reversed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",9,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","import::bytes","",2,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",10,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}]],"paths":[[3,"BlkDir"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["jsonrpc_core"] = {"doc":"Transport agnostic jsonrpc library.","items":[[3,"IoHandler","jsonrpc_core","Simplified `IoHandler` with no `Metadata` associated with each request.",null,null],[3,"MetaIoHandler","","Request handler",null,null],[3,"NoopMiddleware","","No-op middleware implementation",null,null],[4,"RemoteProcedure","","Possible Remote Procedures with Metadata",null,null],[13,"Method","","A method call",0,null],[13,"Notification","","A notification",0,null],[13,"Alias","","An alias to other method,",0,null],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",null,null],[13,"V1","","Compatible only with JSON-RPC 1.x",1,null],[13,"V2","","Compatible only with JSON-RPC 2.0",1,null],[13,"Both","","Compatible with both",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compatibility"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_compatibility","","Creates new `MetaIoHandler` compatible with specified protocol version.",2,{"inputs":[{"name":"compatibility"}],"output":{"name":"self"}}],[11,"new","","Creates new `MetaIoHandler`",2,{"inputs":[{"name":"compatibility"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",2,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"add_alias","","Adds an alias to a method.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"add_method","","Adds new supported synchronous method",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_async_method","","Adds new supported asynchronous method",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification","","Adds new supported notification",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"option"}}],[11,"handle_request","","Handle given request asynchronously.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"boxfuture"}}],[11,"handle_rpc_request","","Handle deserialized RPC request.",2,{"inputs":[{"name":"self"},{"name":"request"},{"name":"t"}],"output":{"name":"futureresponse"}}],[11,"handle_call","","Handle single call asynchronously.",2,{"inputs":[{"name":"self"},{"name":"call"},{"name":"t"}],"output":{"name":"boxfuture"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"iohandler"}}],[11,"new","","Creates new `IoHandler` without any metadata.",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_compatibility","","Creates new `IoHandler` without any metadata compatible with specified protocol version.",3,{"inputs":[{"name":"compatibility"}],"output":{"name":"self"}}],[11,"handle_request","","Handle given string request asynchronously.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"boxfuture"}}],[11,"handle_rpc_request","","Handle deserialized RPC request asynchronously.",3,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"futureresponse"}}],[11,"handle_call","","Handle single Call asynchronously.",3,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"boxfuture"}}],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",2,{"inputs":[{"name":"iohandler"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"noop"}}],[11,"on_request","","",4,{"inputs":[{"name":"self"},{"name":"request"},{"name":"m"},{"name":"f"}],"output":{"name":"futureresponse"}}],[0,"types","","JSON-RPC types",null,null],[4,"Value","jsonrpc_core::types","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",5,null],[13,"Bool","","Represents a JSON boolean.",5,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",5,null],[13,"String","","Represents a JSON string.",5,null],[13,"Array","","Represents a JSON array.",5,null],[13,"Object","","Represents a JSON object.",5,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"error","","jsonrpc errors",null,null],[3,"Error","jsonrpc_core::types::error","Error object as defined in Spec",null,null],[12,"code","","Code",6,null],[12,"message","","Message",6,null],[12,"data","","Optional data",6,null],[4,"ErrorCode","","JSONRPC error code",null,null],[13,"ParseError","","Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.",7,null],[13,"InvalidRequest","","The JSON sent is not a valid Request object.",7,null],[13,"MethodNotFound","","The method does not exist / is not available.",7,null],[13,"InvalidParams","","Invalid method parameter(s).",7,null],[13,"InternalError","","Internal JSON-RPC error.",7,null],[13,"ServerError","","Reserved for implementation-defined server-errors.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"code","","Returns integer code value",7,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"description","","Returns human-readable description",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Wraps given `ErrorCode`",6,{"inputs":[{"name":"errorcode"}],"output":{"name":"self"}}],[11,"parse_error","","Creates new `ParseError`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_request","","Creates new `InvalidRequest`",6,{"inputs":[],"output":{"name":"self"}}],[11,"method_not_found","","Creates new `MethodNotFound`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_params","","Creates new `InvalidParams`",6,{"inputs":[{"name":"m"}],"output":{"name":"self"}}],[11,"internal_error","","Creates new `InternalError`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_version","","Creates new `InvalidRequest` with invalid version description",6,{"inputs":[],"output":{"name":"self"}}],[0,"id","jsonrpc_core::types","jsonrpc id field",null,null],[4,"Id","jsonrpc_core::types::id","Request Id",null,null],[13,"Null","","No id (notification)",8,null],[13,"Str","","String id",8,null],[13,"Num","","Numeric id",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"params","jsonrpc_core::types","jsonrpc params field",null,null],[4,"Params","jsonrpc_core::types::params","Request parameters",null,null],[13,"Array","","Array of values",9,null],[13,"Map","","Map of values",9,null],[13,"None","","No parameters",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"parse","","Parse incoming `Params` into expected types.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"request","jsonrpc_core::types","jsonrpc request",null,null],[3,"MethodCall","jsonrpc_core::types::request","Represents jsonrpc request which is a method call.",null,null],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",10,null],[12,"method","","A String containing the name of the method to be invoked.",10,null],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",10,null],[12,"id","","An identifier established by the Client that MUST contain a String, Number, or NULL value if included. If it is not included it is assumed to be a notification.",10,null],[3,"Notification","","Represents jsonrpc request which is a notification.",null,null],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",11,null],[12,"method","","A String containing the name of the method to be invoked.",11,null],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",11,null],[4,"Call","","Represents single jsonrpc call.",null,null],[13,"MethodCall","","Call method",12,null],[13,"Notification","","Fire notification",12,null],[13,"Invalid","","Invalid call",12,null],[4,"Request","","Represents jsonrpc request.",null,null],[13,"Single","","Single request (call)",13,null],[13,"Batch","","Batch of requests (calls)",13,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"notification"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"notification"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"from","","",12,{"inputs":[{"name":"methodcall"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"notification"}],"output":{"name":"self"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"response","jsonrpc_core::types","jsonrpc response",null,null],[3,"Success","jsonrpc_core::types::response","Successful response",null,null],[12,"jsonrpc","","Protocol version",14,null],[12,"result","","Result",14,null],[12,"id","","Correlation id",14,null],[3,"Failure","","Unsuccessful response",null,null],[12,"jsonrpc","","Protocol Version",15,null],[12,"error","","Error",15,null],[12,"id","","Correlation id",15,null],[4,"Output","","Represents output - failure or success",null,null],[13,"Success","","Success",16,null],[13,"Failure","","Failure",16,null],[4,"Response","","Synchronous response",null,null],[13,"Single","","Single response",17,null],[13,"Batch","","Response to batch request (batch of responses)",17,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"success"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"failure"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"from","","Creates new output given `Result`, `Id` and `Version`.",16,{"inputs":[{"name":"result"},{"name":"id"},{"name":"option"}],"output":{"name":"self"}}],[11,"invalid_request","","Creates new failure output indicating malformed request.",16,{"inputs":[{"name":"id"},{"name":"option"}],"output":{"name":"self"}}],[11,"deserialize","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","Creates new `Response` with given error and `Version`",17,{"inputs":[{"name":"error"},{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"failure"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"success"}],"output":{"name":"self"}}],[0,"version","jsonrpc_core::types","jsonrpc version field",null,null],[4,"Version","jsonrpc_core::types::version","Protocol Version",null,null],[13,"V2","","JSONRPC 2.0",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"FutureResponse","jsonrpc_core","Type representing middleware or RPC response before serialization.",null,null],[8,"Metadata","","Metadata trait",null,null],[8,"RpcMethodSync","","Synchronous Method",null,null],[10,"call","","Call method",19,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"result"}}],[8,"RpcMethodSimple","","Asynchronous Method",null,null],[10,"call","","Call method",20,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"boxfuture"}}],[8,"RpcMethod","","Asynchronous Method with Metadata",null,null],[10,"call","","Call method",21,{"inputs":[{"name":"self"},{"name":"params"},{"name":"t"}],"output":{"name":"boxfuture"}}],[8,"RpcNotificationSimple","","Notification",null,null],[10,"execute","","Execute notification",22,{"inputs":[{"name":"self"},{"name":"params"}],"output":null}],[8,"RpcNotification","","Notification with Metadata",null,null],[10,"execute","","Execute notification",23,{"inputs":[{"name":"self"},{"name":"params"},{"name":"t"}],"output":null}],[8,"Middleware","","RPC middleware",null,null],[10,"on_request","","Method invoked on each request. Allows you to either respond directly (without executing RPC call) or do any additional work before and/or after processing the request.",24,{"inputs":[{"name":"self"},{"name":"request"},{"name":"m"},{"name":"f"}],"output":{"name":"futureresponse"}}],[11,"get","jsonrpc_core::types","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","Convert 32-bit floating point number to `Value`",5,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","Convert 64-bit floating point number to `Value`",5,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","Convert boolean to `Value`",5,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","Convert `String` to `Value`",5,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","Convert string slice to `Value`",5,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","Convert copy-on-write string to `Value`",5,{"inputs":[{"name":"cow"}],"output":{"name":"value"}}],[11,"from","","Convert map (with string keys) to `Value`",5,{"inputs":[{"name":"map"}],"output":{"name":"value"}}],[11,"from","","Convert a `Vec` to `Value`",5,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","Convert a slice to `Value`",5,null],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"value"}}],[11,"from_iter","","Convert an iteratable type to a `Value`",5,{"inputs":[{"name":"i"}],"output":{"name":"value"}}]],"paths":[[4,"RemoteProcedure"],[4,"Compatibility"],[3,"MetaIoHandler"],[3,"IoHandler"],[3,"NoopMiddleware"],[4,"Value"],[3,"Error"],[4,"ErrorCode"],[4,"Id"],[4,"Params"],[3,"MethodCall"],[3,"Notification"],[4,"Call"],[4,"Request"],[3,"Success"],[3,"Failure"],[4,"Output"],[4,"Response"],[4,"Version"],[8,"RpcMethodSync"],[8,"RpcMethodSimple"],[8,"RpcMethod"],[8,"RpcNotificationSimple"],[8,"RpcNotification"],[8,"Middleware"]]};
searchIndex["jsonrpc_http_server"] = {"doc":"jsonrpc http server.","items":[[3,"Host","jsonrpc_http_server","Host type",null,null],[4,"DomainsValidation","","Specifies if domains should be validated.",null,null],[13,"AllowOnly","","Allow only domains on the list.",0,null],[13,"Disabled","","Disable domains validation completely.",0,null],[4,"AccessControlAllowOrigin","","Origins allowed to access",null,null],[13,"Value","","Specific hostname",1,null],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,null],[13,"Any","","Any non-null origin",1,null],[3,"Origin","","Request Origin",null,null],[0,"io","jsonrpc_http_server::tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[6,"IoFuture","jsonrpc_http_server::tokio_core::io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",2,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this I/O object may be writable.",2,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","Read in a list of buffers all at once.",2,null],[11,"write_vec","","Write a list of buffers all at once.",2,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",2,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",2,null],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[8,"Codec","","Encoding and decoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",3,null],[16,"Out","","The type of frames to be encoded.",3,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",3,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",3,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[10,"encode","","Encodes a frame into the buffer provided.",3,null],[3,"WriteHalf","","The writable half of an object returned from `Io::split`.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying `Io` object, using the `Codec` trait to encode and decode frames.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"EasyBufMut","","An RAII object returned from `get_mut` which provides mutable access to the underlying `Vec<u8>`.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"EasyBuf","","A reference counted buffer of bytes.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[0,"net","jsonrpc_http_server::tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[8,"UdpCodec","jsonrpc_http_server::tokio_core::net","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",4,null],[16,"Out","","The type of frames to be encoded.",4,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",4,null],[10,"encode","","Encodes a frame into the buffer provided.",4,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[0,"reactor","jsonrpc_http_server::tokio_core","The core reactor driving all I/O",null,null],[3,"Core","jsonrpc_http_server::tokio_core::reactor","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"PollEvented","","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[4,"CorsHeader","jsonrpc_http_server","CORS Header Result.",null,null],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",5,null],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",5,null],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",5,null],[3,"ServerHandler","","jsonrpc http request handler.",null,null],[3,"Response","","Simple server response structure",null,null],[12,"code","","Response code",6,null],[12,"content_type","","Response content type",6,null],[12,"content","","Response body",6,null],[3,"Rpc","","RPC Handler bundled with metadata extractor.",null,null],[12,"handler","","RPC Handler",7,null],[12,"extractor","","Metadata extractor",7,null],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",null,null],[3,"Server","","jsonrpc http server instance",null,null],[4,"Error","","RPC Server startup error.",null,null],[13,"Io","","IO Error",8,null],[13,"Other","","Other Error (hyper)",8,null],[4,"RequestMiddlewareAction","","Action undertaken by a middleware.",null,null],[13,"Proceed","","Proceed with standard RPC handling",9,null],[12,"should_continue_on_invalid_cors","jsonrpc_http_server::RequestMiddlewareAction","Should the request be processed even if invalid CORS headers are detected? This allows for side effects to take place.",9,null],[13,"Respond","jsonrpc_http_server","Intercept the request and respond differently.",9,null],[12,"should_validate_hosts","jsonrpc_http_server::RequestMiddlewareAction","Should standard hosts validation be performed?",9,null],[12,"handler","","hyper handler used to process the request",9,null],[5,"is_host_allowed","jsonrpc_http_server","Returns `true` if Host header in request matches a list of allowed hosts.",null,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"bool"}}],[5,"cors_header","","Returns a CORS header that should be returned with that request.",null,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"corsheader"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Create a response with empty body and 200 OK status code.",6,{"inputs":[],"output":{"name":"self"}}],[11,"ok","","Create a response with given body and 200 OK status code.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"internal_error","","Create a response for internal error.",6,{"inputs":[],"output":{"name":"self"}}],[11,"host_not_allowed","","Create a response for not allowed hosts.",6,{"inputs":[],"output":{"name":"self"}}],[11,"unsupported_content_type","","Create a response for unsupported content type.",6,{"inputs":[],"output":{"name":"self"}}],[11,"method_not_allowed","","Create a response for disallowed method used.",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_cors","","CORS invalid",6,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"name":"response"}}],[11,"new","","Create new request handler.",10,{"inputs":[{"name":"rpc"},{"name":"option"},{"name":"option"},{"name":"arc"}],"output":{"name":"self"}}],[11,"call","","",10,null],[6,"ServerResult","","Result of starting the Server.",null,null],[8,"RequestMiddleware","","Allows to intercept request and handle it differently.",null,null],[10,"on_request","","Takes a request and decides how to proceed with it.",11,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"requestmiddlewareaction"}}],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",null,null],[11,"read_metadata","","Read the metadata from the request",12,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"m"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",9,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"event_loop_remote","","Utilize existing event loop remote to poll RPC results. Applies only to 1 of the threads. Other threads will spawn their own Event Loops.",13,{"inputs":[{"name":"self"},{"name":"remote"}],"output":{"name":"self"}}],[11,"threads","","Sets number of threads of the server to run. Panics when set to `0`.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"cors","","Configures a list of allowed CORS origins.",13,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"request_middleware","","Configures request middleware",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"meta_extractor","","Configures metadata extractor",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",13,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",13,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"serverresult"}}],[11,"address","","Returns address of this server",14,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"close","","Closes the server.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Will block, waiting for the server to finish.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `Host` given hostname and port number.",15,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"host"}}],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",15,{"inputs":[{"name":"str"}],"output":{"name":"host"}}],[11,"into","jsonrpc_http_server::tokio_core::io","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"hash","","",16,null],[11,"hash","jsonrpc_http_server::tokio_core::reactor","",17,null],[11,"deref","jsonrpc_http_server::tokio_core::io","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"start_send","","",19,null],[11,"poll_complete","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_send","jsonrpc_http_server::tokio_core::net","",20,null],[11,"poll_complete","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",21,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",23,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","jsonrpc_http_server::tokio_core::io","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::net","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::reactor","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","jsonrpc_http_server::tokio_core::net","",21,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",21,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","",21,null],[11,"write_vec","","",21,null],[11,"poll_read","jsonrpc_http_server::tokio_core::reactor","",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"partial_cmp","jsonrpc_http_server::tokio_core::io","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::tokio_core::net","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::tokio_core::reactor","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::io","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::net","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::reactor","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","jsonrpc_http_server::tokio_core::io","",41,null],[11,"read","jsonrpc_http_server::tokio_core::net","",21,null],[11,"read","jsonrpc_http_server::tokio_core::reactor","",26,null],[11,"write","jsonrpc_http_server::tokio_core::io","",42,null],[11,"flush","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_http_server::tokio_core::net","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_http_server::tokio_core::reactor","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","jsonrpc_http_server::tokio_core::io","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"prepare_uninitialized_buffer","jsonrpc_http_server::tokio_core::net","",21,null],[11,"read_buf","","",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"drop","jsonrpc_http_server::tokio_core::io","",18,null],[11,"drop","jsonrpc_http_server::tokio_core::reactor","",26,null],[11,"drop","","",40,null],[11,"drop","","",25,null],[11,"as_mut","jsonrpc_http_server::tokio_core::io","",43,null],[11,"shutdown","jsonrpc_http_server::tokio_core::net","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_buf","","",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"shutdown","jsonrpc_http_server::tokio_core::reactor","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","jsonrpc_http_server::tokio_core::io","",16,{"inputs":[{"name":"self"}],"output":{"name":"easybuf"}}],[11,"clone","jsonrpc_http_server::tokio_core::reactor","",17,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"as_ref","jsonrpc_http_server::tokio_core::io","",16,null],[11,"as_ref","","",43,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_http_server::tokio_core::reactor","",17,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"cmp","jsonrpc_http_server::tokio_core::io","",16,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"ordering"}}],[11,"from","","",16,{"inputs":[{"name":"vec"}],"output":{"name":"easybuf"}}],[11,"into","jsonrpc_http_server","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",15,null],[11,"deref","","",44,null],[11,"deref","","",15,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"corsheader"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"domainsvalidation"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"from","","",44,{"inputs":[{"name":"t"}],"output":{"name":"origin"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"from","","",15,{"inputs":[{"name":"t"}],"output":{"name":"host"}}],[11,"from","","",0,{"inputs":[{"name":"option"}],"output":{"name":"domainsvalidation"}}],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",44,{"inputs":[{"name":"originprotocol"},{"name":"str"},{"name":"option"}],"output":{"name":"origin"}}],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",44,{"inputs":[{"name":"str"}],"output":{"name":"origin"}}],[11,"poll_write","jsonrpc_http_server::tokio_core::io","Calls the underlying `poll_write` function on this handling, testing to see if it's ready to be written to.",42,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to see if it's ready to be read from.",41,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"new","","Creates a new EasyBuf with no data and the default capacity.",16,{"inputs":[],"output":{"name":"easybuf"}}],[11,"with_capacity","","Creates a new EasyBuf with `cap` capacity.",16,{"inputs":[{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"len","","Returns the number of bytes contained in this `EasyBuf`.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Returns the inner contents of this `EasyBuf` as a slice.",16,null],[11,"split_off","","Splits the buffer into two at the given index.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"drain_to","","Splits the buffer into two at the given index.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"easybufmut"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",43,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",43,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",43,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",43,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"connect","jsonrpc_http_server::tokio_core::net","Create a new TCP stream connected to the specified address.",21,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",21,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",21,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",21,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",21,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",21,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",21,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",22,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",22,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",22,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",22,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",23,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",23,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",23,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",23,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",23,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",23,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",23,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",23,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",20,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",20,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","jsonrpc_http_server::tokio_core::reactor","Creates a new event loop, returning any error that happened during the creation.",27,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",27,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",27,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",27,null],[11,"id","","Get the ID of this loop",27,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",28,null],[11,"id","","Return the ID of the represented Core",28,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",29,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",29,null],[11,"spawn_fn","","Spawns a closure on this event loop.",29,null],[11,"id","","Return the ID of the represented Core",29,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",25,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",25,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",26,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",26,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",26,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",26,null],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",26,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",26,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",26,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",40,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",40,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}],[11,"map","jsonrpc_http_server","Maps `Ok` variant of `CorsHeader`.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"corsheader"}}]],"paths":[[4,"DomainsValidation"],[4,"AccessControlAllowOrigin"],[8,"Io"],[8,"Codec"],[8,"UdpCodec"],[4,"CorsHeader"],[3,"Response"],[3,"Rpc"],[4,"Error"],[4,"RequestMiddlewareAction"],[3,"ServerHandler"],[8,"RequestMiddleware"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"Server"],[3,"Host"],[3,"EasyBuf"],[3,"CoreId"],[3,"EasyBufMut"],[3,"Framed"],[3,"UdpFramed"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Incoming"],[3,"Interval"],[3,"PollEvented"],[3,"Core"],[3,"Remote"],[3,"Handle"],[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Read"],[3,"ReadUntil"],[3,"WriteAll"],[3,"TcpStreamNew"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Timeout"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"Origin"]]};
searchIndex["jsonrpc_macros"] = {"doc":"High level, typed wrapper for `jsonrpc_core`.","items":[[3,"Trailing","jsonrpc_macros","A wrapper type without an implementation of `Deserialize` which allows a special implementation of `Wrap` for functions that take a trailing default parameter.",null,null],[12,"0","","",0,null],[3,"IoDelegate","","A set of RPC methods and notifications tied to single `delegate` struct.",null,null],[5,"to_value","","Converts a serializable value into `Value`.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"new","","Creates new `IoDelegate`",1,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"add_alias","","Adds an alias to existing method. NOTE: Aliases are not transitive, i.e. you cannot create alias to an alias.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"add_method","","Adds sync method to the delegate.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_async_method","","Adds async method to the delegate.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_method_with_meta","","Adds async method with metadata to the delegate.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification","","Adds notification to the delegate.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_subscription","","Adds subscription to the delegate.",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[0,"pubsub","","PUB-SUB auto-serializing structures.",null,null],[4,"SubscriptionId","jsonrpc_macros::pubsub","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",null,null],[13,"Number","","U64 number",2,null],[13,"String","","String",2,null],[3,"Subscriber","","New PUB-SUB subcriber.",null,null],[3,"Sink","","Subscriber sink.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrap non-typed subscriber.",3,{"inputs":[{"name":"subscriber"}],"output":{"name":"self"}}],[11,"reject","","Reject subscription with given error.",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"result"}}],[11,"assign_id","","Assign id to this subscriber. This method consumes `Subscriber` and returns `Sink` if the connection is still open or error otherwise.",3,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sink"}}],[11,"notify","","Sends a notification to the subscriber.",4,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"sinkresult"}}],[11,"start_send","","",4,null],[11,"poll_complete","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[14,"metadata","jsonrpc_macros","Auto-generates an RPC trait from trait definition.",null,null],[14,"build_rpc_trait","","",null,null],[11,"parse_value","jsonrpc_macros::pubsub","Parses `core::Value` into unique subscription id.",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"subscriptionid"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}]],"paths":[[3,"Trailing"],[3,"IoDelegate"],[4,"SubscriptionId"],[3,"Subscriber"],[3,"Sink"]]};
searchIndex["jsonrpc_pubsub"] = {"doc":"Publish-Subscribe extension for JSON-RPC","items":[[3,"PubSubHandler","jsonrpc_pubsub","Publish-Subscribe extension of `IoHandler`.",null,null],[3,"Session","","RPC client session Keeps track of active subscriptions and unsubscribes from them upon dropping.",null,null],[3,"Sink","","A handle to send notifications directly to subscribed client.",null,null],[3,"Subscriber","","Represents a subscribing client. Subscription handlers can either reject this subscription request or assign an unique id.",null,null],[4,"SubscriptionId","","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",null,null],[13,"Number","","U64 number",0,null],[13,"String","","String",0,null],[5,"new_subscription","","Creates new subscribe and unsubscribe RPC methods",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new `PubSubHandler`",1,{"inputs":[{"name":"metaiohandler"}],"output":{"name":"self"}}],[11,"add_subscription","","Adds new subscription.",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metaiohandler"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new session given transport raw send capabilities. Session should be created as part of metadata, `sender` should be returned by transport.",2,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"sender","","Returns transport write stream",2,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"on_drop","","Adds a function to call when session is dropped.",2,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sink"}}],[11,"notify","","Sends a notification to a client.",3,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"sinkresult"}}],[11,"start_send","","",3,null],[11,"poll_complete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assign_id","","Consumes `Subscriber` and assigns unique id to a requestor. Returns `Err` if request has already terminated.",4,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"result"}}],[11,"reject","","Rejects this subscription request with given error. Returns `Err` if request has already terminated.",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"subscriptionid"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"parse_value","","Parses `core::Value` into unique subscription id.",0,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[6,"TransportError","","Raw transport error.",null,null],[6,"SinkResult","","Subscription send result.",null,null],[8,"SubscribeRpcMethod","","Subscribe handler",null,null],[10,"call","","Called when client is requesting new subscription to be started.",5,{"inputs":[{"name":"self"},{"name":"params"},{"name":"m"},{"name":"subscriber"}],"output":null}],[8,"UnsubscribeRpcMethod","","Unsubscribe handler",null,null],[10,"call","","Called when client is requesting to cancel existing subscription.",6,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"boxfuture"}}],[8,"PubSubMetadata","","Metadata extension for pub-sub method handling.",null,null],[10,"session","","Returns session object associated with given request/client. `None` indicates that sessions are not supported on the used transport.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"SubscriptionId"],[3,"PubSubHandler"],[3,"Session"],[3,"Sink"],[3,"Subscriber"],[8,"SubscribeRpcMethod"],[8,"UnsubscribeRpcMethod"],[8,"PubSubMetadata"]]};
searchIndex["jsonrpc_server_utils"] = {"doc":"JSON-RPC servers utilities.","items":[[0,"cors","jsonrpc_server_utils","CORS handling utility functions",null,null],[3,"Origin","jsonrpc_server_utils::cors","Request Origin",null,null],[4,"OriginProtocol","","Origin Protocol",null,null],[13,"Http","","Http protocol",0,null],[13,"Https","","Https protocol",0,null],[13,"Custom","","Custom protocol",0,null],[4,"AccessControlAllowOrigin","","Origins allowed to access",null,null],[13,"Value","","Specific hostname",1,null],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,null],[13,"Any","","Any non-null origin",1,null],[4,"CorsHeader","","CORS Header Result.",null,null],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",2,null],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",2,null],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",2,null],[5,"get_cors_header","","Returns correct CORS header (if any) given list of allowed origins and current origin.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"corsheader"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"originprotocol"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",3,{"inputs":[{"name":"originprotocol"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deref","","",3,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"corsheader"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"map","","Maps `Ok` variant of `CorsHeader`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"corsheader"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hosts","jsonrpc_server_utils","Host header validation.",null,null],[3,"Host","jsonrpc_server_utils::hosts","Host type",null,null],[4,"DomainsValidation","","Specifies if domains should be validated.",null,null],[13,"AllowOnly","","Allow only domains on the list.",4,null],[13,"Disabled","","Disable domains validation completely.",4,null],[5,"is_host_valid","","Returns `true` when `Host` header is whitelisted in `allowed_hosts`.",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[5,"update","","Updates given list of hosts with the address.",null,{"inputs":[{"name":"option"},{"name":"socketaddr"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `Host` given hostname and port number.",5,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deref","","",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"domainsvalidation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[0,"reactor","jsonrpc_server_utils","Event Loop Remote Either spawns a new event loop, or re-uses provided one.",null,null],[3,"RpcEventLoop","jsonrpc_server_utils::reactor","A handle to running event loop. Dropping the handle will cause event loop to finish.",null,null],[4,"UninitializedRemote","","Possibly uninitialized event loop remote.",null,null],[13,"Shared","","Shared instance of remote.",6,null],[13,"Unspawned","","Event Loop should be spawned by the transport.",6,null],[4,"Remote","","Initialized Remote",null,null],[13,"Shared","","Shared instance",7,null],[13,"Spawned","","Spawned Event Loop",7,null],[11,"initialize","","Initializes remote. In case there is no shared remote, will spawn a new event loop. Dropping `Remote` closes the loop.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"init_with_name","","Initializes remote. In case there is no shared remote, will spawn a new event loop. Dropping `Remote` closes the loop.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"remote","","Get remote associated with this event loop.",7,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"close","","Closes underlying event loop (if any!).",7,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Wait for underlying event loop to finish (if any!).",7,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"spawn","","Spawns a new thread with the `EventLoop`.",8,{"inputs":[],"output":{"name":"result"}}],[11,"with_name","","Spawns a new named thread with the `EventLoop`.",8,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"remote","","Get remote for this event loop.",8,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"wait","","Blocks current thread and waits until the event loop is finished.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Finishes this event loop.",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"CorsHeader"],[3,"Origin"],[4,"DomainsValidation"],[3,"Host"],[4,"UninitializedRemote"],[4,"Remote"],[3,"RpcEventLoop"]]};
searchIndex["keys"] = {"doc":"Bitcoin keys.","items":[[0,"hex","keys","Hex binary-to-text encoding",null,null],[8,"ToHex","keys::hex","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",2,null],[13,"InvalidHexLength","","The input had an invalid length",2,null],[0,"hash","keys","Fixed-size hashes",null,null],[3,"H32","keys::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","keys","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","keys::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[3,"Address","keys","`AddressHash` with network identifier and format type",null,null],[12,"kind","","The type of the address.",3,null],[12,"network","","The network of the address.",3,null],[12,"hash","","Public key hash.",3,null],[3,"KeyPair","","",null,null],[3,"Private","","Secret with additional network identifier and format type",null,null],[12,"network","","The network on which this key should be used.",4,null],[12,"secret","","ECDSA key.",4,null],[12,"compressed","","True if this private key represents a compressed address.",4,null],[3,"Signature","","",null,null],[3,"CompactSignature","","",null,null],[3,"SECP256K1","","",null,null],[4,"Type","","There are two address formats currently in use. https://bitcoin.org/en/developer-reference#address-conversion",null,null],[13,"P2PKH","","Pay to PubKey Hash Common P2PKH which begin with the number 1, eg: 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2. https://bitcoin.org/en/glossary/p2pkh-address",5,null],[13,"P2SH","","Pay to Script Hash Newer P2SH type starting with the number 3, eg: 3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy. https://bitcoin.org/en/glossary/p2sh-address",5,null],[4,"Error","","",null,null],[13,"InvalidPublic","","",6,null],[13,"InvalidSecret","","",6,null],[13,"InvalidMessage","","",6,null],[13,"InvalidSignature","","",6,null],[13,"InvalidNetwork","","",6,null],[13,"InvalidChecksum","","",6,null],[13,"InvalidPrivate","","",6,null],[13,"InvalidAddress","","",6,null],[13,"FailedKeyGeneration","","",6,null],[4,"Public","","Secret public key",null,null],[13,"Normal","","Normal version of public key",7,null],[13,"Compressed","","Compressed version of public key",7,null],[4,"Network","","",null,null],[13,"Mainnet","","",8,null],[13,"Testnet","","",8,null],[0,"generator","","",null,null],[3,"Random","keys::generator","",null,null],[8,"Generator","","",null,null],[10,"generate","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"network"}],"output":{"name":"self"}}],[11,"generate","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","keys","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"layout","","",3,null],[11,"from_layout","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"private","","",11,{"inputs":[{"name":"self"}],"output":{"name":"private"}}],[11,"public","","",11,{"inputs":[{"name":"self"}],"output":{"name":"public"}}],[11,"from_private","","",11,{"inputs":[{"name":"private"}],"output":{"name":"result"}}],[11,"from_keypair","","",11,{"inputs":[{"name":"secretkey"},{"name":"publickey"},{"name":"network"}],"output":{"name":"self"}}],[11,"address","","",11,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"secperror"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"network"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"network"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"private"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"private"}],"output":{"name":"bool"}}],[11,"sign","","",4,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"result"}}],[11,"sign_compact","","",4,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"result"}}],[11,"layout","","",4,null],[11,"from_layout","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_slice","","",7,null],[11,"address_hash","","",7,{"inputs":[{"name":"self"}],"output":{"name":"addresshash"}}],[11,"verify","","",7,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"}],"output":{"name":"result"}}],[11,"recover_compact","","",7,{"inputs":[{"name":"message"},{"name":"compactsignature"}],"output":{"name":"result"}}],[11,"deref","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",12,null],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"check_low_s","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",12,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"compactsignature"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"compactsignature"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",13,null],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"h520"}],"output":{"name":"self"}}],[6,"AddressHash","","20 bytes long hash derived from public `ripemd160(sha256(public))`",null,null],[6,"Secret","","32 bytes long secret key",null,null],[6,"Message","","32 bytes long signable message",null,null],[8,"DisplayLayout","","",null,null],[16,"Target","","",14,null],[10,"layout","","",14,null],[10,"from_layout","","",14,null],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"secp256k1"}}],[11,"initialize","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"description","keys::hex","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"hash","keys::bytes","",16,null],[11,"hash","keys::hash","",17,null],[11,"hash","","",18,null],[11,"hash","","",19,null],[11,"hash","","",20,null],[11,"hash","","",21,null],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"hash","","",24,null],[11,"deref","keys::bytes","",16,null],[11,"deref","","",25,null],[11,"deref","keys::hash","",17,null],[11,"deref","","",18,null],[11,"deref","","",19,null],[11,"deref","","",20,null],[11,"deref","","",21,null],[11,"deref","","",22,null],[11,"deref","","",23,null],[11,"deref","","",24,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","keys::bytes","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","keys::hash","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","keys::bytes","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","keys::hash","",17,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","keys::bytes","",16,null],[11,"deref_mut","","",25,null],[11,"deref_mut","keys::hash","",17,null],[11,"deref_mut","","",18,null],[11,"deref_mut","","",19,null],[11,"deref_mut","","",20,null],[11,"deref_mut","","",21,null],[11,"deref_mut","","",22,null],[11,"deref_mut","","",23,null],[11,"deref_mut","","",24,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","keys::bytes","",16,null],[11,"as_mut","","",25,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","keys::hash","",17,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","keys::bytes","",16,null],[11,"as_ref","","",25,null],[11,"as_ref","keys::hash","",17,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","keys::bytes","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","keys::hash","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","keys::bytes","",16,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","keys::hash","",17,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","keys::bytes","",16,null],[11,"from","","",16,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","keys::hash","",17,null],[11,"from","","",17,null],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",18,null],[11,"from","","",18,null],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",20,null],[11,"from","","",20,null],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",21,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",22,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",23,null],[11,"from","","",23,null],[11,"from","","",23,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",23,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",24,null],[11,"from","","",24,null],[11,"from","","",24,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",24,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"take","","",17,null],[11,"reversed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",17,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",18,null],[11,"reversed","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",18,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",19,null],[11,"reversed","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",19,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",20,null],[11,"reversed","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",20,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",21,null],[11,"reversed","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",21,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",22,null],[11,"reversed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",22,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",23,null],[11,"reversed","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",23,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",24,null],[11,"reversed","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",24,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","keys::bytes","",16,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",25,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}]],"paths":[[8,"ToHex"],[8,"FromHex"],[4,"FromHexError"],[3,"Address"],[3,"Private"],[4,"Type"],[4,"Error"],[4,"Public"],[4,"Network"],[8,"Generator"],[3,"Random"],[3,"KeyPair"],[3,"Signature"],[3,"CompactSignature"],[8,"DisplayLayout"],[3,"SECP256K1"],[3,"Bytes"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["logs"] = {"doc":"","items":[[3,"DateLogFormatter","logs","",null,null],[3,"DateAndColorLogFormatter","","",null,null],[5,"init","","",null,{"inputs":[{"name":"str"},{"name":"t"}],"output":null}],[8,"LogFormatter","","",null,null],[10,"format","","",0,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":{"name":"string"}}],[11,"format","","",1,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":{"name":"string"}}],[11,"format","","",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":{"name":"string"}}]],"paths":[[8,"LogFormatter"],[3,"DateLogFormatter"],[3,"DateAndColorLogFormatter"]]};
searchIndex["lru_cache"] = {"doc":"A cache that holds a limited number of key-value pairs. When the capacity of the cache is exceeded, the least-recently-used (where \"used\" means a look-up or putting the pair into the cache) pair is automatically removed.","items":[[3,"LruCache","lru_cache","An LRU cache.",null,null],[3,"IntoIter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"Iter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"IterMut","","An iterator over a cache's key-value pairs in least- to most-recently-used order with mutable references to the values.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucache"}}],[11,"new","","Creates an empty cache that can hold at most `capacity` items.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty cache that can hold at most `capacity` items with the given hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the given key in the cache, if any.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes the given key from the cache and returns its corresponding value.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the cache can hold.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_capacity","","Sets the number of key-value pairs the cache can hold. Removes least-recently-used key-value pairs if necessary.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_lru","","Removes and returns the least recently used key-value pair as a tuple.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the cache contains no key-value pairs.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all key-value pairs from the cache.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order, with mutable references to the values.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LruCache"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_matches_tt_as_expr_hack","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null],[14,"assert_matches","","",null,null],[14,"debug_assert_matches","","",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["message"] = {"doc":"","items":[[0,"hash","message","Fixed-size hashes",null,null],[3,"H32","message::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","message","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","message::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[3,"Command","message","",null,null],[3,"Services","","",null,null],[3,"Message","","",null,null],[3,"MessageHeader","","",null,null],[12,"magic","","",0,null],[12,"command","","",0,null],[12,"len","","",0,null],[12,"checksum","","",0,null],[4,"Error","","",null,null],[13,"Deserialize","","Deserialization failed.",1,null],[13,"InvalidCommand","","Command has wrong format or is unsupported.",1,null],[13,"InvalidMagic","","Network magic comes from different network.",1,null],[13,"InvalidChecksum","","Invalid checksum.",1,null],[13,"InvalidVersion","","Invalid version.",1,null],[5,"to_raw_message","","",null,{"inputs":[{"name":"magic"},{"name":"command"},{"name":"bytes"}],"output":{"name":"bytes"}}],[5,"serialize_payload","","",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"messageresult"}}],[5,"deserialize_payload","","",null,null],[0,"common","","",null,null],[3,"NetAddress","message::common","",null,null],[12,"services","","",2,null],[12,"address","","",2,null],[12,"port","","",2,null],[3,"BlockHeaderAndIDs","","",null,null],[12,"header","","",3,null],[12,"nonce","","",3,null],[12,"short_ids","","",3,null],[12,"prefilled_transactions","","",3,null],[3,"BlockTransactions","","",null,null],[12,"blockhash","","",4,null],[12,"transactions","","",4,null],[3,"BlockTransactionsRequest","","",null,null],[12,"blockhash","","",5,null],[12,"indexes","","",5,null],[3,"Command","","",null,null],[3,"InventoryVector","","",null,null],[12,"inv_type","","",6,null],[12,"hash","","",6,null],[3,"IpAddress","","",null,null],[3,"Port","","",null,null],[3,"PrefilledTransaction","","",null,null],[12,"index","","",7,null],[12,"transaction","","",7,null],[3,"Services","","",null,null],[4,"InventoryType","","",null,null],[13,"Error","","",8,null],[13,"MessageTx","","",8,null],[13,"MessageBlock","","",8,null],[13,"MessageFilteredBlock","","",8,null],[13,"MessageCompactBlock","","",8,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"netaddress"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"netaddress"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"netaddress"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"netaddress"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",2,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"blockheaderandids"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"blockheaderandids"}],"output":{"name":"bool"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",3,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"blocktransactions"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"blocktransactions"}],"output":{"name":"bool"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",4,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"blocktransactionsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"blocktransactionsrequest"}],"output":{"name":"bool"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","message","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"hash","","",9,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",9,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","message::common","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"inventorytype"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"inventorytype"}}],[11,"from_u32","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",8,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"inventoryvector"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"inventoryvector"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"inventoryvector"}}],[11,"tx","","",6,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"block","","",6,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",6,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ipaddress"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ipaddress"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ipaddress"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"ipaddr"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",10,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"port"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"port"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"port"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"port"}}],[11,"from","","",11,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"prefilledtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"prefilledtransaction"}],"output":{"name":"bool"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",7,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","message","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"services"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"services"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"services"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"services"}}],[11,"from","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"network","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_network","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"getutxo","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_getutxo","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"bloom","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_bloom","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"witness","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_witness","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"xthin","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_xthin","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"includes","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",12,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"magic"},{"name":"u32"},{"name":"t"}],"output":{"name":"messageresult"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",13,null],[11,"from","message::bytes","",14,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"fmt","message","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"messageheader"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"messageheader"}],"output":{"name":"bool"}}],[11,"for_data","","",0,null],[11,"deserialize","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[0,"types","","",null,null],[3,"Block","message::types","",null,null],[12,"block","","",15,null],[3,"BlockTxn","","",null,null],[12,"request","","",16,null],[3,"CompactBlock","","",null,null],[12,"header","","",17,null],[3,"FeeFilter","","",null,null],[12,"fee_rate","","",18,null],[3,"FilterLoad","","",null,null],[12,"filter","","",19,null],[12,"hash_functions","","",19,null],[12,"tweak","","",19,null],[12,"flags","","",19,null],[3,"FilterClear","","",null,null],[3,"FilterAdd","","",null,null],[12,"data","","",20,null],[3,"GetAddr","","",null,null],[3,"GetBlocks","","",null,null],[12,"version","","",21,null],[12,"block_locator_hashes","","",21,null],[12,"hash_stop","","",21,null],[3,"GetBlockTxn","","",null,null],[12,"request","","",22,null],[3,"GetData","","",null,null],[12,"inventory","","",23,null],[3,"GetHeaders","","",null,null],[12,"version","","",24,null],[12,"block_locator_hashes","","",24,null],[12,"hash_stop","","",24,null],[3,"Headers","","",null,null],[12,"headers","","",25,null],[3,"Inv","","",null,null],[12,"inventory","","",26,null],[3,"MemPool","","",null,null],[3,"MerkleBlock","","",null,null],[12,"block_header","","",27,null],[12,"total_transactions","","",27,null],[12,"hashes","","",27,null],[12,"flags","","",27,null],[3,"NotFound","","",null,null],[12,"inventory","","",28,null],[3,"Ping","","",null,null],[12,"nonce","","",29,null],[3,"Pong","","",null,null],[12,"nonce","","",30,null],[3,"SendCompact","","",null,null],[12,"first","","",31,null],[12,"second","","",31,null],[3,"SendHeaders","","",null,null],[3,"Tx","","",null,null],[12,"transaction","","",32,null],[3,"Verack","","",null,null],[4,"FilterFlags","","Controls how the filter is updated after match is found.",null,null],[13,"None","","Means the filter is not adjusted when a match is found.",33,null],[13,"All","","Means if the filter matches any data element in a scriptPubKey the outpoint is serialized and inserted into the filter.",33,null],[13,"PubKeyOnly","","Means the outpoint is inserted into the filter only if a data element in the scriptPubKey is matched, and that script is of the standard \"pay to pubkey\" or \"pay to multisig\" forms.",33,null],[0,"addr","","",null,null],[3,"AddressEntry","message::types::addr","",null,null],[12,"timestamp","","",34,null],[12,"address","","",34,null],[3,"V31402","","",null,null],[12,"addresses","","",35,null],[3,"V0","","",null,null],[12,"addresses","","",36,null],[4,"Addr","","",null,null],[13,"V0","","",37,null],[13,"V31402","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"addr"}],"output":{"name":"bool"}}],[11,"new","","",37,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",37,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",37,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"addressentry"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"addressentry"}],"output":{"name":"bool"}}],[11,"serialize","","",34,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",34,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"v31402"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"v31402"}],"output":{"name":"bool"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",35,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"v0"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"v0"}],"output":{"name":"bool"}}],[11,"serialize","","",36,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","message::types","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"with_block","","",15,{"inputs":[{"name":"chainblock"}],"output":{"name":"self"}}],[11,"version","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",15,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",15,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"blocktxn"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"blocktxn"}],"output":{"name":"bool"}}],[11,"version","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",16,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",16,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"compactblock"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"compactblock"}],"output":{"name":"bool"}}],[11,"version","","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",17,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",17,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"feefilter"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"feefilter"}],"output":{"name":"bool"}}],[11,"with_fee_rate","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"version","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",18,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",18,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"filteradd"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"filteradd"}],"output":{"name":"bool"}}],[11,"version","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",20,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",20,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"filterclear"}],"output":{"name":"bool"}}],[11,"version","","",38,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",38,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",38,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"filterflags"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"filterflags"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"filterload"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"filterload"}],"output":{"name":"bool"}}],[11,"version","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",19,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",19,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"from_u8","","",33,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"serialize","","",33,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",33,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"getaddr"}],"output":{"name":"bool"}}],[11,"version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",39,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",39,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"getblocks"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"getblocks"}],"output":{"name":"bool"}}],[11,"version","","",21,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",21,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",21,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"getblocktxn"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"getblocktxn"}],"output":{"name":"bool"}}],[11,"version","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",22,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",22,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"getdata"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"getdata"}],"output":{"name":"bool"}}],[11,"with_inventory","","",23,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",23,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",23,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"getheaders"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"getheaders"}],"output":{"name":"bool"}}],[11,"with_block_locator_hashes","","",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",24,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",24,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",24,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"with_headers","","",25,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",25,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",25,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"inv"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"inv"}],"output":{"name":"bool"}}],[11,"with_inventory","","",26,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",26,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",26,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"mempool"}],"output":{"name":"bool"}}],[11,"version","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",40,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",40,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"merkleblock"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"merkleblock"}],"output":{"name":"bool"}}],[11,"version","","",27,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",27,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",27,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"notfound"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"notfound"}],"output":{"name":"bool"}}],[11,"with_inventory","","",28,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"version","","",28,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",28,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",28,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ping"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ping"}],"output":{"name":"bool"}}],[11,"new","","",29,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"version","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",29,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",29,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"pong"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"pong"}],"output":{"name":"bool"}}],[11,"new","","",30,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"version","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",30,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",30,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[0,"reject","","",null,null],[3,"Reject","message::types::reject","",null,null],[12,"message","","",41,null],[12,"code","","",41,null],[12,"reason","","",41,null],[4,"RejectCode","","",null,null],[13,"Malformed","","",42,null],[13,"Invalid","","",42,null],[13,"Obsolate","","",42,null],[13,"Duplicate","","",42,null],[13,"Nonstandard","","",42,null],[13,"Dust","","",42,null],[13,"InsuficientFee","","",42,null],[13,"Checkpoint","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"rejectcode"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"rejectcode"}}],[11,"from_u8","","",42,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"serialize","","",42,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",42,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"reject"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"reject"}],"output":{"name":"bool"}}],[11,"version","","",41,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",41,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",41,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","message::types","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"sendcompact"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"sendcompact"}],"output":{"name":"bool"}}],[11,"version","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",31,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",31,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"sendheaders"}],"output":{"name":"bool"}}],[11,"version","","",43,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",43,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",43,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"tx"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"tx"}],"output":{"name":"bool"}}],[11,"with_transaction","","",32,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"version","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",32,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",32,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"verack"}],"output":{"name":"bool"}}],[11,"version","","",44,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",44,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",44,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[0,"version","","",null,null],[3,"V0","message::types::version","",null,null],[12,"version","","",45,null],[12,"services","","",45,null],[12,"timestamp","","",45,null],[12,"receiver","","",45,null],[3,"V106","","",null,null],[12,"from","","",46,null],[12,"nonce","","",46,null],[12,"user_agent","","",46,null],[12,"start_height","","",46,null],[3,"V70001","","",null,null],[12,"relay","","",47,null],[4,"Version","","",null,null],[13,"V0","","",48,null],[13,"V106","","",48,null],[13,"V70001","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"version"}}],[11,"version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"command","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"deserialize_payload","","",48,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"serialize_payload","","",48,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"version","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"services","","",48,{"inputs":[{"name":"self"}],"output":{"name":"services"}}],[11,"relay_transactions","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"v0"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"v0"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"v0"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"v0"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"v106"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"v106"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"v106"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"v70001"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"v70001"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"v70001"}}],[11,"serialize","","",45,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",45,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",46,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",46,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",47,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",47,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","","",48,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[17,"FILTERLOAD_MAX_FILTER_LEN","message::types","",null,null],[17,"FILTERLOAD_MAX_HASH_FUNCS","","",null,null],[17,"FILTERADD_MAX_DATA_LEN","","",null,null],[17,"GETBLOCKS_MAX_RESPONSE_HASHES","","",null,null],[17,"GETDATA_MAX_INVENTORY_LEN","","",null,null],[17,"GETHEADERS_MAX_RESPONSE_HEADERS","","",null,null],[17,"HEADERS_MAX_HEADERS_LEN","","",null,null],[17,"INV_MAX_INVENTORY_LEN","","",null,null],[11,"fmt","message","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"readererror"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"MessageResult","","",null,null],[8,"Payload","","",null,null],[10,"version","","",49,{"inputs":[],"output":{"name":"u32"}}],[10,"command","","",49,{"inputs":[],"output":{"name":"str"}}],[10,"deserialize_payload","","",49,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"messageresult"}}],[10,"serialize_payload","","",49,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"u32"}],"output":{"name":"messageresult"}}],[11,"take","message::hash","",50,null],[11,"reversed","","",50,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",50,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","message::bytes","",14,null],[11,"hash","message::hash","",50,null],[11,"hash","","",51,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","","",57,null],[11,"deref","message::bytes","",14,null],[11,"deref","","",58,null],[11,"deref","message::hash","",50,null],[11,"deref","","",51,null],[11,"deref","","",52,null],[11,"deref","","",53,null],[11,"deref","","",54,null],[11,"deref","","",55,null],[11,"deref","","",56,null],[11,"deref","","",57,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","message::bytes","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","message::hash","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","message::bytes","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","message::hash","",50,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","message::bytes","",14,null],[11,"deref_mut","","",58,null],[11,"deref_mut","message::hash","",50,null],[11,"deref_mut","","",51,null],[11,"deref_mut","","",52,null],[11,"deref_mut","","",53,null],[11,"deref_mut","","",54,null],[11,"deref_mut","","",55,null],[11,"deref_mut","","",56,null],[11,"deref_mut","","",57,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","message::bytes","",14,null],[11,"as_mut","","",58,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","message::hash","",50,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","message::bytes","",14,null],[11,"as_ref","","",58,null],[11,"as_ref","message::hash","",50,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","message::bytes","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","message::hash","",50,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",54,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",56,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","message::bytes","",14,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","message::hash","",50,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","message::bytes","",14,null],[11,"from","","",14,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","message::hash","",50,null],[11,"from","","",50,null],[11,"from","","",50,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",50,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",51,null],[11,"from","","",51,null],[11,"from","","",51,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",51,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",52,null],[11,"from","","",52,null],[11,"from","","",52,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",52,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",53,null],[11,"from","","",53,null],[11,"from","","",53,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",53,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",54,null],[11,"from","","",54,null],[11,"from","","",54,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",54,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",55,null],[11,"from","","",55,null],[11,"from","","",55,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",55,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",56,null],[11,"from","","",56,null],[11,"from","","",56,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",56,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",57,null],[11,"from","","",57,null],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",57,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","message::bytes","",14,null],[11,"serialized_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","message::hash","",50,null],[11,"serialized_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",51,null],[11,"serialized_size","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",52,null],[11,"serialized_size","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",53,null],[11,"serialized_size","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",54,null],[11,"serialized_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",55,null],[11,"serialized_size","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",56,null],[11,"serialized_size","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",57,null],[11,"serialized_size","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","message::bytes","",14,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","message::hash","",50,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",51,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",52,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",53,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",56,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"take","","",51,null],[11,"reversed","","",51,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",51,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",52,null],[11,"reversed","","",52,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",52,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",53,null],[11,"reversed","","",53,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",53,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",54,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",54,null],[11,"reversed","","",54,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",54,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",55,null],[11,"reversed","","",55,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",55,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",56,null],[11,"reversed","","",56,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",56,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",57,null],[11,"reversed","","",57,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",57,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","message::bytes","",14,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",58,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}]],"paths":[[3,"MessageHeader"],[4,"Error"],[3,"NetAddress"],[3,"BlockHeaderAndIDs"],[3,"BlockTransactions"],[3,"BlockTransactionsRequest"],[3,"InventoryVector"],[3,"PrefilledTransaction"],[4,"InventoryType"],[3,"Command"],[3,"IpAddress"],[3,"Port"],[3,"Services"],[3,"Message"],[3,"Bytes"],[3,"Block"],[3,"BlockTxn"],[3,"CompactBlock"],[3,"FeeFilter"],[3,"FilterLoad"],[3,"FilterAdd"],[3,"GetBlocks"],[3,"GetBlockTxn"],[3,"GetData"],[3,"GetHeaders"],[3,"Headers"],[3,"Inv"],[3,"MerkleBlock"],[3,"NotFound"],[3,"Ping"],[3,"Pong"],[3,"SendCompact"],[3,"Tx"],[4,"FilterFlags"],[3,"AddressEntry"],[3,"V31402"],[3,"V0"],[4,"Addr"],[3,"FilterClear"],[3,"GetAddr"],[3,"MemPool"],[3,"Reject"],[4,"RejectCode"],[3,"SendHeaders"],[3,"Verack"],[3,"V0"],[3,"V106"],[3,"V70001"],[4,"Version"],[8,"Payload"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[4,"TopLevel","","",null,null],[13,"Star","","",1,null],[13,"Text","","",1,null],[13,"Image","","",1,null],[13,"Audio","","",1,null],[13,"Video","","",1,null],[13,"Application","","",1,null],[13,"Multipart","","",1,null],[13,"Message","","",1,null],[13,"Model","","",1,null],[13,"Ext","","",1,null],[4,"SubLevel","","",null,null],[13,"Star","","",2,null],[13,"Plain","","",2,null],[13,"Html","","",2,null],[13,"Xml","","",2,null],[13,"Javascript","","",2,null],[13,"Css","","",2,null],[13,"EventStream","","",2,null],[13,"Json","","",2,null],[13,"WwwFormUrlEncoded","","",2,null],[13,"Msgpack","","",2,null],[13,"OctetStream","","",2,null],[13,"FormData","","",2,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Bmp","","",2,null],[13,"Jpeg","","",2,null],[13,"Mpeg","","",2,null],[13,"Mp4","","",2,null],[13,"Ogg","","",2,null],[13,"Ext","","",2,null],[4,"Attr","","",null,null],[13,"Charset","","",3,null],[13,"Boundary","","",3,null],[13,"Q","","",3,null],[13,"Ext","","",3,null],[4,"Value","","",null,null],[13,"Utf8","","",4,null],[13,"Ext","","",4,null],[6,"Param","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"toplevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sublevel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["miner"] = {"doc":"","items":[[3,"BlockAssembler","miner","Block assembler",null,null],[12,"max_block_size","","",0,null],[12,"max_block_sigops","","",0,null],[3,"BlockTemplate","","Block template as described in BIP0022",null,null],[12,"version","","Version",1,null],[12,"previous_header_hash","","The hash of previous block",1,null],[12,"time","","The current time as seen by the server",1,null],[12,"bits","","The compressed difficulty",1,null],[12,"height","","Block height",1,null],[12,"transactions","","Block transactions (excluding coinbase)",1,null],[12,"coinbase_value","","Total funds available for the coinbase (in Satoshis)",1,null],[12,"size_limit","","Number of bytes allowed in the block",1,null],[12,"sigop_limit","","Number of sigops allowed in the block",1,null],[3,"MemoryPool","","Transactions memory pool",null,null],[3,"HashedOutPoint","","",null,null],[3,"MemoryPoolInformation","","Information on current `MemoryPool` state",null,null],[12,"transactions_count","","Number of transactions currently in the `MemoryPool`",2,null],[12,"transactions_size_in_bytes","","Total number of bytes occupied by transactions from the `MemoryPool`",2,null],[3,"NonFinalDoubleSpendSet","","Set of transaction outputs, which can be replaced if newer transaction replaces non-final transaction in memory pool",null,null],[12,"double_spends","","Double-spend outputs (outputs of newer transaction, which are also spent by nonfinal transactions of mempool)",3,null],[12,"dependent_spends","","Outputs which also will be removed from memory pool in case of newer transaction insertion (i.e. outputs of nonfinal transactions && their descendants)",3,null],[4,"MemoryPoolOrderingStrategy","","Transactions ordering strategy",null,null],[13,"ByTimestamp","","Order transactions by the time they have entered the memory pool",4,null],[13,"ByTransactionScore","","Order transactions by their individual mining score",4,null],[13,"ByPackageScore","","Order transactions by their in-pool package mining score (score for mining this transaction + all descendants transactions)",4,null],[4,"DoubleSpendCheckResult","","Result of checking double spend with",null,null],[13,"NoDoubleSpend","","No double spend",5,null],[13,"DoubleSpend","","Input {self.1, self.2} of new transaction is already spent in previous final memory-pool transaction {self.0}",5,null],[13,"NonFinalDoubleSpend","","Some inputs of new transaction are already spent by non-final memory-pool transactions",5,null],[5,"find_solution","","Simple bitcoin cpu miner.",null,{"inputs":[{"name":"blocktemplate"},{"name":"t"},{"name":"u256"}],"output":{"name":"option"}}],[5,"transaction_fee","","",null,{"inputs":[{"name":"transactionprovider"},{"name":"transaction"}],"output":{"name":"u64"}}],[5,"transaction_fee_rate","","",null,{"inputs":[{"name":"transactionprovider"},{"name":"transaction"}],"output":{"name":"u64"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"create_new_block","","",0,{"inputs":[{"name":"self"},{"name":"sharedstore"},{"name":"memorypool"},{"name":"u32"},{"name":"magic"}],"output":{"name":"blocktemplate"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"orderingstrategy"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"hashedoutpoint"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"hashedoutpoint"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hashedoutpoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"doublespendcheckresult"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"doublespendcheckresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"nonfinaldoublespendset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"nonfinaldoublespendset"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"outpoint"}],"output":{"name":"self"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new memory pool",6,{"inputs":[],"output":{"name":"self"}}],[11,"insert_verified","","Insert verified transaction to the `MemoryPool`",6,{"inputs":[{"name":"self"},{"name":"indexedtransaction"}],"output":null}],[11,"iter","","Iterator over memory pool transactions according to specified strategy",6,{"inputs":[{"name":"self"},{"name":"orderingstrategy"}],"output":{"name":"memorypooliterator"}}],[11,"remove_by_hash","","Removes single transaction by its hash. All descedants remain in the pool.",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"check_double_spend","","Checks if `transaction` spends some outputs, already spent by inpool transactions.",6,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"doublespendcheckresult"}}],[11,"remove_by_prevout","","Removes transaction (and all its descendants) which has spent given output",6,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"option"}}],[11,"read_by_hash","","Reads single transaction by its hash.",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"read_with_strategy","","Reads hash of the 'top' transaction from the `MemoryPool` using selected strategy. Ancestors are always returned before descendant transactions.",6,{"inputs":[{"name":"self"},{"name":"orderingstrategy"}],"output":{"name":"option"}}],[11,"read_n_with_strategy","","Reads hashes of up to n transactions from the `MemoryPool`, using selected strategy. Ancestors are always returned before descendant transactions. Use this function with care, only if really needed (heavy memory usage)",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"orderingstrategy"}],"output":{"name":"vec"}}],[11,"remove_with_strategy","","Removes the 'top' transaction from the `MemoryPool` using selected strategy. Ancestors are always removed before descendant transactions.",6,{"inputs":[{"name":"self"},{"name":"orderingstrategy"}],"output":{"name":"option"}}],[11,"remove_n_with_strategy","","Removes up to n transactions from the `MemoryPool`, using selected strategy. Ancestors are always removed before descendant transactions.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"orderingstrategy"}],"output":{"name":"vec"}}],[11,"set_virtual_fee","","Set miner virtual fee for transaction",6,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"i64"}],"output":null}],[11,"get","","Get transaction by hash",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"contains","","Checks if transaction is in the mempool",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"information","","Returns information on `MemoryPool` (as in GetMemPoolInfo RPC) https://bitcoin.org/en/developer-reference#getmempoolinfo",6,{"inputs":[{"name":"self"}],"output":{"name":"information"}}],[11,"get_transactions_ids","","Returns TXIDs of all transactions in `MemoryPool` (as in GetRawMemPool RPC) https://bitcoin.org/en/developer-reference#getrawmempool",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"is_spent","","Returns true if output was spent",6,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[11,"transaction_bytes","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction_output","","",6,{"inputs":[{"name":"self"},{"name":"outpoint"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_spent","","",6,{"inputs":[{"name":"self"},{"name":"outpoint"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"BlockAssembler"],[3,"BlockTemplate"],[3,"MemoryPoolInformation"],[3,"NonFinalDoubleSpendSet"],[4,"MemoryPoolOrderingStrategy"],[4,"DoubleSpendCheckResult"],[3,"MemoryPool"],[3,"HashedOutPoint"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",null,null],[3,"Registration","","Handle to a user space `Poll` registration.",null,null],[3,"SetReadiness","","Updates the readiness state of the associated [`Registration`].",null,null],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",null,null],[3,"Ready","","A set of readiness event kinds",null,null],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",null,null],[12,"0","","",0,null],[3,"Events","","A collection of readiness events.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"empty","","Return a `PollOpt` representing no set options.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if `self` is a superset of `other`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","Adds all options represented by `other` into `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ordering"}}],[11,"empty","","Returns the empty `Ready` set.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","Returns a `Ready` representing readable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","Returns a `Ready` representing writable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_empty","","Returns true if `Ready` is the empty set",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_readable","","Returns true if the value includes readable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","Returns true if the value includes writable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"contains","","Returns true if `self` is a superset of `other`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"setreadiness"}}],[11,"new","","Return a new `Poll` handle.",4,{"inputs":[],"output":{"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","Wait for readiness events",4,{"inputs":[{"name":"self"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"get","","Returns the `Event` at the given index, or `None` if the index is out of bounds.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Returns the number of `Event` values currently in `self`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,null],[11,"register","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readiness","","Returns the registration's current readiness.",3,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"set_readiness","","Set the registration's readiness",3,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"unixready"}],"output":{"name":"ready"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"net","","Networking primitives",null,null],[3,"TcpListener","mio::net","A structure representing a socket server",null,null],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bufs","","Read in a list of buffers all at once.",7,null],[11,"write_bufs","","Write a list of buffers all at once.",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",7,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",8,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",9,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",9,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"event","mio","Readiness event types and utilities.",null,null],[3,"Events","mio::event","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[3,"Event","","An readiness event returned by [`Poll::poll`].",null,null],[8,"Evented","","A value that may be registered with `Poll`",null,null],[10,"register","","Register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","Adapter for [`RawFd`] providing an [`Evented`] implementation.",null,null],[12,"0","","",11,null],[3,"UnixReady","","Unix specific extensions to `Ready`",null,null],[11,"clone","mio::event","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"readiness","","Returns the event's readiness.",12,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"token","","Returns the event's token.",12,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","mio::unix","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unixready"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"ordering"}}],[11,"error","","Returns a `Ready` representing error readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"is_error","","Returns true if the value includes error readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","Returns true if the value includes HUP readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"ready"}],"output":{"name":"unixready"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitxor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitand","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"not","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unixready"}}]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["murmur3"] = {"doc":"","items":[[5,"murmur3_32","murmur3","",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"murmur3_x86_128","","",null,null],[5,"murmur3_x64_128","","",null,null]],"paths":[]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["network"] = {"doc":"","items":[[0,"hash","network","Fixed-size hashes",null,null],[3,"H32","network::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"compact","network","Compact representation of `U256`",null,null],[3,"Compact","network::compact","Compact representation of `U256`",null,null],[3,"ConsensusParams","network","Parameters that influence chain consensus.",null,null],[12,"bip16_time","","Time when BIP16 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki",0,null],[12,"bip34_height","","Block height at which BIP34 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki",0,null],[12,"bip65_height","","Block height at which BIP65 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki",0,null],[12,"bip66_height","","Block height at which BIP65 becomes active. See https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki",0,null],[12,"rule_change_activation_threshold","","Version bits activation",0,null],[12,"miner_confirmation_window","","Number of blocks with the same set of rules",0,null],[12,"csv_deployment","","BIP68, BIP112, BIP113 deployment",0,null],[12,"segwit_deployment","","BIP141, BIP143, BIP147 deployment",0,null],[3,"Deployment","","",null,null],[12,"name","","Deployment's name",1,null],[12,"bit","","Bit",1,null],[12,"start_time","","Start time",1,null],[12,"timeout","","Timeout",1,null],[12,"activation","","Activation block number (if already activated)",1,null],[4,"Magic","","Bitcoin network",null,null],[13,"Mainnet","","The original and main network for Bitcoin transactions, where satoshis have real economic value.",2,null],[13,"Testnet","","The main bitcoin testnet.",2,null],[13,"Regtest","","Bitcoin regtest network.",2,null],[13,"Unitest","","Testnet for unittests, proof of work difficulty is almost 0",2,null],[13,"Other","","Any other network. By default behaves like bitcoin mainnet.",2,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"consensusparams"}}],[11,"with_magic","","",0,{"inputs":[{"name":"magic"}],"output":{"name":"self"}}],[11,"is_bip30_exception","","",0,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"deployment"}}],[11,"matches","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"magic"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"magic"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"magic"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"max_bits","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"port","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"rpc_port","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"genesis_block","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"consensus_params","","",2,{"inputs":[{"name":"self"}],"output":{"name":"consensusparams"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"take","network::hash","",3,null],[11,"reversed","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",3,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","network::compact","",4,null],[11,"serialize","network::hash","",3,null],[11,"serialized_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",5,null],[11,"serialized_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",6,null],[11,"serialized_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",7,null],[11,"serialized_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",8,null],[11,"serialized_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",9,null],[11,"serialized_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",10,null],[11,"serialized_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",11,null],[11,"serialized_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","network::compact","",4,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","network::hash","",3,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"deref","","",3,null],[11,"deref","","",5,null],[11,"deref","","",6,null],[11,"deref","","",7,null],[11,"deref","","",8,null],[11,"deref","","",9,null],[11,"deref","","",10,null],[11,"deref","","",11,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","network::compact","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","network::hash","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","","",3,null],[11,"deref_mut","","",5,null],[11,"deref_mut","","",6,null],[11,"deref_mut","","",7,null],[11,"deref_mut","","",8,null],[11,"deref_mut","","",9,null],[11,"deref_mut","","",10,null],[11,"deref_mut","","",11,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","network::compact","",4,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"clone","network::hash","",3,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","network::compact","",4,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"eq","network::hash","",3,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","network::compact","",4,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"from","","",4,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"from","network::hash","",3,null],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",8,null],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",10,null],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",11,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"take","","",5,null],[11,"reversed","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",6,null],[11,"reversed","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",6,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",7,null],[11,"reversed","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",7,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",8,null],[11,"reversed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",8,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",9,null],[11,"reversed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",9,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",10,null],[11,"reversed","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",10,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",11,null],[11,"reversed","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",11,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","network::compact","",4,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"max_value","","",4,{"inputs":[],"output":{"name":"compact"}}],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_u256","","",4,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"to_f64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}]],"paths":[[3,"ConsensusParams"],[3,"Deployment"],[4,"Magic"],[3,"H32"],[3,"Compact"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["ns_dns_tokio"] = {"doc":"","items":[[3,"DnsResolver","ns_dns_tokio","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dnsresolver"}}],[11,"system_config","","Create a DNS resolver with system config",0,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"new_from_resolver","","Create a resolver from `domain::resolv::Resolver` instance",0,{"inputs":[{"name":"resolver"}],"output":{"name":"dnsresolver"}}],[11,"resolve","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"boxfuture"}}]],"paths":[[3,"DnsResolver"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine. If not possible on the particular architecture returns same as get() which is the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"fix","","Fixpoint combinator for rust closures, generalized over the return type.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"char","","Extra functions for `char`",null,null],[3,"EncodeUtf8Error","odds::char","Placeholder",null,null],[5,"encode_utf8","","Encode a char into buf using UTF-8.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf8error"}}],[0,"string","odds","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",null,null],[3,"CharStr","","A single-char string.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",2,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",2,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",2,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/, otherwise return `None`",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charchunks"}}],[10,"char_windows","","Return an iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charwindows"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"charchunks"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"charwindows"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new string from `c`.",11,{"inputs":[{"name":"char"}],"output":{"name":"charstr"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"vec","odds","Extensions to `Vec`",null,null],[5,"vec","odds::vec","Create a new vec from the iterable",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[8,"VecExt","","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",12,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"VecFindRemove","","",null,null],[16,"Item","","",13,null],[10,"find_remove","","Linear search for the first element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind_remove","","Linear search for the last element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[0,"slice","odds","Extra functions for slices",null,null],[3,"MendSlices","odds::slice","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"RevSlice","","A reversed view of a slice.",null,null],[5,"shared_prefix","","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[5,"rotate_left","","Rotate `steps` towards lower indices.",null,null],[5,"split_aligned_for","","Split the input slice into three chunks, so that the middle chunk is a slice of a larger \"block size\" (for example T could be u64) that is correctly aligned for `T`.",null,null],[0,"unalign","","",null,null],[3,"UnalignedIter","odds::slice::unalign","An iterator of `T` (by value) where each value read using an unaligned load.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Create an `UnalignedIter` from `ptr` and `end`, which must be spaced an whole number of `T` offsets apart.",14,null],[11,"from_slice","","Create an `UnalignedIter` out of the slice of data, which iterates first in blocks of `T` (unaligned loads), and then leaves a tail of the remaining bytes.",14,null],[11,"tail","","Return a byte iterator of the remaining tail of the iterator; this can be called at any time, but in particular when the iterator has returned None.",14,{"inputs":[{"name":"self"}],"output":{"name":"slicecopyiter"}}],[11,"has_tail","","Return `true` if the tail is not empty.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek_next","","Return the next iterator element, without stepping the iterator.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"iter","odds::slice","",null,null],[3,"SliceCopyIter","odds::slice::iter","Slice (contiguous data) iterator.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",15,null],[11,"into_raw","","Return the start, end pointer of the iterator",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,null],[11,"default","","Create an empty `SliceCopyIter`.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SliceFind","odds::slice","Element-finding methods for slices",null,null],[16,"Item","","",16,null],[10,"find","","Linear search for the first occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind","","Linear search for the last occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[8,"SliceFindSplit","","Element-finding methods for slices",null,null],[16,"Item","","",17,null],[10,"find_split","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split","","Linear search for the last occurrence  `elt` in the slice.",17,null],[10,"find_split_mut","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split_mut","","Linear search for the last occurrence  `elt` in the slice.",17,null],[8,"SliceIterExt","","Extra iterator adaptors for iterators of slice elements.",null,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",18,{"inputs":[{"name":"self"}],"output":{"name":"mendslices"}}],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Pod","","\"plain old data\": Types that we can stick arbitrary bit patterns into, and thus use them as blocks in `split_aligned_for` or in `UnalignedIter`.",null,null],[11,"find","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"rfind","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the length of the slice.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inner_ref","","",19,null],[11,"inner_mut","","",19,null],[11,"into_boxed_slice","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"iter","","Return a by-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"iter_mut","","Return a by-mutable-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"split_at","","",19,null],[11,"split_at_mut","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"revslice"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[0,"stride","odds","Slice iterator with custom step size",null,null],[3,"Stride","odds::stride","(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[11,"from_ptr_len","","Create a Stride iterator from a raw pointer.",21,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",22,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",21,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",21,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",22,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",22,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[0,"prelude","odds","prelude of often used traits and functions",null,null],[8,"IndexRange","","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"EncodeUtf8Error"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[3,"CharStr"],[8,"VecExt"],[8,"VecFindRemove"],[3,"UnalignedIter"],[3,"SliceCopyIter"],[8,"SliceFind"],[8,"SliceFindSplit"],[8,"SliceIterExt"],[3,"RevSlice"],[3,"MendSlices"],[3,"Stride"],[3,"StrideMut"],[8,"IndexRange"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent _object_.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new _shared_ owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new _mutable_ owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new _shared_ owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new _mutable_ owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["p2p"] = {"doc":"","items":[[0,"hash","p2p","Fixed-size hashes",null,null],[3,"H32","p2p::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","p2p","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","p2p::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[3,"Config","p2p","",null,null],[12,"threads","","Number of threads used by p2p thread pool.",0,null],[12,"inbound_connections","","Number of inbound connections.",0,null],[12,"outbound_connections","","Number of outbound connections.",0,null],[12,"connection","","Configuration for every connection.",0,null],[12,"peers","","Connect only ot these nodes.",0,null],[12,"seeds","","Connect to these nodes to retrieve peer addresses, and disconnect.",0,null],[12,"node_table_path","","p2p/nodes.csv file path",0,null],[12,"internet_protocol","","Internet protocol.",0,null],[3,"NetConfig","","",null,null],[12,"protocol_version","","",1,null],[12,"protocol_minimum","","",1,null],[12,"magic","","",1,null],[12,"local_address","","",1,null],[12,"services","","",1,null],[12,"user_agent","","",1,null],[12,"start_height","","",1,null],[12,"relay","","",1,null],[3,"P2P","","",null,null],[3,"Context","","Network context.",null,null],[3,"PeerInfo","","",null,null],[12,"id","","",2,null],[12,"address","","",2,null],[12,"direction","","",2,null],[12,"version","","",2,null],[12,"version_message","","",2,null],[12,"magic","","",2,null],[4,"NodeTableError","","",null,null],[13,"AddressAlreadyAdded","","",3,null],[13,"NoAddressInTable","","",3,null],[4,"InternetProtocol","","",null,null],[13,"Any","","",4,null],[13,"IpV4","","",4,null],[13,"IpV6","","",4,null],[4,"Direction","","",null,null],[13,"Inbound","","",5,null],[13,"Outbound","","",5,null],[5,"event_loop","","",null,{"inputs":[],"output":{"name":"core"}}],[5,"forever","","",null,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"version","","",1,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"version"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"internetprotocol"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"internetprotocol"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_allowed","","",4,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"peerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"peerinfo"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"peerinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"new","","Creates new context with reference to local sync node, thread pool and event loop.",6,{"inputs":[{"name":"localsyncnoderef"},{"name":"cpupool"},{"name":"remote"},{"name":"config"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a future using thread pool and schedules execution of it with event loop handle.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute_after","","Schedules execution of function in future. Use wisely, it keeps used objects in memory until after it is resolved.",6,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"node_table_entries","","Returns addresses of recently active nodes. Sorted and limited to 1000.",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"update_node_table","","Updates node table.",6,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"add_node","","Adds node to table.",6,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"remove_node","","Removes node from table.",6,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"autoconnect","","Every 10 seconds check if we have reached maximum number of outbound connections. If not, connect to best peers.",6,{"inputs":[{"name":"arc"},{"name":"handle"}],"output":null}],[11,"connect","","Connect to socket using given context.",6,{"inputs":[{"name":"arc"},{"name":"socketaddr"}],"output":null}],[11,"connect_normal","","",6,{"inputs":[{"name":"arc"},{"name":"socketaddr"}],"output":null}],[11,"accept_connection_future","","",6,{"inputs":[{"name":"arc"},{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"},{"name":"netconfig"}],"output":{"name":"boxfuture"}}],[11,"accept_connection","","",6,{"inputs":[{"name":"arc"},{"name":"tcpstream"},{"name":"socketaddr"},{"name":"netconfig"}],"output":null}],[11,"listen","","Starts tcp server and listens for incomming connections.",6,{"inputs":[{"name":"arc"},{"name":"handle"},{"name":"netconfig"}],"output":{"name":"result"}}],[11,"on_message","","Called on incomming mesage.",6,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"iofuture"}}],[11,"send_to_peer","","Send message to a channel with given peer id.",6,{"inputs":[{"name":"arc"},{"name":"peerid"},{"name":"t"}],"output":{"name":"iofuture"}}],[11,"send_message_to_peer","","",6,{"inputs":[{"name":"arc"},{"name":"peerid"},{"name":"t"}],"output":{"name":"iofuture"}}],[11,"send","","Send message using given channel.",6,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"t"}],"output":{"name":"iofuture"}}],[11,"close_channel","","Close channel with given peer info.",6,{"inputs":[{"name":"self"},{"name":"peerid"}],"output":null}],[11,"close_channel_with_error","","Close channel with given peer info.",6,{"inputs":[{"name":"self"},{"name":"peerid"},{"name":"error"}],"output":null}],[11,"create_sync_session","","",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"outboundsyncconnectionref"}],"output":{"name":"inboundsyncconnectionref"}}],[11,"connections","","",6,{"inputs":[{"name":"self"}],"output":{"name":"connections"}}],[11,"nodes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",7,{"inputs":[{"name":"config"},{"name":"localsyncnoderef"},{"name":"handle"}],"output":{"name":"result"}}],[11,"run","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"connect","","Attempts to connect to the specified node",7,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":null}],[11,"connect_to_seednode","","",7,{"inputs":[{"name":"self"},{"name":"resolver"},{"name":"str"}],"output":null}],[11,"context","","",7,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[6,"PeerId","","",null,null],[6,"InboundSyncConnectionRef","","",null,null],[6,"OutboundSyncConnectionRef","","",null,null],[6,"LocalSyncNodeRef","","",null,null],[8,"InboundSyncConnection","","",null,null],[10,"start_sync_session","","",8,{"inputs":[{"name":"self"},{"name":"version"}],"output":null}],[10,"close_session","","",8,{"inputs":[{"name":"self"}],"output":null}],[10,"on_inventory","","",8,{"inputs":[{"name":"self"},{"name":"inv"}],"output":null}],[10,"on_getdata","","",8,{"inputs":[{"name":"self"},{"name":"getdata"}],"output":null}],[10,"on_getblocks","","",8,{"inputs":[{"name":"self"},{"name":"getblocks"}],"output":null}],[10,"on_getheaders","","",8,{"inputs":[{"name":"self"},{"name":"getheaders"},{"name":"u32"}],"output":null}],[10,"on_transaction","","",8,{"inputs":[{"name":"self"},{"name":"tx"}],"output":null}],[10,"on_block","","",8,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[10,"on_headers","","",8,{"inputs":[{"name":"self"},{"name":"headers"}],"output":null}],[10,"on_mempool","","",8,{"inputs":[{"name":"self"},{"name":"mempool"}],"output":null}],[10,"on_filterload","","",8,{"inputs":[{"name":"self"},{"name":"filterload"}],"output":null}],[10,"on_filteradd","","",8,{"inputs":[{"name":"self"},{"name":"filteradd"}],"output":null}],[10,"on_filterclear","","",8,{"inputs":[{"name":"self"},{"name":"filterclear"}],"output":null}],[10,"on_merkleblock","","",8,{"inputs":[{"name":"self"},{"name":"merkleblock"}],"output":null}],[10,"on_sendheaders","","",8,{"inputs":[{"name":"self"},{"name":"sendheaders"}],"output":null}],[10,"on_feefilter","","",8,{"inputs":[{"name":"self"},{"name":"feefilter"}],"output":null}],[10,"on_send_compact","","",8,{"inputs":[{"name":"self"},{"name":"sendcompact"}],"output":null}],[10,"on_compact_block","","",8,{"inputs":[{"name":"self"},{"name":"compactblock"}],"output":null}],[10,"on_get_block_txn","","",8,{"inputs":[{"name":"self"},{"name":"getblocktxn"}],"output":null}],[10,"on_block_txn","","",8,{"inputs":[{"name":"self"},{"name":"blocktxn"}],"output":null}],[10,"on_notfound","","",8,{"inputs":[{"name":"self"},{"name":"notfound"}],"output":null}],[8,"OutboundSyncConnection","","",null,null],[10,"send_inventory","","",9,{"inputs":[{"name":"self"},{"name":"inv"}],"output":null}],[10,"send_getdata","","",9,{"inputs":[{"name":"self"},{"name":"getdata"}],"output":null}],[10,"send_getblocks","","",9,{"inputs":[{"name":"self"},{"name":"getblocks"}],"output":null}],[10,"send_getheaders","","",9,{"inputs":[{"name":"self"},{"name":"getheaders"}],"output":null}],[10,"send_transaction","","",9,{"inputs":[{"name":"self"},{"name":"tx"}],"output":null}],[10,"send_block","","",9,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[10,"send_headers","","",9,{"inputs":[{"name":"self"},{"name":"headers"}],"output":null}],[10,"respond_headers","","",9,{"inputs":[{"name":"self"},{"name":"headers"},{"name":"u32"}],"output":null}],[10,"send_mempool","","",9,{"inputs":[{"name":"self"},{"name":"mempool"}],"output":null}],[10,"send_filterload","","",9,{"inputs":[{"name":"self"},{"name":"filterload"}],"output":null}],[10,"send_filteradd","","",9,{"inputs":[{"name":"self"},{"name":"filteradd"}],"output":null}],[10,"send_filterclear","","",9,{"inputs":[{"name":"self"},{"name":"filterclear"}],"output":null}],[10,"send_merkleblock","","",9,{"inputs":[{"name":"self"},{"name":"merkleblock"}],"output":null}],[10,"send_sendheaders","","",9,{"inputs":[{"name":"self"},{"name":"sendheaders"}],"output":null}],[10,"send_feefilter","","",9,{"inputs":[{"name":"self"},{"name":"feefilter"}],"output":null}],[10,"send_send_compact","","",9,{"inputs":[{"name":"self"},{"name":"sendcompact"}],"output":null}],[10,"send_compact_block","","",9,{"inputs":[{"name":"self"},{"name":"compactblock"}],"output":null}],[10,"send_get_block_txn","","",9,{"inputs":[{"name":"self"},{"name":"getblocktxn"}],"output":null}],[10,"send_block_txn","","",9,{"inputs":[{"name":"self"},{"name":"blocktxn"}],"output":null}],[10,"send_notfound","","",9,{"inputs":[{"name":"self"},{"name":"notfound"}],"output":null}],[10,"ignored","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"close","","",9,{"inputs":[{"name":"self"}],"output":null}],[8,"LocalSyncNode","","",null,null],[10,"create_sync_session","","",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"outboundsyncconnectionref"}],"output":{"name":"inboundsyncconnectionref"}}],[11,"take","p2p::hash","",11,null],[11,"reversed","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",11,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","p2p::bytes","",12,null],[11,"serialized_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","p2p::hash","",11,null],[11,"serialized_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",13,null],[11,"serialized_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",14,null],[11,"serialized_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",15,null],[11,"serialized_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",16,null],[11,"serialized_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",17,null],[11,"serialized_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",18,null],[11,"serialized_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",19,null],[11,"serialized_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","p2p::bytes","",12,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","p2p::hash","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"hash","p2p::bytes","",12,null],[11,"hash","p2p::hash","",11,null],[11,"hash","","",13,null],[11,"hash","","",14,null],[11,"hash","","",15,null],[11,"hash","","",16,null],[11,"hash","","",17,null],[11,"hash","","",18,null],[11,"hash","","",19,null],[11,"deref","p2p::bytes","",12,null],[11,"deref","","",20,null],[11,"deref","p2p::hash","",11,null],[11,"deref","","",13,null],[11,"deref","","",14,null],[11,"deref","","",15,null],[11,"deref","","",16,null],[11,"deref","","",17,null],[11,"deref","","",18,null],[11,"deref","","",19,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","p2p::bytes","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","p2p::hash","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","p2p::bytes","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","p2p::hash","",11,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","p2p::bytes","",12,null],[11,"deref_mut","","",20,null],[11,"deref_mut","p2p::hash","",11,null],[11,"deref_mut","","",13,null],[11,"deref_mut","","",14,null],[11,"deref_mut","","",15,null],[11,"deref_mut","","",16,null],[11,"deref_mut","","",17,null],[11,"deref_mut","","",18,null],[11,"deref_mut","","",19,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","p2p::bytes","",12,null],[11,"as_mut","","",20,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","p2p::hash","",11,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","p2p::bytes","",12,null],[11,"as_ref","","",20,null],[11,"as_ref","p2p::hash","",11,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","p2p::bytes","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","p2p::hash","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","p2p::bytes","",12,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","p2p::hash","",11,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","p2p::bytes","",12,null],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","p2p::hash","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",11,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",13,null],[11,"from","","",13,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",13,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",14,null],[11,"from","","",14,null],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",14,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",15,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",16,null],[11,"from","","",16,null],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",16,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",17,null],[11,"from","","",17,null],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",18,null],[11,"from","","",18,null],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","p2p::bytes","",12,{"inputs":[{"name":"message"}],"output":{"name":"bytes"}}],[11,"take","p2p::hash","",13,null],[11,"reversed","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",13,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",14,null],[11,"reversed","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",14,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",15,null],[11,"reversed","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",15,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",16,null],[11,"reversed","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",16,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",17,null],[11,"reversed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",17,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",18,null],[11,"reversed","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",18,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",19,null],[11,"reversed","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",19,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","p2p::bytes","",12,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",20,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}]],"paths":[[3,"Config"],[3,"NetConfig"],[3,"PeerInfo"],[4,"NodeTableError"],[4,"InternetProtocol"],[4,"Direction"],[3,"Context"],[3,"P2P"],[8,"InboundSyncConnection"],[8,"OutboundSyncConnection"],[8,"LocalSyncNode"],[3,"H32"],[3,"Bytes"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",10,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",10,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will *not* be invoked.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"UnparkResult","parking_lot_core","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",0,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",0,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",0,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",1,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",3,null],[13,"Invalid","","The validation callback returned false.",3,null],[13,"TimedOut","","The timeout expired.",3,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",4,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",4,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",4,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null]],"paths":[[3,"UnparkResult"],[3,"UnparkToken"],[3,"ParkToken"],[4,"ParkResult"],[4,"RequeueOp"],[4,"FilterOp"],[3,"SpinWait"]]};
searchIndex["pbtc"] = {"doc":"Parity bitcoin client.","items":[[17,"APP_INFO","pbtc","",null,null],[17,"PROTOCOL_VERSION","","",null,null],[17,"PROTOCOL_MINIMUM","","",null,null],[17,"USER_AGENT","","",null,null],[17,"REGTEST_USER_AGENT","","",null,null],[17,"LOG_INFO","","",null,null]],"paths":[]};
searchIndex["primitives"] = {"doc":"","items":[[0,"hex","primitives","Hex binary-to-text encoding",null,null],[8,"ToHex","primitives::hex","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",2,null],[13,"InvalidHexLength","","The input had an invalid length",2,null],[0,"bytes","primitives","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","primitives::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bytes"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_len","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"take","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"default","","",4,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"new","","",4,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"into_raw","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[0,"compact","primitives","Compact representation of `U256`",null,null],[3,"Compact","primitives::compact","Compact representation of `U256`",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"new","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"max_value","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_u256","","",5,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"to_f64","","",5,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[0,"hash","primitives","Fixed-size hashes",null,null],[3,"H32","primitives::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",6,null],[11,"reversed","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",6,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",7,null],[11,"reversed","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",7,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",8,null],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",8,null],[11,"reversed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",8,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",9,null],[11,"reversed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",9,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",10,null],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",10,null],[11,"reversed","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",10,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",11,null],[11,"reversed","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",11,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",12,null],[11,"from","","",12,null],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",12,null],[11,"reversed","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",12,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",13,null],[11,"from","","",13,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"take","","",13,null],[11,"reversed","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"size","","",13,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_reversed_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"to_reversed_str","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"description","primitives::hex","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}]],"paths":[[8,"ToHex"],[8,"FromHex"],[4,"FromHexError"],[3,"Bytes"],[3,"TaggedBytes"],[3,"Compact"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times and the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will dump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is **optional**.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel but is not guaranteed to. However, the call to `join` incurs low overhead and is much different compared to spawning two separate threads.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread pool. See `set_num_threads` for more information.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool. The argument `num_threads` must not be zero. If you do not call this function, rayon will select a suitable default (currently, the default is one thread per CPU core).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join` which occur there will then operate within that threadpool.",2,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"num_threads","","Returns the number of threads in the thread pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[0,"find","rayon::par_iter","",null,null],[5,"find","rayon::par_iter::find","",null,{"inputs":[{"name":"par_iter"},{"name":"find_op"}],"output":{"name":"option"}}],[0,"chain","rayon::par_iter","",null,null],[3,"ChainIter","rayon::par_iter::chain","",null,null],[3,"ChainProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",3,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chainiter"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",3,null],[11,"weighted","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",4,null],[11,"into_iter","","",4,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","Collects the results of the exact iterator into the specified vector.",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","//////////////////////////////////////////////////////////////////////// Producer implementation",null,null],[11,"new","","",5,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",5,null],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",5,null],[11,"weighted","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",6,null],[11,"into_iter","","",6,null],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",7,null],[11,"upper_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",7,null],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",8,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",8,null],[11,"upper_bound","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",8,null],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",9,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",9,null],[0,"from_par_iter","rayon::par_iter","",null,null],[8,"FromParallelIterator","rayon::par_iter::from_par_iter","",null,null],[10,"from_par_iter","","",10,{"inputs":[{"name":"par_iter"}],"output":{"name":"self"}}],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::par_iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",11,null],[10,"callback","","",11,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[11,"weighted","","Reports whether the producer has explicit weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than `N`.",12,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",13,null],[16,"Reducer","","",13,null],[16,"Result","","",13,null],[11,"weighted","","Reports whether the consumer has explicit weights.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","If it costs `producer_cost` to produce the items we will consume, returns cost adjusted to account for consuming them.",13,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",13,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",13,null],[11,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",14,null],[10,"consume","","Consume next item and return new sequential state.",14,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",14,null],[11,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",15,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",16,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[10,"can_split","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"split","","",17,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",18,null],[12,"cost","","An estimate of the \"cost\" of this operation. This is a kind of abstract concept you can use to influence how fine-grained the threads are.",18,null],[12,"sparse","","If true, all elements will be written. If false, some may not. For example, `sparse` will be false if there is a filter. When doing a collect, sparse iterators require a compression step.",18,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parallellen"}}],[11,"left_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[11,"right_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"fold","rayon::par_iter","",null,null],[3,"Fold","rayon::par_iter::fold","",null,null],[3,"FoldConsumer","","",null,null],[3,"FoldFolder","","",null,null],[5,"fold","","",null,{"inputs":[{"name":"base"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"drive_unindexed","","",19,null],[11,"upper_bound","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",19,null],[11,"cost","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",20,null],[11,"into_folder","","",20,null],[11,"split_off","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",20,null],[11,"consume","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",21,null],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","//////////////////////////////////////////////////////////////////////// Specific operations",null,null],[3,"ProductOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"PRODUCT","","",null,null],[8,"ReduceOp","","Specifies a \"reduce operator\". This is the combination of a start value and a reduce function. The reduce function takes two items and computes a reduced version. The start value `S` is a kind of \"zero\" or \"identity\" value that may be intermingled as needed; ideally, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"reduce","","",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"consume","","",23,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",23,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"new","","",26,{"inputs":[{"name":"identity"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"reduce","","",26,{"inputs":[{"name":"self"},{"name":"item"},{"name":"item"}],"output":{"name":"item"}}],[0,"skip","rayon::par_iter","",null,null],[3,"Skip","rayon::par_iter::skip","",null,null],[11,"new","","",27,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",27,null],[11,"opt_len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",27,null],[11,"with_producer","","",27,null],[0,"take","rayon::par_iter","",null,null],[3,"Take","rayon::par_iter::take","",null,null],[11,"new","","",28,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",28,null],[11,"opt_len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",28,null],[11,"with_producer","","",28,null],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"ChunksIter","","",null,null],[3,"SliceProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksProducer","","",null,null],[11,"drive_unindexed","","",29,null],[11,"opt_len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",29,null],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",29,null],[11,"drive_unindexed","","",30,null],[11,"opt_len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",30,null],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",30,null],[11,"cost","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",31,null],[11,"into_iter","","",31,null],[11,"cost","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",32,null],[11,"into_iter","","",32,null],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"ChunksMutIter","","",null,null],[3,"SliceMutProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksMutProducer","","",null,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"opt_len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",34,null],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",34,null],[11,"cost","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,null],[11,"cost","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",36,null],[11,"into_iter","","",36,null],[0,"string","rayon::par_iter","",null,null],[3,"ParChars","rayon::par_iter::string","",null,null],[11,"drive_unindexed","","",37,null],[11,"can_split","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",37,null],[11,"into_iter","","",37,null],[0,"map","rayon::par_iter","",null,null],[3,"MapFn","rayon::par_iter::map","",null,null],[12,"0","","",38,null],[3,"MapCloned","","",null,null],[3,"MapInspect","","",null,null],[12,"0","","",39,null],[3,"Map","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapIter","","",null,null],[8,"MapOp","","",null,null],[16,"Output","","",40,null],[10,"map","","",40,null],[11,"map","","",38,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"out"}}],[11,"map","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"map","","",39,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"in"}}],[11,"new","","",42,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"weighted","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",43,null],[11,"into_iter","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",45,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"weighted","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",46,null],[11,"into_iter","","",46,null],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",47,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"weighted","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",48,null],[11,"into_iter","","",48,null],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"into_iter","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceDrain","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"cost","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",51,null],[11,"into_iter","","",51,null],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[0,"option","rayon::par_iter","",null,null],[3,"OptionIter","rayon::par_iter::option","",null,null],[3,"OptionProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"cost","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",54,null],[11,"into_iter","","",54,null],[0,"collections","rayon::par_iter","",null,null],[0,"noop","","",null,null],[3,"NoopConsumer","rayon::par_iter::noop","",null,null],[3,"NoopReducer","","",null,null],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"cost","","",55,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",55,null],[11,"into_folder","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"consume","","",55,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"split_off","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",55,{"inputs":[{"name":"self"}],"output":{"name":"noopreducer"}}],[11,"reduce","","",56,null],[8,"IntoParallelIterator","rayon::par_iter","",null,null],[16,"Iter","","",57,null],[16,"Item","","",57,null],[10,"into_par_iter","","",57,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",58,null],[16,"Item","","",58,null],[10,"par_iter","","",58,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",59,null],[16,"Item","","",59,null],[10,"par_iter_mut","","",59,null],[8,"ToParallelChunks","","",null,null],[16,"Iter","","",60,null],[16,"Item","","",60,null],[10,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",60,null],[8,"ToParallelChunksMut","","",null,null],[16,"Iter","","",61,null],[16,"Item","","",61,null],[10,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",61,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[16,"Chars","","",62,null],[10,"par_chars","","Returns a parallel iterator over the characters of a string.",62,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",63,null],[11,"weight","","Indicates the relative \"weight\" of producing each item in this parallel iterator. A higher weight will cause finer-grained parallel subtasks. 1.0 indicates something very cheap and uniform, like copying a value out of an array, or computing `x + 1`. If your tasks are either very expensive, or very unpredictable, you are better off with higher values. See also `weight_max`, which is a convenient shorthand to force the finest grained parallel execution posible. Tuning this value should not affect correctness but can improve (or hurt) performance.",63,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the smallest granularity of parallel execution, which makes sense when your parallel tasks are (potentially) very expensive to execute.",63,{"inputs":[{"name":"self"}],"output":{"name":"weight"}}],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,{"inputs":[{"name":"self"},{"name":"inspect_op"}],"output":{"name":"map"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"reduce_with_identity","","Deprecated. Use `reduce()` instead.",63,null],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The **parallel fold** works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,{"inputs":[{"name":"self"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"sum","","Sums up the items in the iterator.",63,null],[11,"product","","Multiplies all the items in the iterator.",63,null],[11,"mul","","DEPRECATED",63,null],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,{"inputs":[{"name":"self"},{"name":"chain"}],"output":{"name":"chainiter"}}],[11,"find_any","","Searches for **some** item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the **first** one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,{"inputs":[{"name":"self"},{"name":"find_op"}],"output":{"name":"option"}}],[11,"any","","Searches for **some** item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,{"inputs":[{"name":"self"},{"name":"any_op"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,{"inputs":[{"name":"self"},{"name":"all_op"}],"output":{"name":"bool"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of items is not known, but we can at least give an upper-bound. These sorts of iterators result from filtering.",null,null],[10,"upper_bound","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of items is known. This occurs when e.g. iterating over a vector. Knowing precisely how many items will be produced is very useful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",65,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",66,{"inputs":[{"name":"self"},{"name":"zip_op"}],"output":{"name":"zipiter"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",66,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for **some** item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the **first** match, and once a match is found we'll attempt to stop processing any more.",66,{"inputs":[{"name":"self"},{"name":"position_op"}],"output":{"name":"option"}}],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"ChainIter"],[3,"ChainProducer"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"FromParallelIterator"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"ParallelLen"],[3,"Fold"],[3,"FoldConsumer"],[3,"FoldFolder"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"ProductOp"],[3,"ReduceWithIdentityOp"],[3,"Skip"],[3,"Take"],[3,"SliceIter"],[3,"ChunksIter"],[3,"SliceProducer"],[3,"SliceChunksProducer"],[3,"SliceIterMut"],[3,"ChunksMutIter"],[3,"SliceMutProducer"],[3,"SliceChunksMutProducer"],[3,"ParChars"],[3,"MapFn"],[3,"MapInspect"],[8,"MapOp"],[3,"MapCloned"],[3,"Map"],[3,"MapProducer"],[3,"MapIter"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"RangeIter"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[3,"OptionIter"],[3,"OptionProducer"],[3,"NoopConsumer"],[3,"NoopReducer"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ToParallelChunks"],[8,"ToParallelChunksMut"],[8,"ParallelString"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",17,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",21,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",25,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., ``.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rocksdb"] = {"doc":"","items":[[0,"rocksdb_ffi","rocksdb","",null,null],[4,"DBOptionsOpaque","rocksdb::rocksdb_ffi","",null,null],[6,"DBOptions","","",null,null],[4,"DBInstanceOpaque","","",null,null],[6,"DBInstance","","",null,null],[4,"DBWriteOptionsOpaque","","",null,null],[6,"DBWriteOptions","","",null,null],[4,"DBReadOptionsOpaque","","",null,null],[6,"DBReadOptions","","",null,null],[4,"DBMergeOperatorOpaque","","",null,null],[6,"DBMergeOperator","","",null,null],[4,"DBBlockBasedTableOptionsOpaque","","",null,null],[6,"DBBlockBasedTableOptions","","",null,null],[4,"DBCacheOpaque","","",null,null],[6,"DBCache","","",null,null],[4,"DBFilterPolicyOpaque","","",null,null],[6,"DBFilterPolicy","","",null,null],[4,"DBSnapshotOpaque","","",null,null],[6,"DBSnapshot","","",null,null],[4,"DBIteratorOpaque","","",null,null],[6,"DBIterator","","",null,null],[4,"DBCFHandleOpaque","","",null,null],[6,"DBCFHandle","","",null,null],[4,"DBWriteBatchOpaque","","",null,null],[6,"DBWriteBatch","","",null,null],[4,"DBComparatorOpaque","","",null,null],[6,"DBComparator","","",null,null],[4,"DBSliceTransformOpaque","","",null,null],[6,"DBSliceTransform","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_BINARY_SEARCH","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_HASH_SEARCH","","",null,null],[5,"new_bloom_filter","","",null,null],[5,"new_cache","","",null,null],[4,"DBCompressionType","","",null,null],[13,"DBNoCompression","","",0,null],[13,"DBSnappyCompression","","",0,null],[13,"DBZlibCompression","","",0,null],[13,"DBBz2Compression","","",0,null],[13,"DBLz4Compression","","",0,null],[13,"DBLz4hcCompression","","",0,null],[4,"DBCompactionStyle","","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[4,"DBUniversalCompactionStyle","","",null,null],[13,"rocksdb_similar_size_compaction_stop_style","","",2,null],[13,"rocksdb_total_size_compaction_stop_style","","",2,null],[5,"error_message","","",null,null],[5,"rocksdb_options_create","","",null,null],[5,"rocksdb_options_destroy","","",null,null],[5,"rocksdb_cache_create_lru","","",null,null],[5,"rocksdb_cache_destroy","","",null,null],[5,"rocksdb_block_based_options_create","","",null,null],[5,"rocksdb_block_based_options_destroy","","",null,null],[5,"rocksdb_block_based_options_set_block_size","","",null,null],[5,"rocksdb_block_based_options_set_block_size_deviation","","",null,null],[5,"rocksdb_block_based_options_set_block_restart_interval","","",null,null],[5,"rocksdb_block_based_options_set_filter_policy","","",null,null],[5,"rocksdb_block_based_options_set_no_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache_compressed","","",null,null],[5,"rocksdb_block_based_options_set_whole_key_filtering","","",null,null],[5,"rocksdb_options_set_block_based_table_factory","","",null,null],[5,"rocksdb_block_based_options_set_index_type","","",null,null],[5,"rocksdb_options_increase_parallelism","","",null,null],[5,"rocksdb_options_optimize_level_style_compaction","","",null,null],[5,"rocksdb_options_set_create_if_missing","","",null,null],[5,"rocksdb_options_set_max_open_files","","",null,null],[5,"rocksdb_options_set_use_fsync","","",null,null],[5,"rocksdb_options_set_bytes_per_sync","","",null,null],[5,"rocksdb_options_set_disable_data_sync","","",null,null],[5,"rocksdb_options_optimize_for_point_lookup","","",null,null],[5,"rocksdb_options_set_table_cache_numshardbits","","",null,null],[5,"rocksdb_options_set_max_write_buffer_number","","",null,null],[5,"rocksdb_options_set_min_write_buffer_number_to_merge","","",null,null],[5,"rocksdb_options_set_level0_file_num_compaction_trigger","","",null,null],[5,"rocksdb_options_set_level0_slowdown_writes_trigger","","",null,null],[5,"rocksdb_options_set_level0_stop_writes_trigger","","",null,null],[5,"rocksdb_options_set_write_buffer_size","","",null,null],[5,"rocksdb_options_set_db_write_buffer_size","","",null,null],[5,"rocksdb_options_set_target_file_size_base","","",null,null],[5,"rocksdb_options_set_target_file_size_multiplier","","",null,null],[5,"rocksdb_options_set_max_log_file_size","","",null,null],[5,"rocksdb_options_set_max_manifest_file_size","","",null,null],[5,"rocksdb_options_set_hash_skip_list_rep","","",null,null],[5,"rocksdb_options_set_compaction_style","","",null,null],[5,"rocksdb_options_set_compression","","",null,null],[5,"rocksdb_options_set_max_background_compactions","","",null,null],[5,"rocksdb_options_set_max_background_flushes","","",null,null],[5,"rocksdb_options_set_disable_auto_compactions","","",null,null],[5,"rocksdb_options_set_prefix_extractor","","",null,null],[5,"rocksdb_filterpolicy_create_bloom","","",null,null],[5,"rocksdb_filterpolicy_destroy","","",null,null],[5,"rocksdb_open","","",null,null],[5,"rocksdb_writeoptions_create","","",null,null],[5,"rocksdb_writeoptions_destroy","","",null,null],[5,"rocksdb_writeoptions_set_sync","","",null,null],[5,"rocksdb_writeoptions_disable_WAL","","",null,null],[5,"rocksdb_put","","",null,null],[5,"rocksdb_put_cf","","",null,null],[5,"rocksdb_readoptions_create","","",null,null],[5,"rocksdb_readoptions_destroy","","",null,null],[5,"rocksdb_readoptions_set_verify_checksums","","",null,null],[5,"rocksdb_readoptions_set_fill_cache","","",null,null],[5,"rocksdb_readoptions_set_snapshot","","",null,null],[5,"rocksdb_readoptions_set_iterate_upper_bound","","",null,null],[5,"rocksdb_readoptions_set_read_tier","","",null,null],[5,"rocksdb_readoptions_set_tailing","","",null,null],[5,"rocksdb_get","","",null,null],[5,"rocksdb_get_cf","","",null,null],[5,"rocksdb_create_iterator","","",null,null],[5,"rocksdb_create_iterator_cf","","",null,null],[5,"rocksdb_create_snapshot","","",null,null],[5,"rocksdb_release_snapshot","","",null,null],[5,"rocksdb_delete","","",null,null],[5,"rocksdb_delete_cf","","",null,null],[5,"rocksdb_close","","",null,null],[5,"rocksdb_destroy_db","","",null,null],[5,"rocksdb_repair_db","","",null,null],[5,"rocksdb_merge","","",null,null],[5,"rocksdb_merge_cf","","",null,null],[5,"rocksdb_mergeoperator_create","","",null,null],[5,"rocksdb_mergeoperator_destroy","","",null,null],[5,"rocksdb_options_set_merge_operator","","",null,null],[5,"rocksdb_iter_destroy","","",null,null],[5,"rocksdb_iter_valid","","",null,null],[5,"rocksdb_iter_seek_to_first","","",null,null],[5,"rocksdb_iter_seek_to_last","","",null,null],[5,"rocksdb_iter_seek","","",null,null],[5,"rocksdb_iter_next","","",null,null],[5,"rocksdb_iter_prev","","",null,null],[5,"rocksdb_iter_key","","",null,null],[5,"rocksdb_iter_value","","",null,null],[5,"rocksdb_iter_get_error","","",null,null],[5,"rocksdb_write","","",null,null],[5,"rocksdb_writebatch_create","","",null,null],[5,"rocksdb_writebatch_create_from","","",null,null],[5,"rocksdb_writebatch_destroy","","",null,null],[5,"rocksdb_writebatch_clear","","",null,null],[5,"rocksdb_writebatch_count","","",null,null],[5,"rocksdb_writebatch_put","","",null,null],[5,"rocksdb_writebatch_put_cf","","",null,null],[5,"rocksdb_writebatch_merge","","",null,null],[5,"rocksdb_writebatch_merge_cf","","",null,null],[5,"rocksdb_writebatch_delete","","",null,null],[5,"rocksdb_writebatch_delete_cf","","",null,null],[5,"rocksdb_writebatch_iterate","","",null,null],[5,"rocksdb_writebatch_data","","",null,null],[5,"rocksdb_options_set_comparator","","",null,null],[5,"rocksdb_comparator_create","","",null,null],[5,"rocksdb_comparator_destroy","","",null,null],[5,"rocksdb_open_column_families","","",null,null],[5,"rocksdb_create_column_family","","",null,null],[5,"rocksdb_drop_column_family","","",null,null],[5,"rocksdb_column_family_handle_destroy","","",null,null],[5,"rocksdb_slicetransform_create","","",null,null],[5,"rocksdb_slicetransform_create_fixed_prefix","","",null,null],[5,"rocksdb_slicetransform_create_noop","","",null,null],[5,"rocksdb_slicetransform_destroy","","",null,null],[5,"rocksdb_get_options_from_string","","",null,null],[4,"DBCompactionStyle","rocksdb","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[6,"DBComparator","","",null,null],[5,"new_bloom_filter","","",null,null],[0,"rocksdb","","",null,null],[3,"DB","rocksdb::rocksdb","",null,null],[3,"Column","","",null,null],[3,"WriteBatch","","",null,null],[3,"ReadOptions","","",null,null],[3,"Snapshot","","",null,null],[3,"DBIterator","","",null,null],[3,"DBVector","","",null,null],[4,"Direction","","",null,null],[13,"Forward","","",3,null],[13,"Reverse","","",3,null],[4,"IteratorMode","","",null,null],[13,"Start","","",4,null],[13,"End","","",4,null],[13,"From","","",4,null],[8,"Writable","","",null,null],[10,"put","","",5,null],[10,"put_cf","","",5,null],[10,"merge","","",5,null],[10,"merge_cf","","",5,null],[10,"delete","","",5,null],[10,"delete_cf","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_mode","","",7,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":null}],[11,"valid","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",8,{"inputs":[{"name":"db"}],"output":{"name":"snapshot"}}],[11,"iterator","","",8,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"get","","",8,null],[11,"get_cf","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"open_default","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"open","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"open_cf","","",9,null],[11,"destroy","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"repair","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_opt","","",9,{"inputs":[{"name":"self"},{"name":"writebatch"},{"name":"writeoptions"}],"output":{"name":"result"}}],[11,"write","","",9,{"inputs":[{"name":"self"},{"name":"writebatch"}],"output":{"name":"result"}}],[11,"get_opt","","",9,null],[11,"get","","",9,null],[11,"get_cf_opt","","",9,null],[11,"get_cf","","",9,null],[11,"create_cf","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"options"}],"output":{"name":"result"}}],[11,"drop_cf","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"cf_handle","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iterator","","",9,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"iterator_opt","","",9,{"inputs":[{"name":"self"},{"name":"iteratormode"},{"name":"readoptions"}],"output":{"name":"dbiterator"}}],[11,"iterator_cf","","",9,{"inputs":[{"name":"self"},{"name":"column"},{"name":"iteratormode"}],"output":{"name":"result"}}],[11,"iterator_cf_opt","","",9,{"inputs":[{"name":"self"},{"name":"column"},{"name":"iteratormode"},{"name":"readoptions"}],"output":{"name":"result"}}],[11,"snapshot","","",9,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"put_opt","","",9,null],[11,"put_cf_opt","","",9,null],[11,"merge_opt","","",9,null],[11,"merge_cf_opt","","",9,null],[11,"delete_opt","","",9,null],[11,"delete_cf_opt","","",9,null],[11,"put","","",9,null],[11,"put_cf","","",9,null],[11,"merge","","",9,null],[11,"merge_cf","","",9,null],[11,"delete","","",9,null],[11,"delete_cf","","",9,null],[11,"new","","",10,{"inputs":[],"output":{"name":"writebatch"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"put","","",10,null],[11,"put_cf","","",10,null],[11,"merge","","",10,null],[11,"merge_cf","","",10,null],[11,"delete","","",10,null],[11,"delete_cf","","",10,null],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",11,{"inputs":[],"output":{"name":"readoptions"}}],[11,"set_snapshot","","",11,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"set_verify_checksums","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_tailing","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"deref","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"from_c","","",12,null],[11,"to_utf8","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"rocksdb_options","rocksdb","",null,null],[3,"BlockBasedOptions","rocksdb::rocksdb_options","",null,null],[3,"Options","","",null,null],[12,"inner","","",13,null],[3,"WriteOptions","","",null,null],[12,"inner","","",14,null],[3,"Cache","","",null,null],[12,"inner","","",15,null],[4,"IndexType","","",null,null],[13,"BinarySearch","","",16,null],[13,"HashSearch","","",16,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",17,{"inputs":[],"output":{"name":"blockbasedoptions"}}],[11,"set_block_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_index_type","","",17,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":null}],[11,"set_cache","","",17,{"inputs":[{"name":"self"},{"name":"cache"}],"output":null}],[11,"set_filter","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"new","","",13,{"inputs":[],"output":{"name":"options"}}],[11,"increase_parallelism","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"optimize_level_style_compaction","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"create_if_missing","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"add_merge_operator","","",13,null],[11,"add_comparator","","",13,null],[11,"set_prefix_extractor_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_block_cache_size_mb","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_max_open_files","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_use_fsync","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_bytes_per_sync","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_disable_data_sync","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_table_cache_num_shard_bits","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_min_write_buffer_number","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_max_write_buffer_number","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_write_buffer_size","","",13,{"inputs":[{"name":"self"},{"name":"size_t"}],"output":null}],[11,"set_db_write_buffer_size","","",13,{"inputs":[{"name":"self"},{"name":"size_t"}],"output":null}],[11,"set_target_file_size_base","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_target_file_size_multiplier","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_min_write_buffer_number_to_merge","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_slowdown_writes_trigger","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_stop_writes_trigger","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_compaction_style","","",13,{"inputs":[{"name":"self"},{"name":"dbcompactionstyle"}],"output":null}],[11,"set_max_background_compactions","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_max_background_flushes","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_disable_auto_compactions","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_block_based_table_factory","","",13,{"inputs":[{"name":"self"},{"name":"blockbasedoptions"}],"output":null}],[11,"set_parsed_options","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"writeoptions"}}],[11,"set_sync","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"disable_wal","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"new","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"cache"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[0,"merge_operator","rocksdb","",null,null],[3,"MergeOperatorCallback","rocksdb::merge_operator","",null,null],[12,"name","","",18,null],[12,"merge_fn","","",18,null],[3,"MergeOperands","","",null,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"full_merge_callback","","",null,null],[5,"partial_merge_callback","","",null,null],[0,"comparator","rocksdb","",null,null],[3,"ComparatorCallback","rocksdb::comparator","",null,null],[12,"name","","",19,null],[12,"f","","",19,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"compare_callback","","",null,null]],"paths":[[4,"DBCompressionType"],[4,"DBCompactionStyle"],[4,"DBUniversalCompactionStyle"],[4,"Direction"],[4,"IteratorMode"],[8,"Writable"],[3,"Column"],[3,"DBIterator"],[3,"Snapshot"],[3,"DB"],[3,"WriteBatch"],[3,"ReadOptions"],[3,"DBVector"],[3,"Options"],[3,"WriteOptions"],[3,"Cache"],[4,"IndexType"],[3,"BlockBasedOptions"],[3,"MergeOperatorCallback"],[3,"ComparatorCallback"]]};
searchIndex["rocksdb_sys"] = {"doc":"","items":[[0,"ffi","rocksdb_sys","",null,null],[4,"DBOptionsOpaque","rocksdb_sys::ffi","",null,null],[4,"DBInstanceOpaque","","",null,null],[4,"DBWriteOptionsOpaque","","",null,null],[4,"DBReadOptionsOpaque","","",null,null],[4,"DBMergeOperatorOpaque","","",null,null],[4,"DBBlockBasedTableOptionsOpaque","","",null,null],[4,"DBCacheOpaque","","",null,null],[4,"DBFilterPolicyOpaque","","",null,null],[4,"DBSnapshotOpaque","","",null,null],[4,"DBIteratorOpaque","","",null,null],[4,"DBCFHandleOpaque","","",null,null],[4,"DBWriteBatchOpaque","","",null,null],[4,"DBComparatorOpaque","","",null,null],[4,"DBSliceTransformOpaque","","",null,null],[4,"DBCompressionType","","",null,null],[13,"DBNoCompression","","",0,null],[13,"DBSnappyCompression","","",0,null],[13,"DBZlibCompression","","",0,null],[13,"DBBz2Compression","","",0,null],[13,"DBLz4Compression","","",0,null],[13,"DBLz4hcCompression","","",0,null],[4,"DBCompactionStyle","","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[4,"DBUniversalCompactionStyle","","",null,null],[13,"rocksdb_similar_size_compaction_stop_style","","",2,null],[13,"rocksdb_total_size_compaction_stop_style","","",2,null],[5,"new_bloom_filter","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"dbfilterpolicy"}}],[5,"new_cache","","",null,{"inputs":[{"name":"size_t"}],"output":{"name":"dbcache"}}],[5,"error_message","","",null,null],[5,"rocksdb_options_create","","",null,null],[5,"rocksdb_options_destroy","","",null,null],[5,"rocksdb_cache_create_lru","","",null,null],[5,"rocksdb_cache_destroy","","",null,null],[5,"rocksdb_block_based_options_create","","",null,null],[5,"rocksdb_block_based_options_destroy","","",null,null],[5,"rocksdb_block_based_options_set_block_size","","",null,null],[5,"rocksdb_block_based_options_set_block_size_deviation","","",null,null],[5,"rocksdb_block_based_options_set_block_restart_interval","","",null,null],[5,"rocksdb_block_based_options_set_filter_policy","","",null,null],[5,"rocksdb_block_based_options_set_no_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache_compressed","","",null,null],[5,"rocksdb_block_based_options_set_whole_key_filtering","","",null,null],[5,"rocksdb_options_set_block_based_table_factory","","",null,null],[5,"rocksdb_block_based_options_set_index_type","","",null,null],[5,"rocksdb_options_increase_parallelism","","",null,null],[5,"rocksdb_options_optimize_level_style_compaction","","",null,null],[5,"rocksdb_options_set_create_if_missing","","",null,null],[5,"rocksdb_options_set_max_open_files","","",null,null],[5,"rocksdb_options_set_use_fsync","","",null,null],[5,"rocksdb_options_set_bytes_per_sync","","",null,null],[5,"rocksdb_options_set_disable_data_sync","","",null,null],[5,"rocksdb_options_optimize_for_point_lookup","","",null,null],[5,"rocksdb_options_set_table_cache_numshardbits","","",null,null],[5,"rocksdb_options_set_max_write_buffer_number","","",null,null],[5,"rocksdb_options_set_min_write_buffer_number_to_merge","","",null,null],[5,"rocksdb_options_set_level0_file_num_compaction_trigger","","",null,null],[5,"rocksdb_options_set_level0_slowdown_writes_trigger","","",null,null],[5,"rocksdb_options_set_level0_stop_writes_trigger","","",null,null],[5,"rocksdb_options_set_write_buffer_size","","",null,null],[5,"rocksdb_options_set_db_write_buffer_size","","",null,null],[5,"rocksdb_options_set_target_file_size_base","","",null,null],[5,"rocksdb_options_set_target_file_size_multiplier","","",null,null],[5,"rocksdb_options_set_max_log_file_size","","",null,null],[5,"rocksdb_options_set_max_manifest_file_size","","",null,null],[5,"rocksdb_options_set_hash_skip_list_rep","","",null,null],[5,"rocksdb_options_set_compaction_style","","",null,null],[5,"rocksdb_options_set_compression","","",null,null],[5,"rocksdb_options_set_max_background_compactions","","",null,null],[5,"rocksdb_options_set_max_background_flushes","","",null,null],[5,"rocksdb_options_set_disable_auto_compactions","","",null,null],[5,"rocksdb_options_set_prefix_extractor","","",null,null],[5,"rocksdb_filterpolicy_create_bloom","","",null,null],[5,"rocksdb_filterpolicy_destroy","","",null,null],[5,"rocksdb_open","","",null,null],[5,"rocksdb_writeoptions_create","","",null,null],[5,"rocksdb_writeoptions_destroy","","",null,null],[5,"rocksdb_writeoptions_set_sync","","",null,null],[5,"rocksdb_writeoptions_disable_WAL","","",null,null],[5,"rocksdb_put","","",null,null],[5,"rocksdb_put_cf","","",null,null],[5,"rocksdb_readoptions_create","","",null,null],[5,"rocksdb_readoptions_destroy","","",null,null],[5,"rocksdb_readoptions_set_verify_checksums","","",null,null],[5,"rocksdb_readoptions_set_fill_cache","","",null,null],[5,"rocksdb_readoptions_set_snapshot","","",null,null],[5,"rocksdb_readoptions_set_iterate_upper_bound","","",null,null],[5,"rocksdb_readoptions_set_read_tier","","",null,null],[5,"rocksdb_readoptions_set_tailing","","",null,null],[5,"rocksdb_get","","",null,null],[5,"rocksdb_get_cf","","",null,null],[5,"rocksdb_create_iterator","","",null,null],[5,"rocksdb_create_iterator_cf","","",null,null],[5,"rocksdb_create_snapshot","","",null,null],[5,"rocksdb_release_snapshot","","",null,null],[5,"rocksdb_delete","","",null,null],[5,"rocksdb_delete_cf","","",null,null],[5,"rocksdb_close","","",null,null],[5,"rocksdb_destroy_db","","",null,null],[5,"rocksdb_repair_db","","",null,null],[5,"rocksdb_merge","","",null,null],[5,"rocksdb_merge_cf","","",null,null],[5,"rocksdb_mergeoperator_create","","",null,null],[5,"rocksdb_mergeoperator_destroy","","",null,null],[5,"rocksdb_options_set_merge_operator","","",null,null],[5,"rocksdb_iter_destroy","","",null,null],[5,"rocksdb_iter_valid","","",null,null],[5,"rocksdb_iter_seek_to_first","","",null,null],[5,"rocksdb_iter_seek_to_last","","",null,null],[5,"rocksdb_iter_seek","","",null,null],[5,"rocksdb_iter_next","","",null,null],[5,"rocksdb_iter_prev","","",null,null],[5,"rocksdb_iter_key","","",null,null],[5,"rocksdb_iter_value","","",null,null],[5,"rocksdb_iter_get_error","","",null,null],[5,"rocksdb_write","","",null,null],[5,"rocksdb_writebatch_create","","",null,null],[5,"rocksdb_writebatch_create_from","","",null,null],[5,"rocksdb_writebatch_destroy","","",null,null],[5,"rocksdb_writebatch_clear","","",null,null],[5,"rocksdb_writebatch_count","","",null,null],[5,"rocksdb_writebatch_put","","",null,null],[5,"rocksdb_writebatch_put_cf","","",null,null],[5,"rocksdb_writebatch_merge","","",null,null],[5,"rocksdb_writebatch_merge_cf","","",null,null],[5,"rocksdb_writebatch_delete","","",null,null],[5,"rocksdb_writebatch_delete_cf","","",null,null],[5,"rocksdb_writebatch_iterate","","",null,null],[5,"rocksdb_writebatch_data","","",null,null],[5,"rocksdb_options_set_comparator","","",null,null],[5,"rocksdb_comparator_create","","",null,null],[5,"rocksdb_comparator_destroy","","",null,null],[5,"rocksdb_open_column_families","","",null,null],[5,"rocksdb_create_column_family","","",null,null],[5,"rocksdb_drop_column_family","","",null,null],[5,"rocksdb_column_family_handle_destroy","","",null,null],[5,"rocksdb_slicetransform_create","","",null,null],[5,"rocksdb_slicetransform_create_fixed_prefix","","",null,null],[5,"rocksdb_slicetransform_create_noop","","",null,null],[5,"rocksdb_slicetransform_destroy","","",null,null],[5,"rocksdb_get_options_from_string","","",null,null],[6,"DBOptions","","",null,null],[6,"DBInstance","","",null,null],[6,"DBWriteOptions","","",null,null],[6,"DBReadOptions","","",null,null],[6,"DBMergeOperator","","",null,null],[6,"DBBlockBasedTableOptions","","",null,null],[6,"DBCache","","",null,null],[6,"DBFilterPolicy","","",null,null],[6,"DBSnapshot","","",null,null],[6,"DBIterator","","",null,null],[6,"DBCFHandle","","",null,null],[6,"DBWriteBatch","","",null,null],[6,"DBComparator","","",null,null],[6,"DBSliceTransform","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_BINARY_SEARCH","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_HASH_SEARCH","","",null,null]],"paths":[[4,"DBCompressionType"],[4,"DBCompactionStyle"],[4,"DBUniversalCompactionStyle"]]};
searchIndex["rpc"] = {"doc":"","items":[[0,"hex","rpc","Hex binary-to-text encoding",null,null],[8,"ToHex","rpc::hex","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",2,null],[13,"InvalidHexLength","","The input had an invalid length",2,null],[3,"MetaIoHandler","rpc","Request handler",null,null],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",null,null],[13,"V1","","Compatible only with JSON-RPC 1.x",3,null],[13,"V2","","Compatible only with JSON-RPC 2.0",3,null],[13,"Both","","Compatible with both",3,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Server","","jsonrpc http server instance",null,null],[4,"Error","","RPC Server startup error.",null,null],[13,"Io","","IO Error",4,null],[13,"Other","","Other Error (hyper)",4,null],[0,"v1","","",null,null],[3,"RawClient","rpc::v1","",null,null],[3,"RawClientCore","","",null,null],[3,"MinerClient","","",null,null],[3,"MinerClientCore","","",null,null],[3,"BlockChainClient","","",null,null],[3,"BlockChainClientCore","","",null,null],[3,"NetworkClient","","",null,null],[3,"NetworkClientCore","","",null,null],[0,"helpers","","",null,null],[0,"errors","rpc::v1::helpers","",null,null],[5,"unimplemented","rpc::v1::helpers::errors","",null,{"inputs":[{"name":"option"}],"output":{"name":"error"}}],[5,"invalid_params","","",null,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"error"}}],[5,"execution","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"block_not_found","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"block_at_height_not_found","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"transaction_not_found","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"transaction_output_not_found","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"transaction_of_side_branch","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"node_already_added","","",null,{"inputs":[],"output":{"name":"error"}}],[5,"node_not_added","","",null,{"inputs":[],"output":{"name":"error"}}],[5,"unknown","","",null,{"inputs":[],"output":{"name":"error"}}],[0,"impls","rpc::v1","",null,null],[3,"BlockChainClient","rpc::v1::impls","",null,null],[3,"BlockChainClientCore","","",null,null],[3,"MinerClient","","",null,null],[3,"MinerClientCore","","",null,null],[3,"RawClient","","",null,null],[3,"RawClientCore","","",null,null],[3,"NetworkClient","","",null,null],[3,"NetworkClientCore","","",null,null],[11,"new","rpc::v1","",5,{"inputs":[{"name":"magic"},{"name":"sharedstore"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"best_block_hash","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"block_hash","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"difficulty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"block","","",6,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"transaction_out","","",6,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"u32"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"transaction_out_set_info","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[{"name":"localnoderef"}],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_block_template","","",8,{"inputs":[{"name":"self"},{"name":"blocktemplaterequest"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"localnoderef"}],"output":{"name":"self"}}],[11,"do_create_raw_transaction","","",9,{"inputs":[{"name":"vec"},{"name":"transactionoutputs"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"send_raw_transaction","","",10,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[11,"create_raw_transaction","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"transactionoutputs"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"decode_raw_transaction","","",10,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[11,"get_raw_transaction","","",10,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"add_node","","",11,{"inputs":[{"name":"self"},{"name":"string"},{"name":"addnodeoperation"}],"output":{"name":"result"}}],[11,"node_info","","",11,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"connection_count","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[0,"traits","","",null,null],[8,"BlockChain","rpc::v1::traits","Parity-bitcoin blockchain data interface.",null,null],[10,"best_block_hash","","Get hash of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getbestblockhash\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"block_hash","","Get hash of block at given height. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockhash\", \"params\": [0], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"difficulty","","Get proof-of-work difficulty as a multiple of the minimum difficulty @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getdifficulty\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"block","","Get information on given block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblock\", \"params\": [\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"transaction_out","","Get details about an unspent transaction output. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxout\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", 0], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"u32"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"transaction_out_set_info","","Get statistics about the unspent transaction output set. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxoutsetinfo\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"Miner","","Partiy-bitcoin miner data interface.",null,null],[10,"get_block_template","","Get block template for mining. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",14,{"inputs":[{"name":"self"},{"name":"blocktemplaterequest"}],"output":{"name":"result"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",14,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"Raw","","Partiy-bitcoin raw data interface.",null,null],[10,"send_raw_transaction","","Adds transaction to the memory pool && relays it to the peers. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"sendrawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[10,"create_raw_transaction","","Create a transaction spending the given inputs and creating new outputs. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"createrawtransaction\", \"params\": [[{\"txid\":\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\",\"vout\":0}],{\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\":0.01}], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"transactionoutputs"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"decode_raw_transaction","","Return an object representing the serialized, hex-encoded transaction. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"decoderawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[10,"get_raw_transaction","","Return the raw transaction data. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getrawtransaction\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",15,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"Network","","Parity-bitcoin network interface",null,null],[10,"add_node","","Add/remove/connect to the node @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"add\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"remove\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"onetry\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"},{"name":"string"},{"name":"addnodeoperation"}],"output":{"name":"result"}}],[10,"node_info","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true] }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"connection_count","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",16,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[0,"types","rpc::v1","",null,null],[3,"BlockTemplate","rpc::v1::types","Block template as described in: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki",null,null],[12,"version","","The preferred block version",17,null],[12,"rules","","Specific block rules that are to be enforced",17,null],[12,"vbavailable","","Set of pending, supported versionbit (BIP 9) softfork deployments Keys: named softfork rules Values: identifies the bit number as indicating acceptance and readiness for given key",17,null],[12,"vbrequired","","Bit mask of versionbits the server requires set in submissions",17,null],[12,"previousblockhash","","The hash of previous (best known) block",17,null],[12,"transactions","","Contents of non-coinbase transactions that should be included in the next block",17,null],[12,"coinbaseaux","","Data that should be included in the coinbase's scriptSig content Keys: ignored Values: value to be included in scriptSig",17,null],[12,"coinbasevalue","","Maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)",17,null],[12,"coinbasetxn","","information for coinbase transaction",17,null],[12,"target","","The hash target",17,null],[12,"mintime","","The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)",17,null],[12,"mutable","","List of ways the block template may be changed, e.g. 'time', 'transactions', 'prevblock'",17,null],[12,"noncerange","","A range of valid nonces (constant 00000000ffffffff)",17,null],[12,"sigoplimit","","Limit of sigops in blocks",17,null],[12,"sizelimit","","Limit of block size",17,null],[12,"weightlimit","","Limit of block weight",17,null],[12,"curtime","","Current timestamp in seconds since epoch (Jan 1 1970 GMT)",17,null],[12,"bits","","Compressed target of next block",17,null],[12,"height","","The height of the next block",17,null],[3,"BlockTemplateTransaction","","Transaction data as included in `BlockTemplate`",null,null],[12,"data","","Transaction data encoded in hexadecimal",18,null],[12,"txid","","Transaction id encoded in little-endian hexadecimal",18,null],[12,"hash","","Hash encoded in little-endian hexadecimal (including witness data)",18,null],[12,"depends","","Transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is",18,null],[12,"fee","","Difference in value between transaction inputs and outputs (in Satoshis). For coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy). If key is not present, fee is unknown and clients MUST NOT assume there isn't one",18,null],[12,"sigops","","Total SigOps cost, as counted for purposes of block limits. If key is not present, sigop cost is unknown and clients MUST NOT assume it is zero.",18,null],[12,"weight","","Total transaction weight, as counted for purposes of block limits.",18,null],[12,"required","","If provided and true, this transaction must be in the final block",18,null],[3,"BlockTemplateRequest","","Block template request parameters as described in: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki",null,null],[12,"mode","","Request mode",19,null],[12,"capabilities","","Capabilities, supported by client",19,null],[12,"rules","","Softfork deployments, supported by client",19,null],[3,"Bytes","","Wrapper structure around vector of bytes.",null,null],[12,"0","","",20,null],[3,"VerboseBlock","","Verbose block information",null,null],[12,"hash","","Block hash",21,null],[12,"confirmations","","Number of confirmations. -1 if block is on the side chain",21,null],[12,"size","","Block size",21,null],[12,"strippedsize","","Block size, excluding witness data",21,null],[12,"weight","","Block weight",21,null],[12,"height","","Block height TODO: bitcoind always returns value, but we hold this value for main chain blocks only",21,null],[12,"version","","Block version",21,null],[12,"version_hex","","Block version as hex",21,null],[12,"merkleroot","","Merkle root of this block",21,null],[12,"tx","","Transactions ids",21,null],[12,"time","","Block time in seconds since epoch (Jan 1 1970 GMT)",21,null],[12,"mediantime","","Median block time in seconds since epoch (Jan 1 1970 GMT) TODO: bitcoind always returns value, but we can calculate this only if height(block) > 2",21,null],[12,"nonce","","Block nonce",21,null],[12,"bits","","Block nbits",21,null],[12,"difficulty","","Block difficulty",21,null],[12,"chainwork","","Expected number of hashes required to produce the chain up to this block (in hex)",21,null],[12,"previousblockhash","","Hash of previous block",21,null],[12,"nextblockhash","","Hash of next block",21,null],[3,"GetTxOutResponse","","gettxout response",null,null],[12,"bestblock","","Hash of the block this transaction output is included into. Why it's called 'best'? Who knows",22,null],[12,"confirmations","","Number of confirmations of this transaction",22,null],[12,"value","","Transaction value in BTC",22,null],[12,"script","","Script info",22,null],[12,"version","","This transaction version",22,null],[12,"coinbase","","Is this transactio a coinbase transaction?",22,null],[3,"GetTxOutSetInfoResponse","","",null,null],[3,"H160","","Hash serialization",null,null],[3,"H256","","Hash serialization",null,null],[3,"Transaction","","Transaction",null,null],[12,"hex","","Raw transaction",23,null],[12,"txid","","The transaction id (same as provided)",23,null],[12,"hash","","The transaction hash (differs from txid for witness transactions)",23,null],[12,"size","","The serialized transaction size",23,null],[12,"vsize","","The virtual transaction size (differs from size for witness transactions)",23,null],[12,"version","","The version",23,null],[12,"locktime","","The lock time",23,null],[12,"vin","","Transaction inputs",23,null],[12,"vout","","Transaction outputs",23,null],[12,"blockhash","","Hash of the block this transaction is included in",23,null],[12,"confirmations","","Number of confirmations of this transaction",23,null],[12,"time","","The transaction time in seconds since epoch (Jan 1 1970 GMT)",23,null],[12,"blocktime","","The block time in seconds since epoch (Jan 1 1970 GMT)",23,null],[3,"TransactionInput","","Transaction input",null,null],[12,"txid","","Previous transaction id",24,null],[12,"vout","","Previous transaction output index",24,null],[12,"sequence","","Sequence number",24,null],[3,"TransactionOutputWithAddress","","Transaction output of form \"address\": amount",null,null],[12,"address","","Receiver' address",25,null],[12,"amount","","Amount in BTC",25,null],[3,"TransactionOutputWithScriptData","","Trasaction output of form \"data\": serialized(output script data)",null,null],[12,"script_data","","Serialized script data",26,null],[3,"TransactionInputScript","","Transaction input script",null,null],[12,"asm","","Script code",27,null],[12,"hex","","Script hex",27,null],[3,"TransactionOutputScript","","Transaction output script",null,null],[12,"asm","","Script code",28,null],[12,"hex","","Script hex",28,null],[12,"req_sigs","","Number of required signatures",28,null],[12,"script_type","","Type of script",28,null],[12,"addresses","","Array of bitcoin addresses",28,null],[3,"SignedTransactionInput","","Signed transaction input",null,null],[12,"txid","","Previous transaction id",29,null],[12,"vout","","Previous transaction output index",29,null],[12,"script_sig","","Input script",29,null],[12,"sequence","","Sequence number",29,null],[12,"txinwitness","","Hex-encoded witness data (if any)",29,null],[3,"SignedTransactionOutput","","Signed transaction output",null,null],[12,"value","","Output value in BTC",30,null],[12,"n","","Output index",30,null],[12,"script","","Output script",30,null],[3,"TransactionOutputs","","Transaction outputs, which serializes/deserializes as KV-map",null,null],[12,"outputs","","Transaction outputs",31,null],[3,"U256","","Uint serialization.",null,null],[3,"NodeInfo","","",null,null],[12,"addednode","","",32,null],[12,"connected","","",32,null],[12,"addresses","","",32,null],[4,"BlockTemplateRequestMode","","Block template request mode",null,null],[13,"Template","","Work as described in BIP0022: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki",33,null],[13,"Proposal","","Work as described in BIP0023: https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki",33,null],[4,"GetBlockResponse","","Response to getblock RPC request",null,null],[13,"Raw","","When asking for short response",34,null],[13,"Verbose","","When asking for verbose response",34,null],[4,"ScriptType","","",null,null],[13,"NonStandard","","",35,null],[13,"PubKey","","",35,null],[13,"PubKeyHash","","",35,null],[13,"ScriptHash","","",35,null],[13,"Multisig","","",35,null],[13,"NullData","","",35,null],[13,"WitnessScript","","",35,null],[13,"WitnessKey","","",35,null],[4,"TransactionOutput","","Transaction output",null,null],[13,"Address","","Of form address: amount",36,null],[13,"ScriptData","","Of form data: script_data_bytes",36,null],[4,"GetRawTransactionResponse","","Return value of `getrawtransaction` method",null,null],[13,"Raw","","Return value when asking for raw transaction",37,null],[13,"Verbose","","Return value when asking for verbose transaction",37,null],[4,"AddNodeOperation","","",null,null],[13,"Add","","",38,null],[13,"Remove","","",38,null],[13,"OneTry","","",38,null],[0,"address","","",null,null],[3,"AddressVisitor","rpc::v1::types::address","",null,null],[5,"serialize","","",null,{"inputs":[{"name":"address"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"vec","","",null,null],[5,"serialize","rpc::v1::types::address::vec","",null,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","rpc::v1::types::address","",39,{"inputs":[],"output":{"name":"addressvisitor"}}],[11,"expecting","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","rpc::v1::types","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"blocktemplate"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"blocktemplate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"blocktemplate"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"blocktemplate"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"blocktemplatetransaction"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"blocktemplatetransaction"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"blocktemplatetransaction"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"blocktemplatetransaction"}}],[11,"from","","",17,{"inputs":[{"name":"blocktemplate"}],"output":{"name":"self"}}],[11,"from","","",18,{"inputs":[{"name":"indexedtransaction"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"blocktemplaterequestmode"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"blocktemplaterequestmode"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"blocktemplaterequest"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"blocktemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"blocktemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"blocktemplaterequest"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"bytes"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"new","","Simple constructor.",20,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"to_vec","","Convert back to vector",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",20,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"verboseblock"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"verboseblock"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"verboseblock"}],"output":{"name":"bool"}}],[11,"serialize","","",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"gettxoutresponse"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"gettxoutresponse"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",41,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_str","","",41,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",41,{"inputs":[{"name":"self"}],"output":{"name":"globalh256"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",41,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",42,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_str","","",42,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",42,{"inputs":[{"name":"self"}],"output":{"name":"globalh160"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",42,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"reversed","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"scripttype"}],"output":{"name":"bool"}}],[11,"from","","",35,{"inputs":[{"name":"globalscripttype"}],"output":{"name":"self"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"transactioninput"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"transactioninput"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"transactionoutputwithaddress"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"transactionoutputwithaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"transactionoutputwithscriptdata"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"transactionoutputwithscriptdata"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"transactionoutput"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"transactionoutput"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"transactionoutputs"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"transactionoutputs"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"transactioninputscript"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"transactioninputscript"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"transactionoutputscript"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"transactionoutputscript"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"signedtransactioninput"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"signedtransactioninput"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"signedtransactionoutput"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"signedtransactionoutput"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"getrawtransactionresponse"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"getrawtransactionresponse"}],"output":{"name":"bool"}}],[11,"serialize","","",37,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"u256"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"from","","",43,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_str","","",43,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",43,{"inputs":[{"name":"self"}],"output":{"name":"globalu256"}}],[11,"serialize","","",43,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"addnodeoperation"}],"output":{"name":"bool"}}],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"RawBlock","","Hex-encoded block",null,null],[6,"RawTransaction","","Hex-encoded transaction",null,null],[8,"Raw","rpc::v1","Partiy-bitcoin raw data interface.",null,null],[10,"send_raw_transaction","","Adds transaction to the memory pool && relays it to the peers. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"sendrawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[10,"create_raw_transaction","","Create a transaction spending the given inputs and creating new outputs. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"createrawtransaction\", \"params\": [[{\"txid\":\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\",\"vout\":0}],{\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\":0.01}], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"transactionoutputs"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"decode_raw_transaction","","Return an object representing the serialized, hex-encoded transaction. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"decoderawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"rawtransaction"}],"output":{"name":"result"}}],[10,"get_raw_transaction","","Return the raw transaction data. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getrawtransaction\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",15,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",15,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"Miner","rpc::v1","Partiy-bitcoin miner data interface.",null,null],[10,"get_block_template","","Get block template for mining. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",14,{"inputs":[{"name":"self"},{"name":"blocktemplaterequest"}],"output":{"name":"result"}}],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",14,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"BlockChain","rpc::v1","Parity-bitcoin blockchain data interface.",null,null],[10,"best_block_hash","","Get hash of best block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getbestblockhash\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"block_hash","","Get hash of block at given height. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockhash\", \"params\": [0], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"difficulty","","Get proof-of-work difficulty as a multiple of the minimum difficulty @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getdifficulty\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"block","","Get information on given block. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblock\", \"params\": [\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"transaction_out","","Get details about an unspent transaction output. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxout\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", 0], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"u32"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"transaction_out_set_info","","Get statistics about the unspent transaction output set. @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxoutsetinfo\", \"params\": [], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[8,"Network","rpc::v1","Parity-bitcoin network interface",null,null],[10,"add_node","","Add/remove/connect to the node @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"add\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"remove\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"onetry\"], \"id\":1 }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"},{"name":"string"},{"name":"addnodeoperation"}],"output":{"name":"result"}}],[10,"node_info","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true] }' -H 'content-type: application/json;' http://127.0.0.1:8332/ @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"trailing"}],"output":{"name":"result"}}],[10,"connection_count","","Query node(s) info @curl-example: curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: application/json;' http://127.0.0.1:8332/",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",16,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[0,"rpc_server","rpc","",null,null],[5,"start_http","rpc::rpc_server","Start http server asynchronously and returns result with `Server` handle on success or an error.",null,{"inputs":[{"name":"socketaddr"},{"name":"option"},{"name":"option"},{"name":"metaiohandler"}],"output":{"name":"result"}}],[11,"description","rpc::hex","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","rpc","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",44,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_compatibility","","Creates new `MetaIoHandler` compatible with specified protocol version.",45,{"inputs":[{"name":"compatibility"}],"output":{"name":"metaiohandler"}}],[11,"new","","Creates new `MetaIoHandler`",45,{"inputs":[{"name":"compatibility"},{"name":"s"}],"output":{"name":"metaiohandler"}}],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",45,{"inputs":[{"name":"s"}],"output":{"name":"metaiohandler"}}],[11,"add_alias","","Adds an alias to a method.",45,null],[11,"add_method","","Adds new supported synchronous method",45,null],[11,"add_async_method","","Adds new supported asynchronous method",45,null],[11,"add_notification","","Adds new supported notification",45,null],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",45,null],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",45,null],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",45,null],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"option"}}],[11,"handle_request","","Handle given request asynchronously.",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"box"}}],[11,"handle_rpc_request","","Handle deserialized RPC request.",45,{"inputs":[{"name":"self"},{"name":"request"},{"name":"t"}],"output":{"name":"box"}}],[11,"handle_call","","Handle single call asynchronously.",45,{"inputs":[{"name":"self"},{"name":"call"},{"name":"t"}],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"compatibility"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"metaiohandler"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"compatibility"}}],[11,"from","","",45,{"inputs":[{"name":"iohandler"}],"output":{"name":"metaiohandler"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",46,null],[11,"id","","Return the ID of the represented Core",46,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"address","","Returns address of this server",44,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"close","","Closes the server.",44,null],[11,"wait","","Will block, waiting for the server to finish.",44,null],[11,"to_delegate","rpc::v1::traits","Transform this into an `IoDelegate`, automatically wrapping the parameters.",13,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",14,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",15,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}],[11,"to_delegate","","Transform this into an `IoDelegate`, automatically wrapping the parameters.",16,{"inputs":[{"name":"self"}],"output":{"name":"iodelegate"}}]],"paths":[[8,"ToHex"],[8,"FromHex"],[4,"FromHexError"],[4,"Compatibility"],[4,"Error"],[3,"BlockChainClientCore"],[3,"BlockChainClient"],[3,"MinerClientCore"],[3,"MinerClient"],[3,"RawClientCore"],[3,"RawClient"],[3,"NetworkClient"],[3,"NetworkClientCore"],[8,"BlockChain"],[8,"Miner"],[8,"Raw"],[8,"Network"],[3,"BlockTemplate"],[3,"BlockTemplateTransaction"],[3,"BlockTemplateRequest"],[3,"Bytes"],[3,"VerboseBlock"],[3,"GetTxOutResponse"],[3,"Transaction"],[3,"TransactionInput"],[3,"TransactionOutputWithAddress"],[3,"TransactionOutputWithScriptData"],[3,"TransactionInputScript"],[3,"TransactionOutputScript"],[3,"SignedTransactionInput"],[3,"SignedTransactionOutput"],[3,"TransactionOutputs"],[3,"NodeInfo"],[4,"BlockTemplateRequestMode"],[4,"GetBlockResponse"],[4,"ScriptType"],[4,"TransactionOutput"],[4,"GetRawTransactionResponse"],[4,"AddNodeOperation"],[3,"AddressVisitor"],[3,"GetTxOutSetInfoResponse"],[3,"H256"],[3,"H160"],[3,"U256"],[3,"Server"],[3,"MetaIoHandler"],[3,"Remote"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["scoped_tls"] = {"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",null,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"scoped_thread_local","","",null,null]],"paths":[[3,"ScopedKey"]]};
searchIndex["script"] = {"doc":"","items":[[0,"bytes","script","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","script::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[0,"hash","script","Fixed-size hashes",null,null],[3,"H32","script::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[3,"Builder","script","Script builder",null,null],[3,"VerificationFlags","","Script interpreter verification flags",null,null],[12,"none","","",0,null],[12,"verify_p2sh","","Evaluate P2SH subscripts (softfork safe, BIP16).",0,null],[12,"verify_strictenc","","Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure. Evaluating a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) by checksig causes script failure. (softfork safe, but not used or intended as a consensus rule).",0,null],[12,"verify_dersig","","Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)",0,null],[12,"verify_low_s","","Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure (softfork safe, BIP62 rule 5).",0,null],[12,"verify_nulldummy","","verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).",0,null],[12,"verify_sigpushonly","","Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).",0,null],[12,"verify_minimaldata","","Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating any other push causes the script to fail (BIP62 rule 3). In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4). (softfork safe)",0,null],[12,"verify_discourage_upgradable_nops","","Discourage use of NOPs reserved for upgrades (NOP1-10)",0,null],[12,"verify_cleanstack","","Require that only a single stack element remains after evaluation. This changes the success criterion from \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\". (softfork safe, BIP62 rule 6) Note: CLEANSTACK should never be used without P2SH or WITNESS.",0,null],[12,"verify_locktime","","Verify CHECKLOCKTIMEVERIFY",0,null],[12,"verify_checksequence","","support CHECKSEQUENCEVERIFY opcode",0,null],[12,"verify_witness","","Support segregated witness",0,null],[12,"verify_discourage_upgradable_witness_program","","Making v1-v16 witness program non-standard",0,null],[3,"Num","","Script numeric",null,null],[3,"Script","","Serialized script, used inside transaction inputs and outputs.",null,null],[3,"ScriptAddress","","Address from Script",null,null],[12,"kind","","The type of the address.",1,null],[12,"hash","","Public key hash.",1,null],[3,"TransactionInputSigner","","",null,null],[12,"version","","",2,null],[12,"inputs","","",2,null],[12,"outputs","","",2,null],[12,"lock_time","","",2,null],[3,"UnsignedTransactionInput","","",null,null],[12,"previous_output","","",3,null],[12,"sequence","","",3,null],[3,"Stack","","",null,null],[3,"NoopSignatureChecker","","",null,null],[3,"TransactionSignatureChecker","","",null,null],[12,"signer","","",4,null],[12,"input_index","","",4,null],[4,"Error","","Interpreter errors",null,null],[13,"Unknown","","",5,null],[13,"EvalFalse","","",5,null],[13,"ReturnOpcode","","",5,null],[13,"ScriptSize","","",5,null],[13,"PushSize","","",5,null],[13,"OpCount","","",5,null],[13,"StackSize","","",5,null],[13,"NumberOverflow","","",5,null],[13,"NumberNotMinimallyEncoded","","",5,null],[13,"SigCount","","",5,null],[13,"PubkeyCount","","",5,null],[13,"Verify","","",5,null],[13,"EqualVerify","","",5,null],[13,"CheckSigVerify","","",5,null],[13,"NumEqualVerify","","",5,null],[13,"BadOpcode","","",5,null],[13,"DisabledOpcode","","",5,null],[13,"InvalidStackOperation","","",5,null],[13,"InvalidAltstackOperation","","",5,null],[13,"UnbalancedConditional","","",5,null],[13,"NegativeLocktime","","",5,null],[13,"UnsatisfiedLocktime","","",5,null],[13,"SignatureHashtype","","",5,null],[13,"SignatureDer","","",5,null],[13,"Minimaldata","","",5,null],[13,"SignaturePushOnly","","",5,null],[13,"SignatureHighS","","",5,null],[13,"SignatureNullDummy","","",5,null],[13,"PubkeyType","","",5,null],[13,"Cleanstack","","",5,null],[13,"DiscourageUpgradableNops","","",5,null],[4,"Opcode","","Script opcodes.",null,null],[13,"OP_0","","",6,null],[13,"OP_PUSHBYTES_1","","",6,null],[13,"OP_PUSHBYTES_2","","",6,null],[13,"OP_PUSHBYTES_3","","",6,null],[13,"OP_PUSHBYTES_4","","",6,null],[13,"OP_PUSHBYTES_5","","",6,null],[13,"OP_PUSHBYTES_6","","",6,null],[13,"OP_PUSHBYTES_7","","",6,null],[13,"OP_PUSHBYTES_8","","",6,null],[13,"OP_PUSHBYTES_9","","",6,null],[13,"OP_PUSHBYTES_10","","",6,null],[13,"OP_PUSHBYTES_11","","",6,null],[13,"OP_PUSHBYTES_12","","",6,null],[13,"OP_PUSHBYTES_13","","",6,null],[13,"OP_PUSHBYTES_14","","",6,null],[13,"OP_PUSHBYTES_15","","",6,null],[13,"OP_PUSHBYTES_16","","",6,null],[13,"OP_PUSHBYTES_17","","",6,null],[13,"OP_PUSHBYTES_18","","",6,null],[13,"OP_PUSHBYTES_19","","",6,null],[13,"OP_PUSHBYTES_20","","",6,null],[13,"OP_PUSHBYTES_21","","",6,null],[13,"OP_PUSHBYTES_22","","",6,null],[13,"OP_PUSHBYTES_23","","",6,null],[13,"OP_PUSHBYTES_24","","",6,null],[13,"OP_PUSHBYTES_25","","",6,null],[13,"OP_PUSHBYTES_26","","",6,null],[13,"OP_PUSHBYTES_27","","",6,null],[13,"OP_PUSHBYTES_28","","",6,null],[13,"OP_PUSHBYTES_29","","",6,null],[13,"OP_PUSHBYTES_30","","",6,null],[13,"OP_PUSHBYTES_31","","",6,null],[13,"OP_PUSHBYTES_32","","",6,null],[13,"OP_PUSHBYTES_33","","",6,null],[13,"OP_PUSHBYTES_34","","",6,null],[13,"OP_PUSHBYTES_35","","",6,null],[13,"OP_PUSHBYTES_36","","",6,null],[13,"OP_PUSHBYTES_37","","",6,null],[13,"OP_PUSHBYTES_38","","",6,null],[13,"OP_PUSHBYTES_39","","",6,null],[13,"OP_PUSHBYTES_40","","",6,null],[13,"OP_PUSHBYTES_41","","",6,null],[13,"OP_PUSHBYTES_42","","",6,null],[13,"OP_PUSHBYTES_43","","",6,null],[13,"OP_PUSHBYTES_44","","",6,null],[13,"OP_PUSHBYTES_45","","",6,null],[13,"OP_PUSHBYTES_46","","",6,null],[13,"OP_PUSHBYTES_47","","",6,null],[13,"OP_PUSHBYTES_48","","",6,null],[13,"OP_PUSHBYTES_49","","",6,null],[13,"OP_PUSHBYTES_50","","",6,null],[13,"OP_PUSHBYTES_51","","",6,null],[13,"OP_PUSHBYTES_52","","",6,null],[13,"OP_PUSHBYTES_53","","",6,null],[13,"OP_PUSHBYTES_54","","",6,null],[13,"OP_PUSHBYTES_55","","",6,null],[13,"OP_PUSHBYTES_56","","",6,null],[13,"OP_PUSHBYTES_57","","",6,null],[13,"OP_PUSHBYTES_58","","",6,null],[13,"OP_PUSHBYTES_59","","",6,null],[13,"OP_PUSHBYTES_60","","",6,null],[13,"OP_PUSHBYTES_61","","",6,null],[13,"OP_PUSHBYTES_62","","",6,null],[13,"OP_PUSHBYTES_63","","",6,null],[13,"OP_PUSHBYTES_64","","",6,null],[13,"OP_PUSHBYTES_65","","",6,null],[13,"OP_PUSHBYTES_66","","",6,null],[13,"OP_PUSHBYTES_67","","",6,null],[13,"OP_PUSHBYTES_68","","",6,null],[13,"OP_PUSHBYTES_69","","",6,null],[13,"OP_PUSHBYTES_70","","",6,null],[13,"OP_PUSHBYTES_71","","",6,null],[13,"OP_PUSHBYTES_72","","",6,null],[13,"OP_PUSHBYTES_73","","",6,null],[13,"OP_PUSHBYTES_74","","",6,null],[13,"OP_PUSHBYTES_75","","",6,null],[13,"OP_PUSHDATA1","","",6,null],[13,"OP_PUSHDATA2","","",6,null],[13,"OP_PUSHDATA4","","",6,null],[13,"OP_1NEGATE","","",6,null],[13,"OP_RESERVED","","",6,null],[13,"OP_1","","",6,null],[13,"OP_2","","",6,null],[13,"OP_3","","",6,null],[13,"OP_4","","",6,null],[13,"OP_5","","",6,null],[13,"OP_6","","",6,null],[13,"OP_7","","",6,null],[13,"OP_8","","",6,null],[13,"OP_9","","",6,null],[13,"OP_10","","",6,null],[13,"OP_11","","",6,null],[13,"OP_12","","",6,null],[13,"OP_13","","",6,null],[13,"OP_14","","",6,null],[13,"OP_15","","",6,null],[13,"OP_16","","",6,null],[13,"OP_NOP","","",6,null],[13,"OP_VER","","",6,null],[13,"OP_IF","","",6,null],[13,"OP_NOTIF","","",6,null],[13,"OP_VERIF","","",6,null],[13,"OP_VERNOTIF","","",6,null],[13,"OP_ELSE","","",6,null],[13,"OP_ENDIF","","",6,null],[13,"OP_VERIFY","","",6,null],[13,"OP_RETURN","","",6,null],[13,"OP_TOALTSTACK","","",6,null],[13,"OP_FROMALTSTACK","","",6,null],[13,"OP_2DROP","","",6,null],[13,"OP_2DUP","","",6,null],[13,"OP_3DUP","","",6,null],[13,"OP_2OVER","","",6,null],[13,"OP_2ROT","","",6,null],[13,"OP_2SWAP","","",6,null],[13,"OP_IFDUP","","",6,null],[13,"OP_DEPTH","","",6,null],[13,"OP_DROP","","",6,null],[13,"OP_DUP","","",6,null],[13,"OP_NIP","","",6,null],[13,"OP_OVER","","",6,null],[13,"OP_PICK","","",6,null],[13,"OP_ROLL","","",6,null],[13,"OP_ROT","","",6,null],[13,"OP_SWAP","","",6,null],[13,"OP_TUCK","","",6,null],[13,"OP_CAT","","",6,null],[13,"OP_SUBSTR","","",6,null],[13,"OP_LEFT","","",6,null],[13,"OP_RIGHT","","",6,null],[13,"OP_SIZE","","",6,null],[13,"OP_INVERT","","",6,null],[13,"OP_AND","","",6,null],[13,"OP_OR","","",6,null],[13,"OP_XOR","","",6,null],[13,"OP_EQUAL","","",6,null],[13,"OP_EQUALVERIFY","","",6,null],[13,"OP_RESERVED1","","",6,null],[13,"OP_RESERVED2","","",6,null],[13,"OP_1ADD","","",6,null],[13,"OP_1SUB","","",6,null],[13,"OP_2MUL","","",6,null],[13,"OP_2DIV","","",6,null],[13,"OP_NEGATE","","",6,null],[13,"OP_ABS","","",6,null],[13,"OP_NOT","","",6,null],[13,"OP_0NOTEQUAL","","",6,null],[13,"OP_ADD","","",6,null],[13,"OP_SUB","","",6,null],[13,"OP_MUL","","",6,null],[13,"OP_DIV","","",6,null],[13,"OP_MOD","","",6,null],[13,"OP_LSHIFT","","",6,null],[13,"OP_RSHIFT","","",6,null],[13,"OP_BOOLAND","","",6,null],[13,"OP_BOOLOR","","",6,null],[13,"OP_NUMEQUAL","","",6,null],[13,"OP_NUMEQUALVERIFY","","",6,null],[13,"OP_NUMNOTEQUAL","","",6,null],[13,"OP_LESSTHAN","","",6,null],[13,"OP_GREATERTHAN","","",6,null],[13,"OP_LESSTHANOREQUAL","","",6,null],[13,"OP_GREATERTHANOREQUAL","","",6,null],[13,"OP_MIN","","",6,null],[13,"OP_MAX","","",6,null],[13,"OP_WITHIN","","",6,null],[13,"OP_RIPEMD160","","",6,null],[13,"OP_SHA1","","",6,null],[13,"OP_SHA256","","",6,null],[13,"OP_HASH160","","",6,null],[13,"OP_HASH256","","",6,null],[13,"OP_CODESEPARATOR","","",6,null],[13,"OP_CHECKSIG","","",6,null],[13,"OP_CHECKSIGVERIFY","","",6,null],[13,"OP_CHECKMULTISIG","","",6,null],[13,"OP_CHECKMULTISIGVERIFY","","",6,null],[13,"OP_NOP1","","",6,null],[13,"OP_CHECKLOCKTIMEVERIFY","","",6,null],[13,"OP_CHECKSEQUENCEVERIFY","","",6,null],[13,"OP_NOP4","","",6,null],[13,"OP_NOP5","","",6,null],[13,"OP_NOP6","","",6,null],[13,"OP_NOP7","","",6,null],[13,"OP_NOP8","","",6,null],[13,"OP_NOP9","","",6,null],[13,"OP_NOP10","","",6,null],[4,"ScriptType","","Classified script type",null,null],[13,"NonStandard","","",7,null],[13,"PubKey","","",7,null],[13,"PubKeyHash","","",7,null],[13,"ScriptHash","","",7,null],[13,"Multisig","","",7,null],[13,"NullData","","",7,null],[13,"WitnessScript","","",7,null],[13,"WitnessKey","","",7,null],[5,"eval_script","","Evaluautes the script",null,{"inputs":[{"name":"stack"},{"name":"script"},{"name":"verificationflags"},{"name":"signaturechecker"},{"name":"signatureversion"}],"output":{"name":"result"}}],[5,"verify_script","","Verifies script signature and pubkey",null,{"inputs":[{"name":"script"},{"name":"script"},{"name":"verificationflags"},{"name":"signaturechecker"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"builder"}}],[11,"build_p2pkh","","Builds p2pkh script pubkey",8,{"inputs":[{"name":"addresshash"}],"output":{"name":"script"}}],[11,"build_p2sh","","Builds p2sh script pubkey",8,{"inputs":[{"name":"addresshash"}],"output":{"name":"script"}}],[11,"push_opcode","","Pushes opcode to the end of script",8,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"push_bool","","Appends bool push operation to the end of script",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"push_num","","Appends num push operation to the end of script",8,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"self"}}],[11,"push_bytes","","Appends bytes push operation to the end od script",8,null],[11,"push_data","","Appends data push operation to the end of script",8,null],[11,"return_bytes","","Appends `OP_RETURN` operation to the end of script",8,null],[11,"push_invalid_opcode","","Pushes invalid opcode to the end of script",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_script","","Builds final script",8,{"inputs":[{"name":"self"}],"output":{"name":"script"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"verificationflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"verificationflags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"verificationflags"}],"output":{"name":"bool"}}],[11,"verify_p2sh","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"verify_locktime","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"verify_checksequence","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"verify_dersig","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"num"}}],[11,"from","","",9,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_slice","","",9,null],[11,"to_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"is_negative","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abs","","",9,{"inputs":[{"name":"self"}],"output":{"name":"num"}}],[11,"bitand","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"neg","","",9,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"is_disabled","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_countable","","Returns true if opcode is countable",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_simple_push","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_push_value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_within_op_n","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"decode_op_n","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"scripttype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scriptaddress"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"scriptaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_p2pkh","","Creates P2PKH-type ScriptAddress",1,{"inputs":[{"name":"addresshash"}],"output":{"name":"self"}}],[11,"new_p2sh","","Creates P2SH-type ScriptAddress",1,{"inputs":[{"name":"addresshash"}],"output":{"name":"self"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","script::bytes","",11,{"inputs":[{"name":"script"}],"output":{"name":"self"}}],[11,"new","script","Script constructor.",10,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"to_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"is_pay_to_public_key_hash","","Extra-fast test for pay-to-public-key-hash (P2PKH) scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pay_to_public_key","","Extra-fast test for pay-to-public-key (P2PK) scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pay_to_script_hash","","Extra-fast test for pay-to-script-hash (P2SH) scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pay_to_witness_key_hash","","Extra-fast test for pay-to-witness-key-hash scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pay_to_witness_script_hash","","Extra-fast test for pay-to-witness-script-hash scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multisig_script","","Extra-fast test for multisig scripts.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null_data_script","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"subscript","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"script"}}],[11,"find_and_delete","","",10,null],[11,"get_opcode","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_instruction","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"take","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"without_separators","","Returns Script without OP_CODESEPARATOR opcodes",10,{"inputs":[{"name":"self"}],"output":{"name":"script"}}],[11,"is_push_only","","Returns true if script contains only push opcodes",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"script_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"scripttype"}}],[11,"iter","","",10,{"inputs":[{"name":"self"}],"output":{"name":"instructions"}}],[11,"opcodes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"opcodes"}}],[11,"sigops_count","","",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"num_signatures_required","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"extract_destinations","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pay_to_script_hash_sigops","","",10,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"usize"}}],[11,"deref","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"transactioninput"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"signature_hash","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"script"},{"name":"u32"}],"output":{"name":"h256"}}],[11,"signed_input","","input_index - index of input to sign script_pubkey - script_pubkey of input's previous_output pubkey",2,{"inputs":[{"name":"self"},{"name":"keypair"},{"name":"usize"},{"name":"script"},{"name":"u32"}],"output":{"name":"transactioninput"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"stack"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"require","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"last","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pop","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"top","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"remove","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dup","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"over","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"rot","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"swap","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nip","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tuck","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_signature","","",13,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"public"},{"name":"script"},{"name":"u32"},{"name":"signatureversion"}],"output":{"name":"bool"}}],[11,"check_lock_time","","",13,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"check_sequence","","",13,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"check_signature","","",4,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"public"},{"name":"script"},{"name":"u32"},{"name":"signatureversion"}],"output":{"name":"bool"}}],[11,"check_lock_time","","",4,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"check_sequence","","",4,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[8,"SignatureChecker","","Checks transaction signature",null,null],[10,"check_signature","","",14,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"public"},{"name":"script"},{"name":"u32"},{"name":"signatureversion"}],"output":{"name":"bool"}}],[10,"check_lock_time","","",14,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[10,"check_sequence","","",14,{"inputs":[{"name":"self"},{"name":"num"}],"output":{"name":"bool"}}],[11,"new","script::bytes","",11,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",11,null],[11,"serialized_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","script::hash","",15,null],[11,"serialized_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",16,null],[11,"serialized_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",17,null],[11,"serialized_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",18,null],[11,"serialized_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",19,null],[11,"serialized_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",20,null],[11,"serialized_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",21,null],[11,"serialized_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",22,null],[11,"serialized_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","script::bytes","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","script::hash","",15,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"hash","script::bytes","",11,null],[11,"hash","script::hash","",15,null],[11,"hash","","",16,null],[11,"hash","","",17,null],[11,"hash","","",18,null],[11,"hash","","",19,null],[11,"hash","","",20,null],[11,"hash","","",21,null],[11,"hash","","",22,null],[11,"deref","script::bytes","",11,null],[11,"deref","","",23,null],[11,"deref","script::hash","",15,null],[11,"deref","","",16,null],[11,"deref","","",17,null],[11,"deref","","",18,null],[11,"deref","","",19,null],[11,"deref","","",20,null],[11,"deref","","",21,null],[11,"deref","","",22,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","script::bytes","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","script::hash","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","script::bytes","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","script::hash","",15,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","script::bytes","",11,null],[11,"deref_mut","","",23,null],[11,"deref_mut","script::hash","",15,null],[11,"deref_mut","","",16,null],[11,"deref_mut","","",17,null],[11,"deref_mut","","",18,null],[11,"deref_mut","","",19,null],[11,"deref_mut","","",20,null],[11,"deref_mut","","",21,null],[11,"deref_mut","","",22,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","script::bytes","",11,null],[11,"as_mut","","",23,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","script::hash","",15,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","script::bytes","",11,null],[11,"as_ref","","",23,null],[11,"as_ref","script::hash","",15,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","script::bytes","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","script::hash","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","script::bytes","",11,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","script::hash","",15,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","script::bytes","",11,null],[11,"from","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","script::hash","",15,null],[11,"from","","",15,null],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",15,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",16,null],[11,"from","","",16,null],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",16,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",17,null],[11,"from","","",17,null],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",18,null],[11,"from","","",18,null],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",20,null],[11,"from","","",20,null],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",21,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",22,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","script::bytes","",23,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"take","script::hash","",15,null],[11,"reversed","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",15,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",16,null],[11,"reversed","","",16,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",16,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",17,null],[11,"reversed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",17,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",18,null],[11,"reversed","","",18,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",18,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",19,null],[11,"reversed","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",19,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",20,null],[11,"reversed","","",20,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",20,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",21,null],[11,"reversed","","",21,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",21,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",22,null],[11,"reversed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",22,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"VerificationFlags"],[3,"ScriptAddress"],[3,"TransactionInputSigner"],[3,"UnsignedTransactionInput"],[3,"TransactionSignatureChecker"],[4,"Error"],[4,"Opcode"],[4,"ScriptType"],[3,"Builder"],[3,"Num"],[3,"Script"],[3,"Bytes"],[3,"Stack"],[3,"NoopSignatureChecker"],[8,"SignatureChecker"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"TaggedBytes"]]};
searchIndex["secp256k1"] = {"doc":"Secp256k1 Rust bindings for Pieter Wuille's secp256k1 library, which is used for fast and accurate manipulation of ECDSA signatures on the secp256k1 curve. Such signatures are used extensively by the Bitcoin network and its derivatives.","items":[[3,"RecoveryId","secp256k1","A tag used for recovering the public key from a compact signature",null,null],[3,"Signature","","An ECDSA signature",null,null],[3,"RecoverableSignature","","An ECDSA signature with a recovery ID for pubkey recovery",null,null],[3,"Message","","A (hashed) message input to an ECDSA signature",null,null],[3,"Secp256k1","","The secp256k1 engine, used to execute all signature operations",null,null],[4,"Error","","An ECDSA error",null,null],[13,"IncapableContext","","A `Secp256k1` was used for an operation, but it was not created to support this (so necessary precomputations have not been done)",0,null],[13,"IncorrectSignature","","Signature failed verification",0,null],[13,"InvalidMessage","","Badly sized message",0,null],[13,"InvalidPublicKey","","Bad public key",0,null],[13,"InvalidSignature","","Bad signature",0,null],[13,"InvalidSecretKey","","Bad secret key",0,null],[13,"InvalidRecoveryId","","Bad recovery id",0,null],[4,"ContextFlag","","Flags used to determine the capabilities of a `Secp256k1` object; the more capabilities, the more expensive it is to create.",null,null],[13,"None","","Can neither sign nor verify signatures (cheapest to create, useful for cases not involving signatures, such as creating keys from slices)",1,null],[13,"SignOnly","","Can sign but not verify signatures",1,null],[13,"VerifyOnly","","Can verify but not create signatures",1,null],[13,"Full","","Can verify and create signatures",1,null],[0,"constants","","Constants Constants related to the API and the underlying curve",null,null],[17,"MESSAGE_SIZE","secp256k1::constants","The size (in bytes) of a message",null,null],[17,"SECRET_KEY_SIZE","","The size (in bytes) of a secret key",null,null],[17,"PUBLIC_KEY_SIZE","","The size (in bytes) of a public key array. This only needs to be 65 but must be 72 for compatibility with the `ArrayVec` library.",null,null],[17,"UNCOMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of an uncompressed public key",null,null],[17,"COMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of a compressed public key",null,null],[17,"MAX_SIGNATURE_SIZE","","The maximum size of a signature",null,null],[17,"SCHNORR_SIGNATURE_SIZE","","The size of a Schnorr signature",null,null],[17,"COMPACT_SIGNATURE_SIZE","","The maximum size of a compact signature",null,null],[17,"CURVE_ORDER","","The order of the secp256k1 curve",null,null],[17,"GENERATOR_X","","The X coordinate of the generator",null,null],[17,"GENERATOR_Y","","The Y coordinate of the generator",null,null],[0,"ecdh","secp256k1","ECDH Support for shared secret computations",null,null],[3,"SharedSecret","secp256k1::ecdh","A tag used for recovering the public key from a compact signature",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sharedsecret"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new shared secret from a pubkey and secret key",2,{"inputs":[{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",2,{"inputs":[{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",2,null],[11,"from","","",2,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[0,"ffi","secp256k1","FFI bindings Direct bindings to the underlying C library functions. These should not be needed for most users.",null,null],[3,"Context","secp256k1::ffi","A Secp256k1 context, containing various precomputed values and such needed to do elliptic curve computations. If you create one of these with `secp256k1_context_create` you MUST destroy it with `secp256k1_context_destroy`, or else you will have a memory leak.",null,null],[3,"PublicKey","","Library-internal representation of a Secp256k1 public key",null,null],[3,"Signature","","Library-internal representation of a Secp256k1 signature",null,null],[3,"RecoverableSignature","","Library-internal representation of a Secp256k1 signature + recovery ID",null,null],[3,"SharedSecret","","Library-internal representation of an ECDH shared secret",null,null],[7,"secp256k1_nonce_function_rfc6979","","",null,null],[7,"secp256k1_nonce_function_default","","",null,null],[5,"secp256k1_context_create","","",null,null],[5,"secp256k1_context_clone","","",null,null],[5,"secp256k1_context_destroy","","",null,null],[5,"secp256k1_context_randomize","","",null,null],[5,"secp256k1_ec_pubkey_parse","","",null,null],[5,"secp256k1_ec_pubkey_serialize","","",null,null],[5,"secp256k1_ecdsa_signature_parse_der","","",null,null],[5,"ecdsa_signature_parse_der_lax","","",null,null],[5,"secp256k1_ecdsa_signature_serialize_der","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_parse_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_serialize_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_convert","","",null,null],[5,"secp256k1_ecdsa_signature_normalize","","",null,null],[5,"secp256k1_ecdsa_verify","","",null,null],[5,"secp256k1_ecdsa_sign","","",null,null],[5,"secp256k1_ecdsa_sign_recoverable","","",null,null],[5,"secp256k1_ecdsa_recover","","",null,null],[5,"secp256k1_schnorr_sign","","",null,null],[5,"secp256k1_schnorr_verify","","",null,null],[5,"secp256k1_schnorr_recover","","",null,null],[5,"secp256k1_ec_seckey_verify","","",null,null],[5,"secp256k1_ec_pubkey_create","","",null,null],[5,"secp256k1_ec_privkey_tweak_add","","",null,null],[5,"secp256k1_ec_pubkey_tweak_add","","",null,null],[5,"secp256k1_ec_privkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_combine","","",null,null],[5,"secp256k1_ecdh","","",null,null],[5,"secp256k1_ecdh_raw","","",null,null],[5,"secp256k1_ec_privkey_inverse","","",null,null],[6,"NonceFn","","A nonce generation function. Ordinary users of the library never need to see this type; only if you need to control nonce generation do you need to use it. I have deliberately made this hard to do: you have to write your own wrapper around the FFI functions to use it. And it's an unsafe type. Nonces are generated deterministically by RFC6979 by default; there should be no need to ever change this.",null,null],[17,"SECP256K1_START_NONE","","Flag for context to enable no precomputation",null,null],[17,"SECP256K1_START_VERIFY","","Flag for context to enable verification precomputation",null,null],[17,"SECP256K1_START_SIGN","","Flag for context to enable signing precomputation",null,null],[17,"SECP256K1_SER_UNCOMPRESSED","","Flag for keys to indicate uncompressed serialization format",null,null],[17,"SECP256K1_SER_COMPRESSED","","Flag for keys to indicate compressed serialization format",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",4,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",4,null],[11,"len","","Returns the length of the object as an array",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"publickey"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",4,{"inputs":[],"output":{"name":"publickey"}}],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",4,{"inputs":[],"output":{"name":"publickey"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",5,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",5,null],[11,"len","","Returns the length of the object as an array",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",6,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",6,null],[11,"len","","Returns the length of the object as an array",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",5,{"inputs":[],"output":{"name":"signature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",5,{"inputs":[],"output":{"name":"signature"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",6,{"inputs":[],"output":{"name":"recoverablesignature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",6,{"inputs":[],"output":{"name":"recoverablesignature"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",7,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",7,null],[11,"len","","Returns the length of the object as an array",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sharedsecret"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",7,{"inputs":[],"output":{"name":"sharedsecret"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",7,{"inputs":[],"output":{"name":"sharedsecret"}}],[0,"key","secp256k1","Public and secret keys",null,null],[3,"SecretKey","secp256k1::key","Secret 256-bit key used as `x` in an ECDSA signature",null,null],[3,"PublicKey","","A Secp256k1 public key, used for verification of signatures",null,null],[7,"ONE","","The number 1 encoded as a secret key Deprecated; `static` is not what I want; use `ONE_KEY` instead",null,null],[17,"ZERO_KEY","","The number 0 encoded as a secret key",null,null],[17,"ONE_KEY","","The number 1 encoded as a secret key",null,null],[17,"MINUS_ONE_KEY","","The number -1 encoded as a secret key",null,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",8,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",8,null],[11,"len","","Returns the length of the object as an array",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"secretkey"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"publickey"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"new","","Creates a new random secret key",8,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"secretkey"}}],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",8,null],[11,"add_assign","","Adds one secret key to another, modulo the curve order",8,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"mul_assign","","Multiplies one secret key to another, modulo the curve order",8,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"inv_assign","","Inverts (1 / self) this secret key.",8,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"result"}}],[11,"new","","Creates a new zeroed out public key",9,{"inputs":[],"output":{"name":"publickey"}}],[11,"is_valid","","Determines whether a pubkey is valid",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",9,null],[11,"from_secret_key","","Creates a new public key from a secret key.",9,{"inputs":[{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a public key directly from a slice",9,null],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form the y-coordinate is represented by only a single bit, as x determines it up to one bit.",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"bool"}],"output":{"name":"arrayvec"}}],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"add_assign","","Adds another point on the curve in place",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"mul_assign","","Multiplies this point by `secret` scalar",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[0,"schnorr","secp256k1","Schnorr signatures",null,null],[3,"Signature","secp256k1::schnorr","A Schnorr signature.",null,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",10,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",10,null],[11,"len","","Returns the length of the object as an array",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","Deserializes a signature from a 64-byte vector",10,null],[11,"serialize","","Serializes a signature to a 64-byte vector",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"verify_schnorr","","Verify a Schnorr signature",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"recoveryid"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"recoverablesignature"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",12,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_der","","Converts a DER-encoded byte slice to a signature",13,null],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically only useful for validating signatures in the Bitcoin blockchain from before 2016. It should never be used in new applications. This library does not support serializing to this \"format\"",13,null],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are of the form (r, s) where r and s are numbers lying in some finite field. The verification equation will pass for (r, s) iff it passes for (r, -s), so it is possible to ``modify'' signatures in transit by flipping the sign of s. This does not constitute a forgery since the signed message still cannot be changed, but for some applications, changing even the signature itself can be a problem. Such applications require a \"strong signature\". It is believed that ECDSA is a strong signature except for this ambiguity in the sign of s, so to accomodate these applications libsecp256k1 will only accept signatures for which s is in the lower half of the field range. This eliminates the ambiguity.",13,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":null}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",13,null],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",13,null],[11,"serialize_der","","Serializes the signature in DER format",13,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"vec"}}],[11,"from","","",13,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This representation is nonstandard and defined by the libsecp256k1 library.",14,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",14,null],[11,"serialize_compact","","Serializes the recoverable signature in compact format",14,null],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed for verification",14,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"signature"}}],[11,"from","","",14,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",15,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",15,null],[11,"len","","Returns the length of the object as an array",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"index","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",15,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"contextflag"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"secp256k1"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new Secp256k1 context",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",11,{"inputs":[{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence; see comment in libsecp256k1 commit d2275795f by Gregory Maxwell",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new` and `key::PublicKey::from_secret_key`; call those functions directly for batch key generation. Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public key `pubkey`. Returns `Ok(true)` on success. Note that this function cannot be used for Bitcoin consensus checking since there may exist signatures which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"ContextFlag"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"Secp256k1"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",31,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_enum","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",32,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_enum","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_value_seed","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",33,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",35,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",35,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",35,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",35,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",35,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",35,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",35,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",35,null],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",36,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",36,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",36,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",36,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",36,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",36,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",36,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",36,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",39,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",39,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",40,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",40,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",40,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",41,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i32`.",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",41,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",41,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",41,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",41,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",41,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",41,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",43,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",43,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",44,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",45,null],[10,"unit_variant","","Called when deserializing a variant with no values.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",45,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",46,null],[10,"into_deserializer","","Convert this value into a deserializer.",46,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",40,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",40,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",40,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus ``",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get` and `get_mut` methods of `Value`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",19,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",19,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",20,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serialization"] = {"doc":"","items":[[0,"hash","serialization","Fixed-size hashes",null,null],[3,"H32","serialization::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"bytes","serialization","Wrapper around `Vec<u8>`",null,null],[3,"Bytes","serialization::bytes","Wrapper around `Vec<u8>`",null,null],[3,"TaggedBytes","","Wrapper around `Vec<u8>` which represent associated type",null,null],[0,"compact","serialization","Compact representation of `U256`",null,null],[3,"Compact","serialization::compact","Compact representation of `U256`",null,null],[3,"CompactInteger","serialization","A type of variable-length integer commonly used in the Bitcoin P2P protocol and Bitcoin serialized data structures.",null,null],[3,"List","","",null,null],[3,"Reader","","Bitcoin structures reader.",null,null],[3,"ReadIterator","","Should be used to iterate over structures of the same type",null,null],[3,"Stream","","Stream used for serialization of Bitcoin structures",null,null],[4,"Error","","",null,null],[13,"MalformedData","","",0,null],[13,"UnexpectedEnd","","",0,null],[13,"UnreadData","","",0,null],[5,"deserialize","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"deserialize_iterator","","",null,{"inputs":[{"name":"r"}],"output":{"name":"readiterator"}}],[5,"serialize","","",null,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[5,"serialize_list","","",null,null],[5,"serialized_list_size","","",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compactinteger"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compactinteger"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compactinteger"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compactinteger"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",1,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","serialization::hash","",2,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",2,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",3,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",4,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",6,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",7,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",8,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",9,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","serialization::bytes","",10,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",10,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"serialize","serialization::compact","",11,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","serialization","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"deserialize","","",12,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Convenient way of creating for slice of bytes",13,null],[11,"read","","",13,null],[11,"from_read","","",13,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"read","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_with_proxy","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_slice","","",13,null],[11,"read_list","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_list_max","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"is_finished","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"stream"}}],[11,"new","","New stream",15,{"inputs":[],"output":{"name":"self"}}],[11,"append","","Serializes the struct and appends it to the end of stream.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"append_slice","","Appends raw bytes to the end of the stream.",15,null],[11,"append_list","","Appends a list of serializable structs to the end of the stream.",15,null],[11,"out","","Full stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserializable","","",null,null],[10,"deserialize","","",16,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[8,"Serializable","","",null,null],[10,"serialize","","Serialize the struct and appends it to the end of stream.",17,{"inputs":[{"name":"self"},{"name":"stream"}],"output":null}],[11,"serialized_size","","Hint about the size of serialized struct.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"take","serialization::hash","",2,null],[11,"reversed","","",2,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",2,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","serialization::bytes","",10,null],[11,"hash","serialization::hash","",2,null],[11,"hash","","",3,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"deref","serialization::bytes","",10,null],[11,"deref","","",18,null],[11,"deref","serialization::hash","",2,null],[11,"deref","","",3,null],[11,"deref","","",4,null],[11,"deref","","",5,null],[11,"deref","","",6,null],[11,"deref","","",7,null],[11,"deref","","",8,null],[11,"deref","","",9,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","serialization::bytes","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","serialization::compact","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","serialization::hash","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","serialization::bytes","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"taggedbytes"}}],[11,"default","serialization::hash","",2,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","serialization::bytes","",10,null],[11,"deref_mut","","",18,null],[11,"deref_mut","serialization::hash","",2,null],[11,"deref_mut","","",3,null],[11,"deref_mut","","",4,null],[11,"deref_mut","","",5,null],[11,"deref_mut","","",6,null],[11,"deref_mut","","",7,null],[11,"deref_mut","","",8,null],[11,"deref_mut","","",9,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","serialization::bytes","",10,null],[11,"as_mut","","",18,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"taggedbytes"}}],[11,"clone","serialization::compact","",11,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"clone","serialization::hash","",2,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","serialization::bytes","",10,null],[11,"as_ref","","",18,null],[11,"as_ref","serialization::hash","",2,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","serialization::bytes","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","serialization::hash","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","serialization::bytes","",10,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"taggedbytes"}],"output":{"name":"bool"}}],[11,"eq","serialization::compact","",11,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"eq","serialization::hash","",2,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","serialization::bytes","",10,null],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","serialization::compact","",11,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"from","","",11,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"from","serialization::hash","",2,null],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",3,null],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",8,null],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"take","","",3,null],[11,"reversed","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",3,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",4,null],[11,"reversed","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",5,null],[11,"reversed","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",6,null],[11,"reversed","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",6,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",7,null],[11,"reversed","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",7,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",8,null],[11,"reversed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",8,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",9,null],[11,"reversed","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",9,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","serialization::bytes","",10,{"inputs":[],"output":{"name":"bytes"}}],[11,"new_with_len","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"take","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",18,{"inputs":[{"name":"bytes"}],"output":{"name":"taggedbytes"}}],[11,"into_raw","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"new","serialization::compact","",11,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"compact"}}],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_u256","","",11,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"to_f64","","",11,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"serialized_size","serialization","Hint about the size of serialized struct.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[4,"Error"],[3,"CompactInteger"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"Bytes"],[3,"Compact"],[3,"List"],[3,"Reader"],[3,"ReadIterator"],[3,"Stream"],[8,"Deserializable"],[8,"Serializable"],[3,"TaggedBytes"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_bytes","","Convert into a 16-bytes vector",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove","","Remove and return the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","Return the entry index",1,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"insert","","Insert a value into the entry",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"entry"}}],[11,"index","","Returns the entry index",2,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",3,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",3,null],[11,"push_all_move","","Append elements from an iterator.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",3,null],[11,"clear","","Remove all elements from the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",3,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",3,null],[11,"insert_many","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_slice","","",3,null],[11,"insert_from_slice","","",3,null],[11,"extend_from_slice","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,null],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance_against_vec","","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["sync"] = {"doc":"","items":[[4,"Error","sync","Sync errors.",null,null],[13,"TooManyOrphanBlocks","","Too many orphan blocks.",0,null],[13,"Database","","Database error.",0,null],[13,"Verification","","Block verification error.",0,null],[5,"create_sync_blocks_writer","","Create blocks writer.",null,{"inputs":[{"name":"sharedstore"},{"name":"magic"},{"name":"bool"}],"output":{"name":"blockswriter"}}],[5,"create_sync_peers","","Create synchronization peers",null,{"inputs":[],"output":{"name":"peersref"}}],[5,"create_local_sync_node","","Creates local sync node for given `db`",null,{"inputs":[{"name":"magic"},{"name":"sharedstore"},{"name":"peersref"}],"output":{"name":"localnoderef"}}],[5,"create_sync_connection_factory","","Create inbound synchronization connections factory for given local sync node.",null,{"inputs":[{"name":"peersref"},{"name":"localnoderef"}],"output":{"name":"localsyncnoderef"}}],[6,"LocalNodeRef","","Reference to local node",null,null],[6,"PeersRef","","Reference to peers",null,null],[8,"SyncListener","","Synchronization events listener",null,null],[10,"synchronization_state_switched","","Called when node switches to synchronization state",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"best_storage_block_inserted","","Called when new best storage block is inserted",1,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"SyncListener"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["take"] = {"doc":"Cell allowing the inner value to be consumed without a mutable reference.","items":[[3,"Take","take","Cell allowing the inner value to be consumed without a mutable reference.",null,null],[11,"new","","Create and return a new `Take` value containing the given inner value.",0,{"inputs":[{"name":"t"}],"output":{"name":"take"}}],[11,"take","","Consume and return the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Take"]]};
searchIndex["term_size"] = {"doc":"System calls for getting the terminal size.","items":[[5,"dimensions","term_size","Query the current processes's output (`stdout`), input (`stdin`), and error (`stderr`) in that order, in the attempt to dtermine terminal width. If one of those streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stdout","","Query the current processes's output (`stdout`) *only*, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stdin","","Query the current processes's input (`stdin`) *only*, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stderr","","Query the current processes's error output (`stderr`) *only*, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio_core"] = {"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"io","tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"Copy","tokio_core::io","A future which will copy all data from a reader into a writer.",null,null],[3,"EasyBuf","","A reference counted buffer of bytes.",null,null],[3,"EasyBufMut","","An RAII object returned from `get_mut` which provides mutable access to the underlying `Vec<u8>`.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying `Io` object, using the `Codec` trait to encode and decode frames.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `Io::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"easybuf"}}],[11,"new","","Creates a new EasyBuf with no data and the default capacity.",1,{"inputs":[],"output":{"name":"easybuf"}}],[11,"with_capacity","","Creates a new EasyBuf with `cap` capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"len","","Returns the number of bytes contained in this `EasyBuf`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Returns the inner contents of this `EasyBuf` as a slice.",1,null],[11,"split_off","","Splits the buffer into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"drain_to","","Splits the buffer into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",1,{"inputs":[{"name":"self"}],"output":{"name":"easybufmut"}}],[11,"as_ref","","",1,null],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"easybuf"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",3,null],[11,"poll_complete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to see if it's ready to be read from.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Calls the underlying `poll_write` function on this handling, testing to see if it's ready to be written to.",10,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read","","",9,null],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",11,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"IoFuture","","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Codec","","Encoding and decoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",13,null],[16,"Out","","The type of frames to be encoded.",13,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",13,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",13,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[10,"encode","","Encodes a frame into the buffer provided.",13,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",14,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this I/O object may be writable.",14,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","Read in a list of buffers all at once.",14,null],[11,"write_vec","","Write a list of buffers all at once.",14,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"as_raw_fd","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",16,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",16,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",16,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",16,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",15,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",15,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",15,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",15,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",15,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",15,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",15,null],[11,"read_buf","","",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[11,"shutdown","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write_buf","","",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[11,"poll_read","","",15,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",15,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","",15,null],[11,"write_vec","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",19,null],[11,"poll_complete","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",20,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",20,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",20,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",20,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",20,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",20,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",20,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",20,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",20,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",20,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",20,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",20,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",20,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[8,"UdpCodec","","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",23,null],[16,"Out","","The type of frames to be encoded.",23,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",23,null],[10,"encode","","Encodes a frame into the buffer provided.",23,null],[0,"reactor","tokio_core","The core reactor driving all I/O",null,null],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Core","","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",24,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",24,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",24,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",24,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",24,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll_read","","",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",25,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",25,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",26,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",26,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",30,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",30,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",30,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",30,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"id","","Get the ID of this loop",30,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",28,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",29,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_fn","","Spawns a closure on this event loop.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",29,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"decode_eof","tokio_core::io","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",13,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}]],"paths":[[3,"Copy"],[3,"EasyBuf"],[3,"EasyBufMut"],[3,"Framed"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Read"],[3,"ReadUntil"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"Codec"],[8,"Io"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[8,"UdpCodec"],[3,"PollEvented"],[3,"Timeout"],[3,"Interval"],[3,"CoreId"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"Copy","tokio_io::io","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[0,"codec","tokio_io","Utilities for encoding and decoding frames.",null,null],[3,"Framed","tokio_io::codec","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",null,null],[3,"Builder","tokio_io::codec::length_delimited","Configure length delimited `FramedRead`, `FramedWrite`, and `Framed` values.",null,null],[3,"Framed","","Adapts a byte stream into a unified `Stream` and `Sink` that works over entire frame values.",null,null],[3,"FramedRead","","Adapts a byte stream to a `Stream` yielding entire frame values.",null,null],[3,"FramedWrite","","Adapts a byte stream to a `Sink` accepting entire frame values.",null,null],[8,"Decoder","tokio_io::codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",0,null],[16,"Error","","The type of unrecoverable frame decoding errors.",0,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"result"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",1,null],[16,"Error","","The type of encoding errors.",1,null],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[11,"fmt","tokio_io::io","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","tokio_io::codec","Returns a reference to the underlying I/O stream wrapped by `Frame`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",4,null],[11,"poll_complete","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",5,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",5,null],[11,"poll_complete","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",6,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",6,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",6,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"start_send","","",6,null],[11,"poll_complete","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_io::codec::length_delimited","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Framed` with default configuration values.",9,{"inputs":[{"name":"t"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",9,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with default configuration values.",8,{"inputs":[{"name":"t"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",8,null],[11,"poll_complete","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write_buf","","",8,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[11,"new","","Creates a new `FramedWrite` with default configuration values.",10,{"inputs":[{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"read","","",10,null],[11,"read_buf","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[11,"prepare_uninitialized_buffer","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new length delimited framer builder with default configuration values.",7,{"inputs":[],"output":{"name":"builder"}}],[11,"big_endian","","Read the length field as a big endian integer",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"little_endian","","Read the length field as a little endian integer",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"max_frame_length","","Sets the max frame length",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_length","","Sets the number of bytes used to represent the length field",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_read","","Create a configured length delimited `FramedRead`",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedread"}}],[11,"new_write","","Create a configured length delimited `FramedWrite`",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"new_framed","","Create a configured length delimited `Framed`",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"fmt","tokio_io::io","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",11,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",19,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","A trait for readable objects which operated in an asynchronous and futures-aware fashion.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",21,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",21,null],[8,"AsyncWrite","","A trait for writable objects which operated in an asynchronous and futures-aware fashion.",null,null],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"Copy"],[3,"Flush"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Builder"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"],[3,"Lines"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_proto"] = {"doc":"This library provides a toolkit for rapid protocol development and usage, working with the rest of the Tokio stack.","items":[[3,"TcpClient","tokio_proto","Builds client connections to external services.",null,null],[3,"Connect","","A future for establishing a client connection.",null,null],[3,"TcpServer","","A builder for TCP servers.",null,null],[0,"pipeline","","Pipelined RPC protocols.",null,null],[3,"ClientService","tokio_proto::pipeline","Client `Service` for simple pipeline protocols",null,null],[3,"Pipeline","","A marker used to flag protocols as being pipelined RPC.",null,null],[8,"ClientProto","","A pipelined client protocol.",null,null],[16,"Request","","Request messages.",0,null],[16,"Response","","Response messages.",0,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",0,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",0,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",0,null],[8,"ServerProto","","A pipelined server protocol.",null,null],[16,"Request","","Request messages.",1,null],[16,"Response","","Response messages.",1,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",1,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",1,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",1,null],[0,"multiplex","tokio_proto","Multiplexed RPC protocols.",null,null],[3,"ClientService","tokio_proto::multiplex","Client `Service` for simple multiplex protocols",null,null],[3,"Multiplex","","A marker used to flag protocols as being multiplexed RPC.",null,null],[6,"RequestId","","Identifies a request / response thread",null,null],[8,"ClientProto","","An multiplexed client protocol.",null,null],[16,"Request","","Request messages.",2,null],[16,"Response","","Response messages.",2,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",2,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",2,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",2,null],[8,"ServerProto","","An multiplexed server protocol.",null,null],[16,"Request","","Request messages.",3,null],[16,"Response","","Response messages.",3,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",3,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",3,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",3,null],[0,"streaming","tokio_proto","Streaming protocols.",null,null],[3,"Body","tokio_proto::streaming","Body stream",null,null],[4,"Message","","Message sent and received from a multiplexed service",null,null],[13,"WithoutBody","","Has no associated streaming body",4,null],[13,"WithBody","","Has associated streaming body",4,null],[0,"pipeline","","Pipelined, streaming protocols.",null,null],[3,"StreamingPipeline","tokio_proto::streaming::pipeline","A marker used to flag protocols as being streaming and pipelined.",null,null],[4,"Frame","","A pipelined protocol frame",null,null],[13,"Message","","Either a request or a response",5,null],[12,"message","tokio_proto::streaming::pipeline::Frame","The message value",5,null],[12,"body","","Set to true when body frames will follow",5,null],[13,"Body","tokio_proto::streaming::pipeline","Body frame. None indicates that the body is done streaming.",5,null],[12,"chunk","tokio_proto::streaming::pipeline::Frame","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",5,null],[13,"Error","tokio_proto::streaming::pipeline","Error",5,null],[12,"error","tokio_proto::streaming::pipeline::Frame","Error value",5,null],[11,"fmt","tokio_proto::streaming::pipeline","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",5,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing pipelined, streaming protocols.",null,null],[3,"Pipeline","tokio_proto::streaming::pipeline::advanced","Provides protocol pipelining functionality in a generic way over clients and servers. Used internally by `pipeline::Client` and `pipeline::Server`.",null,null],[6,"PipelineMessage","","Message used to communicate through the multiplex dispatch",null,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",6,null],[16,"In","","Message written to transport",6,null],[16,"BodyIn","","Body written to transport",6,null],[16,"Out","","Messages read from the transport",6,null],[16,"BodyOut","","Outbound body frame",6,null],[16,"Error","","Transport error",6,null],[16,"Stream","","Body stream written to transport",6,null],[16,"Transport","","Transport type",6,null],[10,"transport","","Mutable reference to the transport",6,null],[10,"dispatch","","Process an out message",6,{"inputs":[{"name":"self"},{"name":"pipelinemessage"}],"output":{"name":"result"}}],[10,"poll","","Poll the next completed message",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[10,"has_in_flight","","RPC currently in flight TODO: Get rid of",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new pipeline `Pipeline` dispatcher with the given service and transport",7,{"inputs":[{"name":"t"}],"output":{"name":"pipeline"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ClientProto","tokio_proto::streaming::pipeline","A streaming, pipelined client protocol.",null,null],[16,"Request","","The type of request headers.",8,null],[16,"RequestBody","","The type of request body chunks.",8,null],[16,"Response","","The type of response headers.",8,null],[16,"ResponseBody","","The type of response body chunks.",8,null],[16,"Error","","The type of error frames.",8,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",8,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",8,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",8,null],[8,"ServerProto","","A streaming, pipelined server protocol.",null,null],[16,"Request","","Request headers.",9,null],[16,"RequestBody","","Request body chunks.",9,null],[16,"Response","","Response headers.",9,null],[16,"ResponseBody","","Response body chunks.",9,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",9,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",9,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",9,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",9,null],[8,"Transport","","Additional transport details relevant to streaming, pipelined protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the current stream",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"multiplex","tokio_proto::streaming","Pipelined, multiplexed protocols.",null,null],[3,"StreamingMultiplex","tokio_proto::streaming::multiplex","A marker used to flag protocols as being streaming and multiplexed.",null,null],[4,"Frame","","A multiplexed protocol frame",null,null],[13,"Message","","Either a request or a response.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"message","","The message value",12,null],[12,"body","","Set to true when body frames will follow with the same request ID.",12,null],[12,"solo","","Set to `true` when this message does not have a pair in the other direction",12,null],[13,"Body","tokio_proto::streaming::multiplex","Body frame.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"chunk","","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",12,null],[13,"Error","tokio_proto::streaming::multiplex","Error",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"error","","Error value",12,null],[11,"fmt","tokio_proto::streaming::multiplex","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"request_id","","Return the request ID associated with the frame.",12,{"inputs":[{"name":"self"}],"output":{"name":"requestid"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",12,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing multiplexed, streaming protocols.",null,null],[3,"Multiplex","tokio_proto::streaming::multiplex::advanced","Task that drives multiplexed protocols",null,null],[3,"MultiplexMessage","","Message used to communicate through the multiplex dispatch",null,null],[12,"id","","Request ID",13,null],[12,"message","","Message",13,null],[12,"solo","","True if message has no pair (request / response)",13,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",14,null],[16,"In","","Messages written to the transport",14,null],[16,"BodyIn","","Inbound body frame",14,null],[16,"Out","","Messages read from the transport",14,null],[16,"BodyOut","","Outbound body frame",14,null],[16,"Error","","Transport error",14,null],[16,"Stream","","Inbound body stream type",14,null],[16,"Transport","","Transport type",14,null],[10,"transport","","Mutable reference to the transport",14,null],[10,"poll","","Poll the next available message",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[10,"poll_ready","","The `Dispatch` is ready to accept another message",14,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[10,"dispatch","","Process an out message",14,{"inputs":[{"name":"self"},{"name":"multiplexmessage"}],"output":{"name":"result"}}],[10,"cancel","","Cancel interest in the exchange identified by RequestId",14,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new pipeline `Multiplex` dispatcher with the given service and transport",15,{"inputs":[{"name":"t"}],"output":{"name":"multiplex"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"message"}],"output":{"name":"multiplexmessage"}}],[11,"error","","Create a new errored MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"e"}],"output":{"name":"multiplexmessage"}}],[6,"RequestId","tokio_proto::streaming::multiplex","Identifies a request / response thread",null,null],[8,"ClientProto","","A streaming, multiplexed client protocol.",null,null],[16,"Request","","Request headers.",16,null],[16,"RequestBody","","Request body chunks.",16,null],[16,"Response","","Response headers.",16,null],[16,"ResponseBody","","Response body chunks.",16,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",16,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",16,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",16,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",16,null],[8,"ServerProto","","A streaming, multiplexed server protocol.",null,null],[16,"Request","","Request headers.",17,null],[16,"RequestBody","","Request body chunks.",17,null],[16,"Response","","Response headers.",17,null],[16,"ResponseBody","","Response body chunks.",17,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",17,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",17,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",17,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",17,null],[8,"Transport","","Additional transport details relevant to streaming, multiplexed protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the exchange identified by RequestId",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"poll_write_body","","Tests to see if this I/O object may accept a body frame for the given request ID",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"async"}}],[11,"dispatching_body","","Invoked before the multiplexer dispatches the body chunk to the body stream.",18,{"inputs":[{"name":"self"},{"name":"requestid"},{"name":"readbody"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","tokio_proto::streaming","Return an empty body stream",20,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",20,null],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",20,{"inputs":[{"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"body"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the value and returns the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take_body","","If the `Message` value has an associated body stream, return it. The original `Message` value will then become a `WithoutBody` variant.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","tokio_proto","Utilities for building protocols",null,null],[0,"client_proxy","tokio_proto::util","Utilities for building protocol clients",null,null],[3,"ClientProxy","tokio_proto::util::client_proxy","Client `Service` for pipeline or multiplex protocols",null,null],[3,"Response","","Response future returned from a client",null,null],[5,"pair","","Return a client handle and a handle used to receive requests on",null,{"inputs":[],"output":{"name":"pair"}}],[6,"Pair","","A client / receiver pair",null,null],[6,"Receiver","","Receive requests submitted to the client",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_proto","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder for the given client protocol.",23,{"inputs":[{"name":"p"}],"output":{"name":"tcpclient"}}],[11,"connect","","Establish a connection to the given address.",23,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connect"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Starts building a server for the given protocol and address, with default configuration.",25,{"inputs":[{"name":"p"},{"name":"socketaddr"}],"output":{"name":"tcpserver"}}],[11,"addr","","Set the address for the server.",25,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":null}],[11,"threads","","Set the number of threads running simultaneous event loops (Unix only).",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"serve","","Start up the server, providing the given service on it.",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"with_handle","","Start up the server, providing the given service on it, and providing access to the event loop handle.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"BindServer","","Binds a service to an I/O object.",null,null],[16,"ServiceRequest","","The request type for the service.",26,null],[16,"ServiceResponse","","The response type for the service.",26,null],[16,"ServiceError","","The error type for the service.",26,null],[10,"bind_server","","Bind the service.",26,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"t"},{"name":"s"}],"output":null}],[8,"BindClient","","Binds an I/O object as a client of a service.",null,null],[16,"ServiceRequest","","The request type for the service.",27,null],[16,"ServiceResponse","","The response type for the service.",27,null],[16,"ServiceError","","The error type for the service.",27,null],[16,"BindClient","","The bound service.",27,null],[10,"bind_client","","Bind an I/O object as a service.",27,null],[11,"clone","tokio_proto::pipeline","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","tokio_proto::multiplex","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"ClientProto"],[8,"ServerProto"],[8,"ClientProto"],[8,"ServerProto"],[4,"Message"],[4,"Frame"],[8,"Dispatch"],[3,"Pipeline"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingPipeline"],[4,"Frame"],[3,"MultiplexMessage"],[8,"Dispatch"],[3,"Multiplex"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingMultiplex"],[3,"Body"],[3,"ClientProxy"],[3,"Response"],[3,"TcpClient"],[3,"Connect"],[3,"TcpServer"],[8,"BindServer"],[8,"BindClient"],[3,"ClientService"],[3,"Pipeline"],[3,"ClientService"],[3,"Multiplex"]]};
searchIndex["tokio_service"] = {"doc":"Definition of the core `Service` trait to Tokio","items":[[8,"Service","tokio_service","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",0,null],[16,"Response","","Responses given by the service.",0,null],[16,"Error","","Errors produced by the service.",0,null],[16,"Future","","The future response value.",0,null],[10,"call","","Process the request and return the response asynchronously.",0,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",1,null],[16,"Response","","Responses given by the service",1,null],[16,"Error","","Errors produced by the service",1,null],[16,"Instance","","The `Service` value created by this factory",1,null],[10,"new_service","","Create and return a new service value.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Service"],[8,"NewService"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as the *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of Unicode that the `bidi_class` function is based on.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",5,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[3,"GraphemeIndices"],[3,"Graphemes"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 *A Recommendation for IPv6 Address Text Representation*: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","url","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",15,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",22,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["verification"] = {"doc":"Bitcoin consensus verification","items":[[0,"uint","verification::bigint","Big unsigned integer types.",null,null],[4,"FromDecStrErr","verification::bigint::uint","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",0,null],[13,"InvalidLength","","Value does not fit into type",0,null],[8,"Uint","","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",1,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest value that can be represented by this integer type.",1,{"inputs":[],"output":{"name":"self"}}],[10,"from_dec_str","","Convert from a decimal string.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",1,null],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",1,null],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`).",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"exp10","","Create `Uint(10**n)`",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",1,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",1,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",1,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",1,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",1,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",1,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",1,null],[10,"is_zero","","Returns",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",2,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",3,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",4,null],[8,"Uint","verification::bigint","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",1,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest value that can be represented by this integer type.",1,{"inputs":[],"output":{"name":"self"}}],[10,"from_dec_str","","Convert from a decimal string.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_big_endian","","Convert to the sequence of bytes with a big endian",1,null],[10,"to_little_endian","","Convert to the sequence of bytes with a little endian",1,null],[10,"to_hex","","Convert to a non-zero-prefixed hex representation (not prefixed by `0x`).",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"exp10","","Create `Uint(10**n)`",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",1,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",1,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",1,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",1,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",1,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",1,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",1,null],[10,"is_zero","","Returns",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"FromDecStrErr","","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",0,null],[13,"InvalidLength","","Value does not fit into type",0,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",4,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",3,null],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",2,null],[0,"hash","verification","Fixed-size hashes",null,null],[3,"H32","verification::hash","",null,null],[3,"H48","","",null,null],[3,"H96","","",null,null],[3,"H160","","",null,null],[3,"H256","","",null,null],[3,"H264","","",null,null],[3,"H512","","",null,null],[3,"H520","","",null,null],[0,"compact","verification","Compact representation of `U256`",null,null],[3,"Compact","verification::compact","Compact representation of `U256`",null,null],[3,"CanonBlock","verification","Blocks whose parents are known to be in the chain",null,null],[3,"CanonHeader","","",null,null],[3,"CanonTransaction","","",null,null],[3,"BlockAcceptor","","Flexible verification of ordered block",null,null],[12,"finality","","",5,null],[12,"sigops","","",5,null],[12,"coinbase_claim","","",5,null],[12,"coinbase_script","","",5,null],[3,"ChainAcceptor","","",null,null],[12,"block","","",6,null],[12,"header","","",6,null],[12,"transactions","","",6,null],[3,"HeaderAcceptor","","",null,null],[12,"version","","",7,null],[12,"work","","",7,null],[12,"median_timestamp","","",7,null],[3,"TransactionAcceptor","","",null,null],[12,"bip30","","",8,null],[12,"missing_inputs","","",8,null],[12,"maturity","","",8,null],[12,"overspent","","",8,null],[12,"double_spent","","",8,null],[12,"eval","","",8,null],[3,"MemoryPoolTransactionAcceptor","","",null,null],[12,"missing_inputs","","",9,null],[12,"maturity","","",9,null],[12,"overspent","","",9,null],[12,"sigops","","",9,null],[12,"double_spent","","",9,null],[12,"eval","","",9,null],[3,"BlockVerifier","","",null,null],[12,"empty","","",10,null],[12,"coinbase","","",10,null],[12,"serialized_size","","",10,null],[12,"extra_coinbases","","",10,null],[12,"transactions_uniqueness","","",10,null],[12,"sigops","","",10,null],[12,"merkle_root","","",10,null],[3,"ChainVerifier","","",null,null],[12,"block","","",11,null],[12,"header","","",11,null],[12,"transactions","","",11,null],[3,"HeaderVerifier","","",null,null],[12,"proof_of_work","","",12,null],[12,"timestamp","","",12,null],[3,"TransactionVerifier","","",null,null],[12,"empty","","",13,null],[12,"null_non_coinbase","","",13,null],[12,"oversized_coinbase","","",13,null],[3,"MemoryPoolTransactionVerifier","","",null,null],[12,"empty","","",14,null],[12,"null_non_coinbase","","",14,null],[12,"is_coinbase","","",14,null],[12,"size","","",14,null],[12,"sigops","","",14,null],[3,"BackwardsCompatibleChainVerifier","","",null,null],[4,"Error","","All possible verification errors",null,null],[13,"Duplicate","","has an equal duplicate in the chain",15,null],[13,"DuplicatedTransactions","","Contains duplicated transactions",15,null],[13,"Empty","","No transactions in block",15,null],[13,"Pow","","Invalid proof-of-work (Block hash does not satisfy nBits)",15,null],[13,"FuturisticTimestamp","","Futuristic timestamp",15,null],[13,"Timestamp","","Invalid timestamp",15,null],[13,"Coinbase","","First transaction is not a coinbase transaction",15,null],[13,"Transaction","","One of the transactions is invalid (corresponding index and specific transaction error)",15,null],[13,"Difficulty","","nBits do not match difficulty rules",15,null],[12,"expected","verification::Error","",15,null],[12,"actual","","",15,null],[13,"MerkleRoot","verification","Invalid merkle root",15,null],[13,"CoinbaseOverspend","","Coinbase spends too much",15,null],[12,"expected_max","verification::Error","",15,null],[12,"actual","","",15,null],[13,"CoinbaseScript","verification","Coinbase has invalid script sig prefix (BIP90 -> BIP34)",15,null],[13,"MaximumSigops","","Maximum sigops operations exceeded - will not provide how much it was in total since it stops counting once `MAX_BLOCK_SIGOPS` is reached",15,null],[13,"CoinbaseSignatureLength","","Coinbase signature is not in the range 2-100",15,null],[13,"Size","","Block size is invalid",15,null],[13,"NonFinalBlock","","Block transactions are not final.",15,null],[13,"OldVersionBlock","","Old version block.",15,null],[13,"TransactionFeeAndRewardOverflow","","Sum of the transaction fees in block + coinbase reward exceeds u64::max",15,null],[13,"TransactionFeesOverflow","","Sum of the transaction fees in block exceeds u64::max",15,null],[13,"ReferencedInputsSumOverflow","","Sum of all referenced outputs in block transactions resulted in the overflow",15,null],[13,"Database","","Database error",15,null],[4,"TransactionError","","Possible transactions verification errors",null,null],[13,"Empty","","Transaction has no inputs or no outputs",16,null],[13,"NullNonCoinbase","","Transaction is not coinbase transaction but has null inputs",16,null],[13,"CoinbaseSignatureLength","","Coinbase signature is not in the range 2-100",16,null],[13,"MaxSize","","Transaction size exceeds block size limit",16,null],[13,"MaxSigops","","Transaction has more sigops than it's allowed",16,null],[13,"MemoryPoolCoinbase","","Transaction is a part of memory pool, but is a coinbase",16,null],[13,"Input","","Not found corresponding output for transaction input",16,null],[13,"Maturity","","Referenced coinbase output for the transaction input is not mature enough",16,null],[13,"Signature","","Signature invalid for given input",16,null],[13,"UnknownReference","","Unknown previous transaction referenced",16,null],[13,"Overspend","","Spends more than claims",16,null],[13,"SignatureMallformed","","Signature script can't be properly parsed",16,null],[13,"Sigops","","Too many signature operations",16,null],[13,"SigopsP2SH","","Too many signature operations once p2sh operations included",16,null],[13,"MisplacedCoinbase","","Coinbase transaction is found at position that is not 0",16,null],[13,"UnspentTransactionWithTheSameHash","","Not fully spent transaction with the same hash already exists, bip30.",16,null],[13,"UsingSpentOutput","","Using output that is surely spent",16,null],[5,"transaction_sigops","","Counts signature operations in given transaction bip16_active flag indicates if we should also count signature operations in previous transactions. If one of the previous transaction outputs is missing, we simply ignore that fact and just carry on counting",null,{"inputs":[{"name":"transaction"},{"name":"transactionoutputprovider"},{"name":"bool"}],"output":{"name":"usize"}}],[5,"median_timestamp","","Returns median timestamp, of given header ancestors. The header should be later expected to have higher timestamp than this median timestamp",null,{"inputs":[{"name":"blockheader"},{"name":"blockheaderprovider"}],"output":{"name":"u32"}}],[5,"work_required","","Returns work required for given header",null,{"inputs":[{"name":"h256"},{"name":"u32"},{"name":"u32"},{"name":"blockheaderprovider"},{"name":"magic"}],"output":{"name":"compact"}}],[5,"is_valid_proof_of_work","","Returns true if hash is lower or equal than target and target is lower or equal than current network maximum",null,{"inputs":[{"name":"compact"},{"name":"compact"},{"name":"h256"}],"output":{"name":"bool"}}],[5,"is_valid_proof_of_work_hash","","Returns true if hash is lower or equal than target represented by compact bits",null,{"inputs":[{"name":"compact"},{"name":"h256"}],"output":{"name":"bool"}}],[5,"block_reward_satoshi","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[0,"constants","","Consenus constants",null,null],[17,"BLOCK_MAX_FUTURE","verification::constants","",null,null],[17,"COINBASE_MATURITY","","",null,null],[17,"MAX_BLOCK_SIZE","","",null,null],[17,"MAX_BLOCK_SIGOPS","","",null,null],[17,"MIN_COINBASE_SIZE","","",null,null],[17,"MAX_COINBASE_SIZE","","",null,null],[17,"RETARGETING_FACTOR","","",null,null],[17,"TARGET_SPACING_SECONDS","","",null,null],[17,"DOUBLE_SPACING_SECONDS","","",null,null],[17,"TARGET_TIMESPAN_SECONDS","","",null,null],[17,"MIN_TIMESPAN","","",null,null],[17,"MAX_TIMESPAN","","",null,null],[17,"RETARGETING_INTERVAL","","",null,null],[11,"clone","verification","",17,{"inputs":[{"name":"self"}],"output":{"name":"canonblock"}}],[11,"new","","",17,{"inputs":[{"name":"indexedblock"}],"output":{"name":"self"}}],[11,"hash","","",17,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"raw","","",17,{"inputs":[{"name":"self"}],"output":{"name":"indexedblock"}}],[11,"header","","",17,{"inputs":[{"name":"self"}],"output":{"name":"canonheader"}}],[11,"transactions","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"canonheader"}}],[11,"new","","",18,{"inputs":[{"name":"indexedblockheader"}],"output":{"name":"self"}}],[11,"deref","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"canontransaction"}}],[11,"new","","",19,{"inputs":[{"name":"indexedtransaction"}],"output":{"name":"self"}}],[11,"deref","","",19,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",15,{"inputs":[{"name":"dberror"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"transactionerror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"transactionerror"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"indexedblock"}],"output":{"name":"self"}}],[11,"check","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"indexedblock"},{"name":"magic"},{"name":"u32"}],"output":{"name":"self"}}],[11,"check","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"indexedblockheader"},{"name":"magic"},{"name":"u32"}],"output":{"name":"self"}}],[11,"check","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"indexedtransaction"}],"output":{"name":"self"}}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[{"name":"indexedtransaction"}],"output":{"name":"self"}}],[11,"check","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"transactionoutputprovider"},{"name":"magic"},{"name":"canonblock"},{"name":"u32"},{"name":"deployments"},{"name":"blockheaderprovider"}],"output":{"name":"self"}}],[11,"check","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"store"},{"name":"magic"},{"name":"canonblock"},{"name":"u32"},{"name":"deployments"}],"output":{"name":"self"}}],[11,"check","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[{"name":"blockheaderprovider"},{"name":"magic"},{"name":"canonheader"},{"name":"u32"},{"name":"deployments"}],"output":{"name":"self"}}],[11,"check","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"transactionmetaprovider"},{"name":"duplextransactionoutputprovider"},{"name":"magic"},{"name":"canontransaction"},{"name":"h256"},{"name":"u32"},{"name":"u32"},{"name":"usize"},{"name":"deployments"},{"name":"blockheaderprovider"}],"output":{"name":"self"}}],[11,"check","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"transactionmetaprovider"},{"name":"duplextransactionoutputprovider"},{"name":"magic"},{"name":"canontransaction"},{"name":"u32"},{"name":"u32"},{"name":"deployments"},{"name":"blockheaderprovider"}],"output":{"name":"self"}}],[11,"check","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",20,{"inputs":[{"name":"sharedstore"},{"name":"magic"}],"output":{"name":"self"}}],[11,"verify_block_header","","",20,{"inputs":[{"name":"self"},{"name":"blockheaderprovider"},{"name":"h256"},{"name":"blockheader"}],"output":{"name":"result"}}],[11,"verify_mempool_transaction","","",20,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u32"},{"name":"u32"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"verify","","",20,{"inputs":[{"name":"self"},{"name":"indexedblock"}],"output":{"name":"result"}}],[8,"Verify","","Interface for block verification",null,null],[10,"verify","","",21,{"inputs":[{"name":"self"},{"name":"indexedblock"}],"output":{"name":"result"}}],[11,"serialize","verification::compact","",22,null],[11,"serialize","verification::hash","",23,null],[11,"serialized_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",24,null],[11,"serialized_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",25,null],[11,"serialized_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",26,null],[11,"serialized_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",27,null],[11,"serialized_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",28,null],[11,"serialized_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",29,null],[11,"serialized_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",30,null],[11,"serialized_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","verification::compact","",22,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","verification::hash","",23,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",24,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",26,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",27,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",28,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",29,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"deserialize","","",30,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"from","verification::bigint","",2,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",3,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",2,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",3,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u256"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",4,{"inputs":[{"name":"isize"}],"output":{"name":"u128"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",4,null],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"not","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"not","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"u512"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"u256"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"u128"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shl","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_dec_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",2,null],[11,"to_little_endian","","",2,null],[11,"to_hex","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"u512"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"u512"}}],[11,"max_value","","",2,{"inputs":[],"output":{"name":"u512"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,null],[11,"overflowing_add","","Optimized instructions",2,null],[11,"overflowing_sub","","",2,null],[11,"overflowing_mul","","",2,null],[11,"overflowing_div","","",2,null],[11,"overflowing_rem","","",2,null],[11,"overflowing_neg","","",2,null],[11,"from_dec_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",3,null],[11,"to_little_endian","","",3,null],[11,"to_hex","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"u256"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"u256"}}],[11,"max_value","","",3,{"inputs":[],"output":{"name":"u256"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,null],[11,"overflowing_add","","Optimized instructions",3,null],[11,"overflowing_sub","","",3,null],[11,"overflowing_mul","","",3,null],[11,"overflowing_div","","",3,null],[11,"overflowing_rem","","",3,null],[11,"overflowing_neg","","",3,null],[11,"from_dec_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","",4,null],[11,"to_little_endian","","",4,null],[11,"to_hex","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"u128"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","",4,{"inputs":[],"output":{"name":"u128"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,null],[11,"overflowing_add","","Optimized instructions",4,null],[11,"overflowing_sub","","",4,null],[11,"overflowing_mul","","",4,null],[11,"overflowing_div","","",4,null],[11,"overflowing_rem","","",4,null],[11,"overflowing_neg","","",4,null],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"fromdecstrerr"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"hash","verification::hash","",23,null],[11,"hash","","",24,null],[11,"hash","","",25,null],[11,"hash","","",26,null],[11,"hash","","",27,null],[11,"hash","","",28,null],[11,"hash","","",29,null],[11,"hash","","",30,null],[11,"deref","","",23,null],[11,"deref","","",24,null],[11,"deref","","",25,null],[11,"deref","","",26,null],[11,"deref","","",27,null],[11,"deref","","",28,null],[11,"deref","","",29,null],[11,"deref","","",30,null],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"option"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"option"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"option"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"option"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"option"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"option"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"option"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"option"}}],[11,"fmt","verification::compact","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","verification::hash","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"h48"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"h96"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"h160"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"h520"}}],[11,"deref_mut","","",23,null],[11,"deref_mut","","",24,null],[11,"deref_mut","","",25,null],[11,"deref_mut","","",26,null],[11,"deref_mut","","",27,null],[11,"deref_mut","","",28,null],[11,"deref_mut","","",29,null],[11,"deref_mut","","",30,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","verification::compact","",22,{"inputs":[{"name":"self"}],"output":{"name":"compact"}}],[11,"clone","verification::hash","",23,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","verification::compact","",22,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"compact"}],"output":{"name":"bool"}}],[11,"eq","verification::hash","",23,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"h48"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"h96"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"from","verification::compact","",22,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"from","","",22,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"from","verification::bigint","",3,{"inputs":[{"name":"compact"}],"output":{"name":"u256"}}],[11,"from","verification::hash","",23,null],[11,"from","","",23,null],[11,"from","","",23,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",23,{"inputs":[{"name":"u8"}],"output":{"name":"h32"}}],[11,"from","","",24,null],[11,"from","","",24,null],[11,"from","","",24,{"inputs":[{"name":"str"}],"output":{"name":"h48"}}],[11,"from","","",24,{"inputs":[{"name":"u8"}],"output":{"name":"h48"}}],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,{"inputs":[{"name":"str"}],"output":{"name":"h96"}}],[11,"from","","",25,{"inputs":[{"name":"u8"}],"output":{"name":"h96"}}],[11,"from","","",26,null],[11,"from","","",26,null],[11,"from","","",26,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",26,{"inputs":[{"name":"u8"}],"output":{"name":"h160"}}],[11,"from","","",27,null],[11,"from","","",27,null],[11,"from","","",27,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",27,{"inputs":[{"name":"u8"}],"output":{"name":"h256"}}],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",28,{"inputs":[{"name":"u8"}],"output":{"name":"h264"}}],[11,"from","","",29,null],[11,"from","","",29,null],[11,"from","","",29,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",29,{"inputs":[{"name":"u8"}],"output":{"name":"h512"}}],[11,"from","","",30,null],[11,"from","","",30,null],[11,"from","","",30,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",30,{"inputs":[{"name":"u8"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"full_mul","verification::bigint","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",3,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"take","verification::hash","",23,null],[11,"reversed","","",23,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"size","","",23,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",24,null],[11,"reversed","","",24,{"inputs":[{"name":"self"}],"output":{"name":"h48"}}],[11,"size","","",24,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",25,null],[11,"reversed","","",25,{"inputs":[{"name":"self"}],"output":{"name":"h96"}}],[11,"size","","",25,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",26,null],[11,"reversed","","",26,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"size","","",26,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_reversed_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"to_reversed_str","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take","","",27,null],[11,"reversed","","",27,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"size","","",27,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",28,null],[11,"reversed","","",28,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"size","","",28,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",29,null],[11,"reversed","","",29,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"size","","",29,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take","","",30,null],[11,"reversed","","",30,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"size","","",30,{"inputs":[],"output":{"name":"usize"}}],[11,"is_zero","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","verification::compact","",22,{"inputs":[{"name":"u32"}],"output":{"name":"compact"}}],[11,"max_value","","",22,{"inputs":[],"output":{"name":"compact"}}],[11,"to_u256","","Computes the target [0, T] that a blockhash must land in to be valid Returns value in error, if there is an overflow or its negative value",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_u256","","",22,{"inputs":[{"name":"u256"}],"output":{"name":"compact"}}],[11,"to_f64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}]],"paths":[[4,"FromDecStrErr"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[3,"BlockAcceptor"],[3,"ChainAcceptor"],[3,"HeaderAcceptor"],[3,"TransactionAcceptor"],[3,"MemoryPoolTransactionAcceptor"],[3,"BlockVerifier"],[3,"ChainVerifier"],[3,"HeaderVerifier"],[3,"TransactionVerifier"],[3,"MemoryPoolTransactionVerifier"],[4,"Error"],[4,"TransactionError"],[3,"CanonBlock"],[3,"CanonHeader"],[3,"CanonTransaction"],[3,"BackwardsCompatibleChainVerifier"],[8,"Verify"],[3,"Compact"],[3,"H32"],[3,"H48"],[3,"H96"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["xdg"] = {"doc":"","items":[[3,"BaseDirectories","xdg","BaseDirectories allows to look up paths to configuration, data, cache and runtime files in well-known locations according to the [X Desktop Group Base Directory specification][xdg-basedir]. [xdg-basedir]: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html",null,null],[3,"BaseDirectoriesError","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"basedirectories"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Reads the process environment, determines the XDG base directories, and returns a value that can be used for lookup. The following environment variables are examined:",0,{"inputs":[],"output":{"name":"result"}}],[11,"with_prefix","","Same as `new()`, but `prefix` is implicitly prepended to every path that is looked up.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"with_profile","","Same as `with_prefix()`, with `profile` also implicitly prepended to every path that is looked up, but only for user-specific directories.",0,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[11,"has_runtime_directory","","Returns `true` if `XDG_RUNTIME_DIR` is available, `false` otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"place_config_file","","Given a relative path `path`, returns an absolute path in `XDG_CONFIG_HOME` where a configuration file may be stored. Leading directories in the returned path are pre-created; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_data_file","","Like `place_config_file()`, but for a data file in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_cache_file","","Like `place_config_file()`, but for a cache file in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"place_runtime_file","","Like `place_config_file()`, but for a runtime file in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"find_config_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CONFIG_HOME` and then `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_data_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_DATA_HOME` and then `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_cache_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_runtime_file","","Given a relative path `path`, returns an absolute path to an existing runtime file, or `None`. Searches `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns `None`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"create_config_directory","","Given a relative path `path`, returns an absolute path to a configuration directory in `XDG_CONFIG_HOME`. The directory and all directories leading to it are created if they did not exist; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_data_directory","","Like `create_config_directory()`, but for a data directory in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_cache_directory","","Like `create_config_directory()`, but for a cache directory in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"create_runtime_directory","","Like `create_config_directory()`, but for a runtime directory in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"list_config_files","","Given a relative path `path`, list absolute paths to all files in directories with path `path` in `XDG_CONFIG_HOME` and `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_config_files_once","","Like `list_config_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_data_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_DATA_HOME` and `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_data_files_once","","Like `list_data_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_cache_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"list_runtime_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an empty `Vec`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"get_data_home","","Returns the user-specific data directory (set by `XDG_DATA_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_config_home","","Returns the user-specific configuration directory (set by `XDG_CONFIG_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_cache_home","","Returns the user-specific directory for non-essential (cached) data (set by `XDG_CACHE_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_data_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary data directories, ordered by preference (set by `XDG_DATA_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_config_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary configuration directories (set by `XDG_CONFIG_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"BaseDirectories"],[3,"BaseDirectoriesError"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
